/* Generated by Cython 0.29.21 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "pymaxion/geometry/Point3d.cpp",
            "pymaxion/geometry/Point3d.h",
            "pymaxion/geometry/Vector3d.cpp",
            "pymaxion/geometry/Vector3d.h"
        ],
        "extra_compile_args": [
            "-fopenmp"
        ],
        "extra_link_args": [
            "-fopenmp"
        ],
        "include_dirs": [
            "./pymaxion/geometry",
            "/home/parallels/.local/lib/python3.6/site-packages/numpy/core/include",
            ".",
            "/media/psf/Home/workspaces/current/pymaxion/src/pymaxion/geometry"
        ],
        "language": "c++",
        "name": "pymaxion.constraints.force",
        "sources": [
            "pymaxion/constraints/force.pyx"
        ]
    },
    "module_name": "pymaxion.constraints.force"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_21"
#define CYTHON_HEX_VERSION 0x001D15F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pymaxion__constraints__force
#define __PYX_HAVE_API__pymaxion__constraints__force
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "Vector3d.cpp"
#include "Vector3d.h"
#include "Point3d.cpp"
#include "Point3d.h"
#include "pythread.h"
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pymaxion/constraints/force.pyx",
  "stringsource",
};
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])


/*--- Type declarations ---*/
struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint;
struct __pyx_obj_8pymaxion_11constraints_5force_Force;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "pymaxion/constraints/constraint.pxd":5
 * from pymaxion.geometry.Point3d cimport Point3d
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef public int constraint_n_particles
 *     cdef vector[int] *particle_index
 */

#line 5 "pymaxion/constraints/constraint.pxd"
struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint {

#line 5 "pymaxion/constraints/constraint.pxd"
  PyObject_HEAD

#line 5 "pymaxion/constraints/constraint.pxd"
  struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint *__pyx_vtab;

#line 5 "pymaxion/constraints/constraint.pxd"
  int constraint_n_particles;

#line 5 "pymaxion/constraints/constraint.pxd"
  std::vector<int>  *particle_index;

#line 5 "pymaxion/constraints/constraint.pxd"
  std::vector<geometry::Vector3d>  *move_vectors;

#line 5 "pymaxion/constraints/constraint.pxd"
  std::vector<double>  *weighting;

#line 5 "pymaxion/constraints/constraint.pxd"
  std::vector<double>  *strength;

#line 5 "pymaxion/constraints/constraint.pxd"
  PyObject *particles;

#line 5 "pymaxion/constraints/constraint.pxd"
};

#line 5 "pymaxion/constraints/constraint.pxd"


/* "pymaxion/constraints/force.pxd":3
 * from pymaxion.constraints.constraint cimport Constraint
 * 
 * cdef class Force(Constraint):             # <<<<<<<<<<<<<<
 *     pass
 */

#line 3 "pymaxion/constraints/force.pxd"
struct __pyx_obj_8pymaxion_11constraints_5force_Force {

#line 3 "pymaxion/constraints/force.pxd"
  struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint __pyx_base;

#line 3 "pymaxion/constraints/force.pxd"
};

#line 3 "pymaxion/constraints/force.pxd"


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

#line 105 "View.MemoryView"
struct __pyx_array_obj {

#line 105 "View.MemoryView"
  PyObject_HEAD

#line 105 "View.MemoryView"
  struct __pyx_vtabstruct_array *__pyx_vtab;

#line 105 "View.MemoryView"
  char *data;

#line 105 "View.MemoryView"
  Py_ssize_t len;

#line 105 "View.MemoryView"
  char *format;

#line 105 "View.MemoryView"
  int ndim;

#line 105 "View.MemoryView"
  Py_ssize_t *_shape;

#line 105 "View.MemoryView"
  Py_ssize_t *_strides;

#line 105 "View.MemoryView"
  Py_ssize_t itemsize;

#line 105 "View.MemoryView"
  PyObject *mode;

#line 105 "View.MemoryView"
  PyObject *_format;

#line 105 "View.MemoryView"
  void (*callback_free_data)(void *);

#line 105 "View.MemoryView"
  int free_data;

#line 105 "View.MemoryView"
  int dtype_is_object;

#line 105 "View.MemoryView"
};

#line 105 "View.MemoryView"


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */

#line 279 "View.MemoryView"
struct __pyx_MemviewEnum_obj {

#line 279 "View.MemoryView"
  PyObject_HEAD

#line 279 "View.MemoryView"
  PyObject *name;

#line 279 "View.MemoryView"
};

#line 279 "View.MemoryView"


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

#line 330 "View.MemoryView"
struct __pyx_memoryview_obj {

#line 330 "View.MemoryView"
  PyObject_HEAD

#line 330 "View.MemoryView"
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;

#line 330 "View.MemoryView"
  PyObject *obj;

#line 330 "View.MemoryView"
  PyObject *_size;

#line 330 "View.MemoryView"
  PyObject *_array_interface;

#line 330 "View.MemoryView"
  PyThread_type_lock lock;

#line 330 "View.MemoryView"
  __pyx_atomic_int acquisition_count[2];

#line 330 "View.MemoryView"
  __pyx_atomic_int *acquisition_count_aligned_p;

#line 330 "View.MemoryView"
  Py_buffer view;

#line 330 "View.MemoryView"
  int flags;

#line 330 "View.MemoryView"
  int dtype_is_object;

#line 330 "View.MemoryView"
  __Pyx_TypeInfo *typeinfo;

#line 330 "View.MemoryView"
};

#line 330 "View.MemoryView"


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

#line 965 "View.MemoryView"
struct __pyx_memoryviewslice_obj {

#line 965 "View.MemoryView"
  struct __pyx_memoryview_obj __pyx_base;

#line 965 "View.MemoryView"
  __Pyx_memviewslice from_slice;

#line 965 "View.MemoryView"
  PyObject *from_object;

#line 965 "View.MemoryView"
  PyObject *(*to_object_func)(char *);

#line 965 "View.MemoryView"
  int (*to_dtype_func)(char *, PyObject *);

#line 965 "View.MemoryView"
};

#line 965 "View.MemoryView"


#line 965 "View.MemoryView"


/* "pymaxion/constraints/constraint.pxd":5
 * from pymaxion.geometry.Point3d cimport Point3d
 * 
 * cdef class Constraint:             # <<<<<<<<<<<<<<
 *     cdef public int constraint_n_particles
 *     cdef vector[int] *particle_index
 */

#line 5 "pymaxion/constraints/constraint.pxd"


#line 5 "pymaxion/constraints/constraint.pxd"
struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint {

#line 5 "pymaxion/constraints/constraint.pxd"
  void (*calculate)(struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint *, __Pyx_memviewslice);

#line 5 "pymaxion/constraints/constraint.pxd"
  void (*sum_moves)(struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint *, __Pyx_memviewslice, __Pyx_memviewslice);

#line 5 "pymaxion/constraints/constraint.pxd"
};

#line 5 "pymaxion/constraints/constraint.pxd"
static struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint *__pyx_vtabptr_8pymaxion_11constraints_10constraint_Constraint;

#line 5 "pymaxion/constraints/constraint.pxd"


/* "pymaxion/constraints/force.pyx":11
 * from pymaxion.geometry.Vector3d cimport Vector3d
 * 
 * cdef class Force(Constraint):             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(Force self):
 */

#line 11 "pymaxion/constraints/force.pyx"


#line 11 "pymaxion/constraints/force.pyx"
struct __pyx_vtabstruct_8pymaxion_11constraints_5force_Force {

#line 11 "pymaxion/constraints/force.pyx"
  struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint __pyx_base;

#line 11 "pymaxion/constraints/force.pyx"
};

#line 11 "pymaxion/constraints/force.pyx"
static struct __pyx_vtabstruct_8pymaxion_11constraints_5force_Force *__pyx_vtabptr_8pymaxion_11constraints_5force_Force;

#line 11 "pymaxion/constraints/force.pyx"


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

#line 105 "View.MemoryView"


#line 105 "View.MemoryView"
struct __pyx_vtabstruct_array {

#line 105 "View.MemoryView"
  PyObject *(*get_memview)(struct __pyx_array_obj *);

#line 105 "View.MemoryView"
};

#line 105 "View.MemoryView"
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;

#line 105 "View.MemoryView"


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

#line 330 "View.MemoryView"


#line 330 "View.MemoryView"
struct __pyx_vtabstruct_memoryview {

#line 330 "View.MemoryView"
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);

#line 330 "View.MemoryView"
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);

#line 330 "View.MemoryView"
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);

#line 330 "View.MemoryView"
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);

#line 330 "View.MemoryView"
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);

#line 330 "View.MemoryView"
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);

#line 330 "View.MemoryView"
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);

#line 330 "View.MemoryView"
};

#line 330 "View.MemoryView"
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;

#line 330 "View.MemoryView"


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

#line 965 "View.MemoryView"


#line 965 "View.MemoryView"
struct __pyx_vtabstruct__memoryviewslice {

#line 965 "View.MemoryView"
  struct __pyx_vtabstruct_memoryview __pyx_base;

#line 965 "View.MemoryView"
};

#line 965 "View.MemoryView"
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc && __pyx_frame->f_trace)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'pymaxion.geometry.Vector3d' */

/* Module declarations from 'pymaxion.geometry.Point3d' */

/* Module declarations from 'pymaxion.constraints.constraint' */
static PyTypeObject *__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint = 0;

/* Module declarations from 'pymaxion.constraints.force' */
static PyTypeObject *__pyx_ptype_8pymaxion_11constraints_5force_Force = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pymaxion.constraints.force"
extern int __pyx_module_is_main_pymaxion__constraints__force;
int __pyx_module_is_main_pymaxion__constraints__force = 0;

/* Implementation of 'pymaxion.constraints.force' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Force[] = "Force";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_p_index[] = "p_index";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_particles[] = "particles";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_force_vector[] = "force_vector";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Incorrect_number_of_particles_fo[] = "Incorrect number of particles for Force";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Force;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_kp_u_Incorrect_number_of_particles_fo;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_force_vector;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_p_index;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_particles;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static int __pyx_pf_8pymaxion_11constraints_5force_5Force___cinit__(struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self); /* proto */
static int __pyx_pf_8pymaxion_11constraints_5force_5Force_2__init__(struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self, PyObject *__pyx_v_particles, PyObject *__pyx_v_force_vector, PyObject *__pyx_v_p_index); /* proto */
static PyObject *__pyx_pf_8pymaxion_11constraints_5force_5Force_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pymaxion_11constraints_5force_5Force_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8pymaxion_11constraints_5force_Force(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_k_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__19;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_codeobj__23;
/* Late includes */

/* "pymaxion/constraints/force.pyx":13
 * cdef class Force(Constraint):
 * 
 *     def __cinit__(Force self):             # <<<<<<<<<<<<<<
 *         self.constraint_n_particles = 1
 * 
 */

#line 13 "pymaxion/constraints/force.pyx"


#line 13 "pymaxion/constraints/force.pyx"
/* Python wrapper */

#line 13 "pymaxion/constraints/force.pyx"
static int __pyx_pw_8pymaxion_11constraints_5force_5Force_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 13 "pymaxion/constraints/force.pyx"
static int __pyx_pw_8pymaxion_11constraints_5force_5Force_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 13 "pymaxion/constraints/force.pyx"
  int __pyx_r;

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyDeclarations

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 13 "pymaxion/constraints/force.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 13 "pymaxion/constraints/force.pyx"
}

#line 13 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 13 "pymaxion/constraints/force.pyx"
__pyx_pf_8pymaxion_11constraints_5force_5Force___cinit__(((struct __pyx_obj_8pymaxion_11constraints_5force_Force *)__pyx_v_self));

#line 13 "pymaxion/constraints/force.pyx"


#line 13 "pymaxion/constraints/force.pyx"
  /* function exit code */

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyFinishContext();

#line 13 "pymaxion/constraints/force.pyx"
  return __pyx_r;

#line 13 "pymaxion/constraints/force.pyx"
}

#line 13 "pymaxion/constraints/force.pyx"


#line 13 "pymaxion/constraints/force.pyx"
static int __pyx_pf_8pymaxion_11constraints_5force_5Force___cinit__(struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self) {

#line 13 "pymaxion/constraints/force.pyx"
  int __pyx_r;

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_TraceDeclarations

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyDeclarations

#line 13 "pymaxion/constraints/force.pyx"
  int __pyx_lineno = 0;

#line 13 "pymaxion/constraints/force.pyx"
  const char *__pyx_filename = NULL;

#line 13 "pymaxion/constraints/force.pyx"
  int __pyx_clineno = 0;

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_TraceCall("__cinit__", __pyx_f[0], 13, 0, __PYX_ERR(0, 13, __pyx_L1_error));

  /* "pymaxion/constraints/force.pyx":14
 * 
 *     def __cinit__(Force self):
 *         self.constraint_n_particles = 1             # <<<<<<<<<<<<<<
 * 
 *     def __init__(Force self, list particles,
 */
  __Pyx_TraceLine(14,0,__PYX_ERR(0, 14, __pyx_L1_error))

#line 14 "pymaxion/constraints/force.pyx"
  __pyx_v_self->__pyx_base.constraint_n_particles = 1;

  /* "pymaxion/constraints/force.pyx":13
 * cdef class Force(Constraint):
 * 
 *     def __cinit__(Force self):             # <<<<<<<<<<<<<<
 *         self.constraint_n_particles = 1
 * 
 */

#line 13 "pymaxion/constraints/force.pyx"


#line 13 "pymaxion/constraints/force.pyx"
  /* function exit code */

#line 13 "pymaxion/constraints/force.pyx"
  __pyx_r = 0;

#line 13 "pymaxion/constraints/force.pyx"
  goto __pyx_L0;

#line 13 "pymaxion/constraints/force.pyx"
  __pyx_L1_error:;

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_AddTraceback("pymaxion.constraints.force.Force.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "pymaxion/constraints/force.pyx"
  __pyx_r = -1;

#line 13 "pymaxion/constraints/force.pyx"
  __pyx_L0:;

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_TraceReturn(Py_None, 0);

#line 13 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyFinishContext();

#line 13 "pymaxion/constraints/force.pyx"
  return __pyx_r;

#line 13 "pymaxion/constraints/force.pyx"
}

/* "pymaxion/constraints/force.pyx":16
 *         self.constraint_n_particles = 1
 * 
 *     def __init__(Force self, list particles,             # <<<<<<<<<<<<<<
 *                  list force_vector, list p_index=[]):
 * 
 */

#line 16 "pymaxion/constraints/force.pyx"


#line 16 "pymaxion/constraints/force.pyx"
/* Python wrapper */

#line 16 "pymaxion/constraints/force.pyx"
static int __pyx_pw_8pymaxion_11constraints_5force_5Force_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 16 "pymaxion/constraints/force.pyx"
static int __pyx_pw_8pymaxion_11constraints_5force_5Force_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_particles = 0
#line 16 "pymaxion/constraints/force.pyx"
;
  PyObject *__pyx_v_force_vector = 0
#line 16 "pymaxion/constraints/force.pyx"
;
  PyObject *__pyx_v_p_index = 0
#line 16 "pymaxion/constraints/force.pyx"
;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_lineno = 0;

#line 16 "pymaxion/constraints/force.pyx"
  const char *__pyx_filename = NULL;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_clineno = 0;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_r;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 16 "pymaxion/constraints/force.pyx"
  {

#line 16 "pymaxion/constraints/force.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_particles,&__pyx_n_s_force_vector,&__pyx_n_s_p_index,0};

#line 16 "pymaxion/constraints/force.pyx"
    PyObject* values[3] = {0,0,0};

#line 16 "pymaxion/constraints/force.pyx"
    values[2] = __pyx_k_;

#line 16 "pymaxion/constraints/force.pyx"
    if (unlikely(__pyx_kwds)) {

#line 16 "pymaxion/constraints/force.pyx"
      Py_ssize_t kw_args;

#line 16 "pymaxion/constraints/force.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 16 "pymaxion/constraints/force.pyx"
      switch (pos_args) {
        case  3: 
#line 16 "pymaxion/constraints/force.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 16 "pymaxion/constraints/force.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 16 "pymaxion/constraints/force.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;

#line 16 "pymaxion/constraints/force.pyx"
        case  0: break;
        default: 
#line 16 "pymaxion/constraints/force.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "pymaxion/constraints/force.pyx"
      }

#line 16 "pymaxion/constraints/force.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 16 "pymaxion/constraints/force.pyx"
      switch (pos_args) {

#line 16 "pymaxion/constraints/force.pyx"
        case  0:

#line 16 "pymaxion/constraints/force.pyx"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particles)) != 0)) kw_args--;
        else 
#line 16 "pymaxion/constraints/force.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;

#line 16 "pymaxion/constraints/force.pyx"
        case  1:

#line 16 "pymaxion/constraints/force.pyx"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_force_vector)) != 0)) kw_args--;

#line 16 "pymaxion/constraints/force.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, 1); 
#line 16 "pymaxion/constraints/force.pyx"
__PYX_ERR(0, 16, __pyx_L3_error)

#line 16 "pymaxion/constraints/force.pyx"
        }

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;

#line 16 "pymaxion/constraints/force.pyx"
        case  2:

#line 16 "pymaxion/constraints/force.pyx"
        if (kw_args > 0) {

#line 16 "pymaxion/constraints/force.pyx"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_p_index);

#line 16 "pymaxion/constraints/force.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 16 "pymaxion/constraints/force.pyx"
        }

#line 16 "pymaxion/constraints/force.pyx"
      }

#line 16 "pymaxion/constraints/force.pyx"
      if (unlikely(kw_args > 0)) {

#line 16 "pymaxion/constraints/force.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 16, __pyx_L3_error)

#line 16 "pymaxion/constraints/force.pyx"
      }

#line 16 "pymaxion/constraints/force.pyx"
    } else {

#line 16 "pymaxion/constraints/force.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 16 "pymaxion/constraints/force.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 16 "pymaxion/constraints/force.pyx"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 16 "pymaxion/constraints/force.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 16 "pymaxion/constraints/force.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 16 "pymaxion/constraints/force.pyx"
        break;
        default: 
#line 16 "pymaxion/constraints/force.pyx"
goto __pyx_L5_argtuple_error;

#line 16 "pymaxion/constraints/force.pyx"
      }

#line 16 "pymaxion/constraints/force.pyx"
    }

#line 16 "pymaxion/constraints/force.pyx"
    __pyx_v_particles = ((PyObject*)values[0]);

#line 16 "pymaxion/constraints/force.pyx"
    __pyx_v_force_vector = ((PyObject*)values[1]);

#line 16 "pymaxion/constraints/force.pyx"
    __pyx_v_p_index = ((PyObject*)values[2]);

#line 16 "pymaxion/constraints/force.pyx"
  }

#line 16 "pymaxion/constraints/force.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 16 "pymaxion/constraints/force.pyx"
__PYX_ERR(0, 16, __pyx_L3_error)

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L3_error:;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_AddTraceback("pymaxion.constraints.force.Force.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "pymaxion/constraints/force.pyx"
  return -1;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 16 "pymaxion/constraints/force.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_particles), (&PyList_Type), 1, "particles", 1))) __PYX_ERR(0, 16, __pyx_L1_error)

#line 16 "pymaxion/constraints/force.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_force_vector), (&PyList_Type), 1, "force_vector", 1))) __PYX_ERR(0, 17, __pyx_L1_error)

#line 16 "pymaxion/constraints/force.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_index), (&PyList_Type), 1, "p_index", 1))) __PYX_ERR(0, 17, __pyx_L1_error)
  __pyx_r = 
#line 16 "pymaxion/constraints/force.pyx"
__pyx_pf_8pymaxion_11constraints_5force_5Force_2__init__(((struct __pyx_obj_8pymaxion_11constraints_5force_Force *)__pyx_v_self), __pyx_v_particles, __pyx_v_force_vector, __pyx_v_p_index);

#line 16 "pymaxion/constraints/force.pyx"


#line 16 "pymaxion/constraints/force.pyx"
  /* function exit code */

#line 16 "pymaxion/constraints/force.pyx"
  goto __pyx_L0;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L1_error:;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_r = -1;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L0:;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "pymaxion/constraints/force.pyx"
  return __pyx_r;

#line 16 "pymaxion/constraints/force.pyx"
}

#line 16 "pymaxion/constraints/force.pyx"


#line 16 "pymaxion/constraints/force.pyx"
static int __pyx_pf_8pymaxion_11constraints_5force_5Force_2__init__(struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self, PyObject *__pyx_v_particles, PyObject *__pyx_v_force_vector, PyObject *__pyx_v_p_index) {
  PyObject *__pyx_v_ind = NULL
#line 16 "pymaxion/constraints/force.pyx"
;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_r;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_TraceDeclarations

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyDeclarations

#line 16 "pymaxion/constraints/force.pyx"
  Py_ssize_t __pyx_t_1;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_t_2;

#line 16 "pymaxion/constraints/force.pyx"
  PyObject *__pyx_t_3 = NULL;

#line 16 "pymaxion/constraints/force.pyx"
  PyObject *__pyx_t_4 = NULL;

#line 16 "pymaxion/constraints/force.pyx"
  PyObject *__pyx_t_5 = NULL;

#line 16 "pymaxion/constraints/force.pyx"
  double __pyx_t_6;

#line 16 "pymaxion/constraints/force.pyx"
  double __pyx_t_7;

#line 16 "pymaxion/constraints/force.pyx"
  double __pyx_t_8;

#line 16 "pymaxion/constraints/force.pyx"
  geometry::Vector3d __pyx_t_9;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_t_10;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_lineno = 0;

#line 16 "pymaxion/constraints/force.pyx"
  const char *__pyx_filename = NULL;

#line 16 "pymaxion/constraints/force.pyx"
  int __pyx_clineno = 0;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_TraceCall("__init__", __pyx_f[0], 16, 0, __PYX_ERR(0, 16, __pyx_L1_error));

  /* "pymaxion/constraints/force.pyx":19
 *                  list force_vector, list p_index=[]):
 * 
 *         if len(particles) != self.constraint_n_particles:             # <<<<<<<<<<<<<<
 *             raise ValueError("Incorrect number of particles for Force")
 *         super().__init__(particles)
 */
  __Pyx_TraceLine(19,0,__PYX_ERR(0, 19, __pyx_L1_error))

#line 19 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_v_particles == Py_None)) {

#line 19 "pymaxion/constraints/force.pyx"
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 19 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 19, __pyx_L1_error)

#line 19 "pymaxion/constraints/force.pyx"
  }

#line 19 "pymaxion/constraints/force.pyx"
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_particles); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 19, __pyx_L1_error)

#line 19 "pymaxion/constraints/force.pyx"
  __pyx_t_2 = ((__pyx_t_1 != __pyx_v_self->__pyx_base.constraint_n_particles) != 0);

#line 19 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_t_2)) {

    /* "pymaxion/constraints/force.pyx":20
 * 
 *         if len(particles) != self.constraint_n_particles:
 *             raise ValueError("Incorrect number of particles for Force")             # <<<<<<<<<<<<<<
 *         super().__init__(particles)
 * 
 */
    __Pyx_TraceLine(20,0,__PYX_ERR(0, 20, __pyx_L1_error))

#line 20 "pymaxion/constraints/force.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "pymaxion/constraints/force.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 20 "pymaxion/constraints/force.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 20 "pymaxion/constraints/force.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 20 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 20, __pyx_L1_error)

    /* "pymaxion/constraints/force.pyx":19
 *                  list force_vector, list p_index=[]):
 * 
 *         if len(particles) != self.constraint_n_particles:             # <<<<<<<<<<<<<<
 *             raise ValueError("Incorrect number of particles for Force")
 *         super().__init__(particles)
 */

#line 19 "pymaxion/constraints/force.pyx"
  }

  /* "pymaxion/constraints/force.pyx":21
 *         if len(particles) != self.constraint_n_particles:
 *             raise ValueError("Incorrect number of particles for Force")
 *         super().__init__(particles)             # <<<<<<<<<<<<<<
 * 
 *         self.move_vectors.push_back(Vector3d(force_vector[0],
 */
  __Pyx_TraceLine(21,0,__PYX_ERR(0, 21, __pyx_L1_error))

#line 21 "pymaxion/constraints/force.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_ptype_8pymaxion_11constraints_5force_Force));

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_8pymaxion_11constraints_5force_Force));

#line 21 "pymaxion/constraints/force.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_ptype_8pymaxion_11constraints_5force_Force));

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 21 "pymaxion/constraints/force.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self));

#line 21 "pymaxion/constraints/force.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 21 "pymaxion/constraints/force.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_init); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 21 "pymaxion/constraints/force.pyx"
  __pyx_t_5 = NULL;

#line 21 "pymaxion/constraints/force.pyx"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {

#line 21 "pymaxion/constraints/force.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 21 "pymaxion/constraints/force.pyx"
    if (likely(__pyx_t_5)) {

#line 21 "pymaxion/constraints/force.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 21 "pymaxion/constraints/force.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 21 "pymaxion/constraints/force.pyx"
      __Pyx_INCREF(function);

#line 21 "pymaxion/constraints/force.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 21 "pymaxion/constraints/force.pyx"
    }

#line 21 "pymaxion/constraints/force.pyx"
  }

#line 21 "pymaxion/constraints/force.pyx"
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_particles) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_particles);

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 21 "pymaxion/constraints/force.pyx"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 21, __pyx_L1_error)

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 21 "pymaxion/constraints/force.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pymaxion/constraints/force.pyx":23
 *         super().__init__(particles)
 * 
 *         self.move_vectors.push_back(Vector3d(force_vector[0],             # <<<<<<<<<<<<<<
 *                                              force_vector[1],
 *                                              force_vector[2]))
 */
  __Pyx_TraceLine(23,0,__PYX_ERR(0, 23, __pyx_L1_error))

#line 23 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_v_force_vector == Py_None)) {

#line 23 "pymaxion/constraints/force.pyx"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 23 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 23, __pyx_L1_error)

#line 23 "pymaxion/constraints/force.pyx"
  }

#line 23 "pymaxion/constraints/force.pyx"
  __pyx_t_6 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_force_vector, 0)); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 23, __pyx_L1_error)

  /* "pymaxion/constraints/force.pyx":24
 * 
 *         self.move_vectors.push_back(Vector3d(force_vector[0],
 *                                              force_vector[1],             # <<<<<<<<<<<<<<
 *                                              force_vector[2]))
 *         self.strength.push_back(1.0)
 */
  __Pyx_TraceLine(24,0,__PYX_ERR(0, 24, __pyx_L1_error))

#line 24 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_v_force_vector == Py_None)) {

#line 24 "pymaxion/constraints/force.pyx"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 24 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 24, __pyx_L1_error)

#line 24 "pymaxion/constraints/force.pyx"
  }

#line 24 "pymaxion/constraints/force.pyx"
  __pyx_t_7 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_force_vector, 1)); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L1_error)

  /* "pymaxion/constraints/force.pyx":25
 *         self.move_vectors.push_back(Vector3d(force_vector[0],
 *                                              force_vector[1],
 *                                              force_vector[2]))             # <<<<<<<<<<<<<<
 *         self.strength.push_back(1.0)
 * 
 */
  __Pyx_TraceLine(25,0,__PYX_ERR(0, 25, __pyx_L1_error))

#line 25 "pymaxion/constraints/force.pyx"
  if (unlikely(__pyx_v_force_vector == Py_None)) {

#line 25 "pymaxion/constraints/force.pyx"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 25 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 25, __pyx_L1_error)

#line 25 "pymaxion/constraints/force.pyx"
  }

#line 25 "pymaxion/constraints/force.pyx"
  __pyx_t_8 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_force_vector, 2)); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)

  /* "pymaxion/constraints/force.pyx":23
 *         super().__init__(particles)
 * 
 *         self.move_vectors.push_back(Vector3d(force_vector[0],             # <<<<<<<<<<<<<<
 *                                              force_vector[1],
 *                                              force_vector[2]))
 */
  __Pyx_TraceLine(23,0,__PYX_ERR(0, 23, __pyx_L1_error))

#line 23 "pymaxion/constraints/force.pyx"
  try {

#line 23 "pymaxion/constraints/force.pyx"
    __pyx_t_9 = geometry::Vector3d(__pyx_t_6, __pyx_t_7, __pyx_t_8);

#line 23 "pymaxion/constraints/force.pyx"
  } catch(...) {

#line 23 "pymaxion/constraints/force.pyx"
    __Pyx_CppExn2PyErr();

#line 23 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 23, __pyx_L1_error)

#line 23 "pymaxion/constraints/force.pyx"
  }

#line 23 "pymaxion/constraints/force.pyx"
  try {

#line 23 "pymaxion/constraints/force.pyx"
    __pyx_v_self->__pyx_base.move_vectors->push_back(__pyx_t_9);

#line 23 "pymaxion/constraints/force.pyx"
  } catch(...) {

#line 23 "pymaxion/constraints/force.pyx"
    __Pyx_CppExn2PyErr();

#line 23 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 23, __pyx_L1_error)

#line 23 "pymaxion/constraints/force.pyx"
  }

  /* "pymaxion/constraints/force.pyx":26
 *                                              force_vector[1],
 *                                              force_vector[2]))
 *         self.strength.push_back(1.0)             # <<<<<<<<<<<<<<
 * 
 *         if p_index:
 */
  __Pyx_TraceLine(26,0,__PYX_ERR(0, 26, __pyx_L1_error))

#line 26 "pymaxion/constraints/force.pyx"
  try {

#line 26 "pymaxion/constraints/force.pyx"
    __pyx_v_self->__pyx_base.strength->push_back(1.0);

#line 26 "pymaxion/constraints/force.pyx"
  } catch(...) {

#line 26 "pymaxion/constraints/force.pyx"
    __Pyx_CppExn2PyErr();

#line 26 "pymaxion/constraints/force.pyx"
    __PYX_ERR(0, 26, __pyx_L1_error)

#line 26 "pymaxion/constraints/force.pyx"
  }

  /* "pymaxion/constraints/force.pyx":28
 *         self.strength.push_back(1.0)
 * 
 *         if p_index:             # <<<<<<<<<<<<<<
 *             for ind in p_index:
 *                 self.particle_index.push_back(ind)
 */
  __Pyx_TraceLine(28,0,__PYX_ERR(0, 28, __pyx_L1_error))

#line 28 "pymaxion/constraints/force.pyx"
  __pyx_t_2 = (__pyx_v_p_index != Py_None)&&(PyList_GET_SIZE(__pyx_v_p_index) != 0);

#line 28 "pymaxion/constraints/force.pyx"
  if (__pyx_t_2) {

    /* "pymaxion/constraints/force.pyx":29
 * 
 *         if p_index:
 *             for ind in p_index:             # <<<<<<<<<<<<<<
 *                 self.particle_index.push_back(ind)
 * 
 */
    __Pyx_TraceLine(29,0,__PYX_ERR(0, 29, __pyx_L1_error))

#line 29 "pymaxion/constraints/force.pyx"
    if (unlikely(__pyx_v_p_index == Py_None)) {

#line 29 "pymaxion/constraints/force.pyx"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 29 "pymaxion/constraints/force.pyx"
      __PYX_ERR(0, 29, __pyx_L1_error)

#line 29 "pymaxion/constraints/force.pyx"
    }

#line 29 "pymaxion/constraints/force.pyx"
    __pyx_t_3 = __pyx_v_p_index; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 29 "pymaxion/constraints/force.pyx"
    for (;;) {

#line 29 "pymaxion/constraints/force.pyx"
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 29 "pymaxion/constraints/force.pyx"
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 29 "pymaxion/constraints/force.pyx"
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 29, __pyx_L1_error)

#line 29 "pymaxion/constraints/force.pyx"
      #else

#line 29 "pymaxion/constraints/force.pyx"
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 29, __pyx_L1_error)

#line 29 "pymaxion/constraints/force.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 29 "pymaxion/constraints/force.pyx"
      #endif

#line 29 "pymaxion/constraints/force.pyx"
      __Pyx_XDECREF_SET(__pyx_v_ind, __pyx_t_4);

#line 29 "pymaxion/constraints/force.pyx"
      __pyx_t_4 = 0;

      /* "pymaxion/constraints/force.pyx":30
 *         if p_index:
 *             for ind in p_index:
 *                 self.particle_index.push_back(ind)             # <<<<<<<<<<<<<<
 * 
 */
      __Pyx_TraceLine(30,0,__PYX_ERR(0, 30, __pyx_L1_error))

#line 30 "pymaxion/constraints/force.pyx"
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_ind); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 30, __pyx_L1_error)

#line 30 "pymaxion/constraints/force.pyx"
      try {

#line 30 "pymaxion/constraints/force.pyx"
        __pyx_v_self->__pyx_base.particle_index->push_back(__pyx_t_10);

#line 30 "pymaxion/constraints/force.pyx"
      } catch(...) {

#line 30 "pymaxion/constraints/force.pyx"
        __Pyx_CppExn2PyErr();

#line 30 "pymaxion/constraints/force.pyx"
        __PYX_ERR(0, 30, __pyx_L1_error)

#line 30 "pymaxion/constraints/force.pyx"
      }

      /* "pymaxion/constraints/force.pyx":29
 * 
 *         if p_index:
 *             for ind in p_index:             # <<<<<<<<<<<<<<
 *                 self.particle_index.push_back(ind)
 * 
 */
      __Pyx_TraceLine(29,0,__PYX_ERR(0, 29, __pyx_L1_error))

#line 29 "pymaxion/constraints/force.pyx"
    }

#line 29 "pymaxion/constraints/force.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "pymaxion/constraints/force.pyx":28
 *         self.strength.push_back(1.0)
 * 
 *         if p_index:             # <<<<<<<<<<<<<<
 *             for ind in p_index:
 *                 self.particle_index.push_back(ind)
 */

#line 28 "pymaxion/constraints/force.pyx"
  }

  /* "pymaxion/constraints/force.pyx":16
 *         self.constraint_n_particles = 1
 * 
 *     def __init__(Force self, list particles,             # <<<<<<<<<<<<<<
 *                  list force_vector, list p_index=[]):
 * 
 */

#line 16 "pymaxion/constraints/force.pyx"


#line 16 "pymaxion/constraints/force.pyx"
  /* function exit code */

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_r = 0;

#line 16 "pymaxion/constraints/force.pyx"
  goto __pyx_L0;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L1_error:;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_AddTraceback("pymaxion.constraints.force.Force.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_r = -1;

#line 16 "pymaxion/constraints/force.pyx"
  __pyx_L0:;

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_XDECREF(__pyx_v_ind);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_TraceReturn(Py_None, 0);

#line 16 "pymaxion/constraints/force.pyx"
  __Pyx_RefNannyFinishContext();

#line 16 "pymaxion/constraints/force.pyx"
  return __pyx_r;

#line 16 "pymaxion/constraints/force.pyx"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8pymaxion_11constraints_5force_5Force_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_8pymaxion_11constraints_5force_5Force_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_8pymaxion_11constraints_5force_5Force_4__reduce_cython__(((struct __pyx_obj_8pymaxion_11constraints_5force_Force *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_8pymaxion_11constraints_5force_5Force_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("pymaxion.constraints.force.Force.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8pymaxion_11constraints_5force_5Force_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw_8pymaxion_11constraints_5force_5Force_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf_8pymaxion_11constraints_5force_5Force_6__setstate_cython__(((struct __pyx_obj_8pymaxion_11constraints_5force_Force *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf_8pymaxion_11constraints_5force_5Force_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pymaxion_11constraints_5force_Force *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

#line 3 "(tree fragment)"
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("pymaxion.constraints.force.Force.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 122 "View.MemoryView"


#line 122 "View.MemoryView"
/* Python wrapper */

#line 122 "View.MemoryView"
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 122 "View.MemoryView"
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0
#line 122 "View.MemoryView"
;
  Py_ssize_t __pyx_v_itemsize
#line 122 "View.MemoryView"
;
  PyObject *__pyx_v_format = 0
#line 122 "View.MemoryView"
;
  PyObject *__pyx_v_mode = 0
#line 122 "View.MemoryView"
;
  int __pyx_v_allocate_buffer
#line 122 "View.MemoryView"
;

#line 122 "View.MemoryView"
  int __pyx_lineno = 0;

#line 122 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 122 "View.MemoryView"
  int __pyx_clineno = 0;

#line 122 "View.MemoryView"
  int __pyx_r;

#line 122 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 122 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 122 "View.MemoryView"
  {

#line 122 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};

#line 122 "View.MemoryView"
    PyObject* values[5] = {0,0,0,0,0};

#line 122 "View.MemoryView"
    values[3] = ((PyObject *)__pyx_n_s_c);

#line 122 "View.MemoryView"
    if (unlikely(__pyx_kwds)) {

#line 122 "View.MemoryView"
      Py_ssize_t kw_args;

#line 122 "View.MemoryView"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 122 "View.MemoryView"
      switch (pos_args) {
        case  5: 
#line 122 "View.MemoryView"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 122 "View.MemoryView"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 122 "View.MemoryView"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 122 "View.MemoryView"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 122 "View.MemoryView"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 122 "View.MemoryView"
        case  0: break;
        default: 
#line 122 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 122 "View.MemoryView"
      }

#line 122 "View.MemoryView"
      kw_args = PyDict_Size(__pyx_kwds);

#line 122 "View.MemoryView"
      switch (pos_args) {

#line 122 "View.MemoryView"
        case  0:

#line 122 "View.MemoryView"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else 
#line 122 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 122 "View.MemoryView"
        case  1:

#line 122 "View.MemoryView"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;

#line 122 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); 
#line 122 "View.MemoryView"
__PYX_ERR(1, 122, __pyx_L3_error)

#line 122 "View.MemoryView"
        }

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 122 "View.MemoryView"
        case  2:

#line 122 "View.MemoryView"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;

#line 122 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); 
#line 122 "View.MemoryView"
__PYX_ERR(1, 122, __pyx_L3_error)

#line 122 "View.MemoryView"
        }

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 122 "View.MemoryView"
        case  3:

#line 122 "View.MemoryView"
        if (kw_args > 0) {

#line 122 "View.MemoryView"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);

#line 122 "View.MemoryView"
          if (value) { values[3] = value; kw_args--; }

#line 122 "View.MemoryView"
        }

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 122 "View.MemoryView"
        case  4:

#line 122 "View.MemoryView"
        if (kw_args > 0) {

#line 122 "View.MemoryView"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);

#line 122 "View.MemoryView"
          if (value) { values[4] = value; kw_args--; }

#line 122 "View.MemoryView"
        }

#line 122 "View.MemoryView"
      }

#line 122 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 122 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)

#line 122 "View.MemoryView"
      }

#line 122 "View.MemoryView"
    } else {

#line 122 "View.MemoryView"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 122 "View.MemoryView"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  4: 
#line 122 "View.MemoryView"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 122 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  3: 
#line 122 "View.MemoryView"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 122 "View.MemoryView"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 122 "View.MemoryView"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "View.MemoryView"
        break;
        default: 
#line 122 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 122 "View.MemoryView"
      }

#line 122 "View.MemoryView"
    }

#line 122 "View.MemoryView"
    __pyx_v_shape = ((PyObject*)values[0]);

#line 122 "View.MemoryView"
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)

#line 122 "View.MemoryView"
    __pyx_v_format = values[2];

#line 122 "View.MemoryView"
    __pyx_v_mode = values[3];

#line 122 "View.MemoryView"
    if (values[4]) {

#line 122 "View.MemoryView"
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)

#line 122 "View.MemoryView"
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */

#line 123 "View.MemoryView"
      __pyx_v_allocate_buffer = ((int)1);

#line 123 "View.MemoryView"
    }

#line 123 "View.MemoryView"
  }

#line 123 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 123 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 123 "View.MemoryView"
__PYX_ERR(1, 122, __pyx_L3_error)

#line 123 "View.MemoryView"
  __pyx_L3_error:;

#line 123 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 123 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 123 "View.MemoryView"
  return -1;

#line 123 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;

#line 123 "View.MemoryView"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)

#line 123 "View.MemoryView"
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {

#line 123 "View.MemoryView"
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)

#line 123 "View.MemoryView"
  }
  __pyx_r = 
#line 123 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 122 "View.MemoryView"


#line 122 "View.MemoryView"
  /* function exit code */

#line 122 "View.MemoryView"
  goto __pyx_L0;

#line 122 "View.MemoryView"
  __pyx_L1_error:;

#line 122 "View.MemoryView"
  __pyx_r = -1;

#line 122 "View.MemoryView"
  __pyx_L0:;

#line 122 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 122 "View.MemoryView"
  return __pyx_r;

#line 122 "View.MemoryView"
}

#line 122 "View.MemoryView"


#line 122 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx
#line 122 "View.MemoryView"
;
  Py_ssize_t __pyx_v_i
#line 122 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dim
#line 122 "View.MemoryView"
;
  PyObject **__pyx_v_p
#line 122 "View.MemoryView"
;
  char __pyx_v_order
#line 122 "View.MemoryView"
;

#line 122 "View.MemoryView"
  int __pyx_r;

#line 122 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 122 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 122 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 122 "View.MemoryView"
  int __pyx_t_2;

#line 122 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 122 "View.MemoryView"
  int __pyx_t_4;

#line 122 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 122 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 122 "View.MemoryView"
  char *__pyx_t_7;

#line 122 "View.MemoryView"
  int __pyx_t_8;

#line 122 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 122 "View.MemoryView"
  PyObject *__pyx_t_10 = NULL;

#line 122 "View.MemoryView"
  Py_ssize_t __pyx_t_11;

#line 122 "View.MemoryView"
  int __pyx_lineno = 0;

#line 122 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 122 "View.MemoryView"
  int __pyx_clineno = 0;

#line 122 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__", 0);

#line 122 "View.MemoryView"
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 122, 0, __PYX_ERR(1, 122, __pyx_L1_error));

#line 122 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  __Pyx_TraceLine(129,0,__PYX_ERR(1, 129, __pyx_L1_error))

#line 129 "View.MemoryView"
  if (unlikely(__pyx_v_shape == Py_None)) {

#line 129 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 129 "View.MemoryView"
    __PYX_ERR(1, 129, __pyx_L1_error)

#line 129 "View.MemoryView"
  }

#line 129 "View.MemoryView"
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)

#line 129 "View.MemoryView"
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __Pyx_TraceLine(130,0,__PYX_ERR(1, 130, __pyx_L1_error))

#line 130 "View.MemoryView"
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __Pyx_TraceLine(132,0,__PYX_ERR(1, 132, __pyx_L1_error))

#line 132 "View.MemoryView"
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);

#line 132 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __Pyx_TraceLine(133,0,__PYX_ERR(1, 133, __pyx_L1_error))

#line 133 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)

#line 133 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 133 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 133 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 133 "View.MemoryView"
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */

#line 132 "View.MemoryView"
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __Pyx_TraceLine(135,0,__PYX_ERR(1, 135, __pyx_L1_error))

#line 135 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);

#line 135 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __Pyx_TraceLine(136,0,__PYX_ERR(1, 136, __pyx_L1_error))

#line 136 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)

#line 136 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 136 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 136 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 136 "View.MemoryView"
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */

#line 135 "View.MemoryView"
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __Pyx_TraceLine(138,0,__PYX_ERR(1, 138, __pyx_L1_error))

#line 138 "View.MemoryView"
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 

#line 138 "View.MemoryView"
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);

#line 138 "View.MemoryView"
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __Pyx_TraceLine(139,0,__PYX_ERR(1, 139, __pyx_L1_error))

#line 139 "View.MemoryView"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)

#line 139 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 139 "View.MemoryView"
    __pyx_t_6 = NULL;

#line 139 "View.MemoryView"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 139 "View.MemoryView"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 139 "View.MemoryView"
      if (likely(__pyx_t_6)) {

#line 139 "View.MemoryView"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 139 "View.MemoryView"
        __Pyx_INCREF(__pyx_t_6);

#line 139 "View.MemoryView"
        __Pyx_INCREF(function);

#line 139 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 139 "View.MemoryView"
      }

#line 139 "View.MemoryView"
    }

#line 139 "View.MemoryView"
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);

#line 139 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 139 "View.MemoryView"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)

#line 139 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 139 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 139 "View.MemoryView"
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);

#line 139 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */

#line 138 "View.MemoryView"
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  __Pyx_TraceLine(140,0,__PYX_ERR(1, 140, __pyx_L1_error))

#line 140 "View.MemoryView"
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)

#line 140 "View.MemoryView"
  __pyx_t_3 = __pyx_v_format;

#line 140 "View.MemoryView"
  __Pyx_INCREF(__pyx_t_3);

#line 140 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_3);

#line 140 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->_format);

#line 140 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->_format);

#line 140 "View.MemoryView"
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);

#line 140 "View.MemoryView"
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(141,0,__PYX_ERR(1, 141, __pyx_L1_error))

#line 141 "View.MemoryView"
  if (unlikely(__pyx_v_self->_format == Py_None)) {

#line 141 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");

#line 141 "View.MemoryView"
    __PYX_ERR(1, 141, __pyx_L1_error)

#line 141 "View.MemoryView"
  }

#line 141 "View.MemoryView"
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)

#line 141 "View.MemoryView"
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __Pyx_TraceLine(144,0,__PYX_ERR(1, 144, __pyx_L1_error))

#line 144 "View.MemoryView"
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __Pyx_TraceLine(145,0,__PYX_ERR(1, 145, __pyx_L1_error))

#line 145 "View.MemoryView"
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __Pyx_TraceLine(147,0,__PYX_ERR(1, 147, __pyx_L1_error))

#line 147 "View.MemoryView"
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);

#line 147 "View.MemoryView"
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(148,0,__PYX_ERR(1, 148, __pyx_L1_error))

#line 148 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 148 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 148 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 148 "View.MemoryView"
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */

#line 147 "View.MemoryView"
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __Pyx_TraceLine(151,0,__PYX_ERR(1, 151, __pyx_L1_error))

#line 151 "View.MemoryView"
  __pyx_t_8 = 0;

#line 151 "View.MemoryView"
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 151 "View.MemoryView"
  for (;;) {

#line 151 "View.MemoryView"
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 151 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 151 "View.MemoryView"
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)

#line 151 "View.MemoryView"
    #else

#line 151 "View.MemoryView"
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)

#line 151 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 151 "View.MemoryView"
    #endif

#line 151 "View.MemoryView"
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)

#line 151 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 151 "View.MemoryView"
    __pyx_v_dim = __pyx_t_9;

#line 151 "View.MemoryView"
    __pyx_v_idx = __pyx_t_8;

#line 151 "View.MemoryView"
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __Pyx_TraceLine(152,0,__PYX_ERR(1, 152, __pyx_L1_error))

#line 152 "View.MemoryView"
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);

#line 152 "View.MemoryView"
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __Pyx_TraceLine(153,0,__PYX_ERR(1, 153, __pyx_L1_error))

#line 153 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)

#line 153 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 153 "View.MemoryView"
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)

#line 153 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 153 "View.MemoryView"
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)

#line 153 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_10);

#line 153 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_5);

#line 153 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);

#line 153 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_6);

#line 153 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);

#line 153 "View.MemoryView"
      __pyx_t_5 = 0;

#line 153 "View.MemoryView"
      __pyx_t_6 = 0;

#line 153 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)

#line 153 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 153 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 153 "View.MemoryView"
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)

#line 153 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_10);

#line 153 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 153 "View.MemoryView"
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);

#line 153 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 153 "View.MemoryView"
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */

#line 152 "View.MemoryView"
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    __Pyx_TraceLine(154,0,__PYX_ERR(1, 154, __pyx_L1_error))

#line 154 "View.MemoryView"
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
    __Pyx_TraceLine(151,0,__PYX_ERR(1, 151, __pyx_L1_error))

#line 151 "View.MemoryView"
  }

#line 151 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __Pyx_TraceLine(157,0,__PYX_ERR(1, 157, __pyx_L1_error))

#line 157 "View.MemoryView"
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)

#line 157 "View.MemoryView"
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __Pyx_TraceLine(158,0,__PYX_ERR(1, 158, __pyx_L1_error))

#line 158 "View.MemoryView"
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_TraceLine(159,0,__PYX_ERR(1, 159, __pyx_L1_error))

#line 159 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_u_fortran);

#line 159 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_n_u_fortran);

#line 159 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->mode);

#line 159 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->mode);

#line 159 "View.MemoryView"
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */

#line 157 "View.MemoryView"
    goto __pyx_L10;

#line 157 "View.MemoryView"
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __Pyx_TraceLine(160,0,__PYX_ERR(1, 160, __pyx_L1_error))

#line 160 "View.MemoryView"
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)

#line 160 "View.MemoryView"
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __Pyx_TraceLine(161,0,__PYX_ERR(1, 161, __pyx_L1_error))

#line 161 "View.MemoryView"
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_TraceLine(162,0,__PYX_ERR(1, 162, __pyx_L1_error))

#line 162 "View.MemoryView"
    __Pyx_INCREF(__pyx_n_u_c);

#line 162 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_n_u_c);

#line 162 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->mode);

#line 162 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->mode);

#line 162 "View.MemoryView"
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */

#line 160 "View.MemoryView"
    goto __pyx_L10;

#line 160 "View.MemoryView"
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  __Pyx_TraceLine(164,0,__PYX_ERR(1, 164, __pyx_L1_error))

#line 164 "View.MemoryView"
  /*else*/ {

#line 164 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)

#line 164 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 164 "View.MemoryView"
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)

#line 164 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_10);

#line 164 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 164 "View.MemoryView"
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);

#line 164 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 164 "View.MemoryView"
    __PYX_ERR(1, 164, __pyx_L1_error)

#line 164 "View.MemoryView"
  }

#line 164 "View.MemoryView"
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __Pyx_TraceLine(166,0,__PYX_ERR(1, 166, __pyx_L1_error))

#line 166 "View.MemoryView"
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __Pyx_TraceLine(169,0,__PYX_ERR(1, 169, __pyx_L1_error))

#line 169 "View.MemoryView"
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __Pyx_TraceLine(170,0,__PYX_ERR(1, 170, __pyx_L1_error))

#line 170 "View.MemoryView"
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)

#line 170 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)

#line 170 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 170 "View.MemoryView"
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(171,0,__PYX_ERR(1, 171, __pyx_L1_error))

#line 171 "View.MemoryView"
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);

#line 171 "View.MemoryView"
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __Pyx_TraceLine(174,0,__PYX_ERR(1, 174, __pyx_L1_error))

#line 174 "View.MemoryView"
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __Pyx_TraceLine(175,0,__PYX_ERR(1, 175, __pyx_L1_error))

#line 175 "View.MemoryView"
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);

#line 175 "View.MemoryView"
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __Pyx_TraceLine(176,0,__PYX_ERR(1, 176, __pyx_L1_error))

#line 176 "View.MemoryView"
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)

#line 176 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_10);

#line 176 "View.MemoryView"
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);

#line 176 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 176 "View.MemoryView"
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */

#line 175 "View.MemoryView"
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __Pyx_TraceLine(178,0,__PYX_ERR(1, 178, __pyx_L1_error))

#line 178 "View.MemoryView"
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);

#line 178 "View.MemoryView"
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __Pyx_TraceLine(179,0,__PYX_ERR(1, 179, __pyx_L1_error))

#line 179 "View.MemoryView"
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      __Pyx_TraceLine(180,0,__PYX_ERR(1, 180, __pyx_L1_error))

#line 180 "View.MemoryView"
      if (unlikely(__pyx_v_itemsize == 0)) {

#line 180 "View.MemoryView"
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");

#line 180 "View.MemoryView"
        __PYX_ERR(1, 180, __pyx_L1_error)

#line 180 "View.MemoryView"
      }

#line 180 "View.MemoryView"
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {

#line 180 "View.MemoryView"
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");

#line 180 "View.MemoryView"
        __PYX_ERR(1, 180, __pyx_L1_error)

#line 180 "View.MemoryView"
      }

#line 180 "View.MemoryView"
      __pyx_t_1 = (__pyx_v_self->len / __pyx_v_itemsize);

#line 180 "View.MemoryView"
      __pyx_t_9 = __pyx_t_1;

#line 180 "View.MemoryView"
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {

#line 180 "View.MemoryView"
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        __Pyx_TraceLine(181,0,__PYX_ERR(1, 181, __pyx_L1_error))

#line 181 "View.MemoryView"
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        __Pyx_TraceLine(182,0,__PYX_ERR(1, 182, __pyx_L1_error))

#line 182 "View.MemoryView"
        Py_INCREF(Py_None);

#line 182 "View.MemoryView"
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */

#line 178 "View.MemoryView"
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 171 "View.MemoryView"
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

#line 122 "View.MemoryView"


#line 122 "View.MemoryView"
  /* function exit code */

#line 122 "View.MemoryView"
  __pyx_r = 0;

#line 122 "View.MemoryView"
  goto __pyx_L0;

#line 122 "View.MemoryView"
  __pyx_L1_error:;

#line 122 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 122 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 122 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 122 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_10);

#line 122 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 122 "View.MemoryView"
  __pyx_r = -1;

#line 122 "View.MemoryView"
  __pyx_L0:;

#line 122 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_format);

#line 122 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 122 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 122 "View.MemoryView"
  return __pyx_r;

#line 122 "View.MemoryView"
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

#line 185 "View.MemoryView"


#line 185 "View.MemoryView"
/* Python wrapper */

#line 185 "View.MemoryView"
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 185 "View.MemoryView"
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 185 "View.MemoryView"
  int __pyx_r;

#line 185 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 185 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 185 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 185 "View.MemoryView"


#line 185 "View.MemoryView"
  /* function exit code */

#line 185 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 185 "View.MemoryView"
  return __pyx_r;

#line 185 "View.MemoryView"
}

#line 185 "View.MemoryView"


#line 185 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode
#line 185 "View.MemoryView"
;

#line 185 "View.MemoryView"
  int __pyx_r;

#line 185 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 185 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 185 "View.MemoryView"
  int __pyx_t_1;

#line 185 "View.MemoryView"
  int __pyx_t_2;

#line 185 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 185 "View.MemoryView"
  char *__pyx_t_4;

#line 185 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 185 "View.MemoryView"
  int __pyx_t_6;

#line 185 "View.MemoryView"
  Py_ssize_t *__pyx_t_7;

#line 185 "View.MemoryView"
  int __pyx_lineno = 0;

#line 185 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 185 "View.MemoryView"
  int __pyx_clineno = 0;

#line 185 "View.MemoryView"
  if (__pyx_v_info == NULL) {

#line 185 "View.MemoryView"
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");

#line 185 "View.MemoryView"
    return -1;

#line 185 "View.MemoryView"
  }

#line 185 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 185 "View.MemoryView"
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 185 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_info->obj);

#line 185 "View.MemoryView"
  __Pyx_TraceCall("__getbuffer__", __pyx_f[1], 185, 0, __PYX_ERR(1, 185, __pyx_L1_error));

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __Pyx_TraceLine(186,0,__PYX_ERR(1, 186, __pyx_L1_error))

#line 186 "View.MemoryView"
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __Pyx_TraceLine(187,0,__PYX_ERR(1, 187, __pyx_L1_error))

#line 187 "View.MemoryView"
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)

#line 187 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 187 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __Pyx_TraceLine(188,0,__PYX_ERR(1, 188, __pyx_L1_error))

#line 188 "View.MemoryView"
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */

#line 187 "View.MemoryView"
    goto __pyx_L3;

#line 187 "View.MemoryView"
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __Pyx_TraceLine(189,0,__PYX_ERR(1, 189, __pyx_L1_error))

#line 189 "View.MemoryView"
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)

#line 189 "View.MemoryView"
  __pyx_t_1 = (__pyx_t_2 != 0);

#line 189 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __Pyx_TraceLine(190,0,__PYX_ERR(1, 190, __pyx_L1_error))

#line 190 "View.MemoryView"
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */

#line 189 "View.MemoryView"
  }

#line 189 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __Pyx_TraceLine(191,0,__PYX_ERR(1, 191, __pyx_L1_error))

#line 191 "View.MemoryView"
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);

#line 191 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __Pyx_TraceLine(192,0,__PYX_ERR(1, 192, __pyx_L1_error))

#line 192 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)

#line 192 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 192 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 192 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 192 "View.MemoryView"
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */

#line 191 "View.MemoryView"
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __Pyx_TraceLine(193,0,__PYX_ERR(1, 193, __pyx_L1_error))

#line 193 "View.MemoryView"
  __pyx_t_4 = __pyx_v_self->data;

#line 193 "View.MemoryView"
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __Pyx_TraceLine(194,0,__PYX_ERR(1, 194, __pyx_L1_error))

#line 194 "View.MemoryView"
  __pyx_t_5 = __pyx_v_self->len;

#line 194 "View.MemoryView"
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __Pyx_TraceLine(195,0,__PYX_ERR(1, 195, __pyx_L1_error))

#line 195 "View.MemoryView"
  __pyx_t_6 = __pyx_v_self->ndim;

#line 195 "View.MemoryView"
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __Pyx_TraceLine(196,0,__PYX_ERR(1, 196, __pyx_L1_error))

#line 196 "View.MemoryView"
  __pyx_t_7 = __pyx_v_self->_shape;

#line 196 "View.MemoryView"
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __Pyx_TraceLine(197,0,__PYX_ERR(1, 197, __pyx_L1_error))

#line 197 "View.MemoryView"
  __pyx_t_7 = __pyx_v_self->_strides;

#line 197 "View.MemoryView"
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __Pyx_TraceLine(198,0,__PYX_ERR(1, 198, __pyx_L1_error))

#line 198 "View.MemoryView"
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __Pyx_TraceLine(199,0,__PYX_ERR(1, 199, __pyx_L1_error))

#line 199 "View.MemoryView"
  __pyx_t_5 = __pyx_v_self->itemsize;

#line 199 "View.MemoryView"
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __Pyx_TraceLine(200,0,__PYX_ERR(1, 200, __pyx_L1_error))

#line 200 "View.MemoryView"
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __Pyx_TraceLine(202,0,__PYX_ERR(1, 202, __pyx_L1_error))

#line 202 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);

#line 202 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __Pyx_TraceLine(203,0,__PYX_ERR(1, 203, __pyx_L1_error))

#line 203 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->format;

#line 203 "View.MemoryView"
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */

#line 202 "View.MemoryView"
    goto __pyx_L5;

#line 202 "View.MemoryView"
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  __Pyx_TraceLine(205,0,__PYX_ERR(1, 205, __pyx_L1_error))

#line 205 "View.MemoryView"
  /*else*/ {

#line 205 "View.MemoryView"
    __pyx_v_info->format = NULL;

#line 205 "View.MemoryView"
  }

#line 205 "View.MemoryView"
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_TraceLine(207,0,__PYX_ERR(1, 207, __pyx_L1_error))

#line 207 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 207 "View.MemoryView"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 207 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 207 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 207 "View.MemoryView"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

#line 185 "View.MemoryView"


#line 185 "View.MemoryView"
  /* function exit code */

#line 185 "View.MemoryView"
  __pyx_r = 0;

#line 185 "View.MemoryView"
  goto __pyx_L0;

#line 185 "View.MemoryView"
  __pyx_L1_error:;

#line 185 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 185 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 185 "View.MemoryView"
  __pyx_r = -1;

#line 185 "View.MemoryView"
  if (__pyx_v_info->obj != NULL) {

#line 185 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 185 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 185 "View.MemoryView"
  }

#line 185 "View.MemoryView"
  goto __pyx_L2;

#line 185 "View.MemoryView"
  __pyx_L0:;

#line 185 "View.MemoryView"
  if (__pyx_v_info->obj == Py_None) {

#line 185 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 185 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 185 "View.MemoryView"
  }

#line 185 "View.MemoryView"
  __pyx_L2:;

#line 185 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 185 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 185 "View.MemoryView"
  return __pyx_r;

#line 185 "View.MemoryView"
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

#line 211 "View.MemoryView"


#line 211 "View.MemoryView"
/* Python wrapper */

#line 211 "View.MemoryView"
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 211 "View.MemoryView"
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {

#line 211 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 211 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 211 "View.MemoryView"
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

#line 211 "View.MemoryView"


#line 211 "View.MemoryView"
  /* function exit code */

#line 211 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 211 "View.MemoryView"
}

#line 211 "View.MemoryView"


#line 211 "View.MemoryView"
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {

#line 211 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 211 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 211 "View.MemoryView"
  int __pyx_t_1;

#line 211 "View.MemoryView"
  int __pyx_lineno = 0;

#line 211 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 211 "View.MemoryView"
  int __pyx_clineno = 0;

#line 211 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 211 "View.MemoryView"
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 211, 0, __PYX_ERR(1, 211, __pyx_L1_error));

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __Pyx_TraceLine(212,0,__PYX_ERR(1, 212, __pyx_L1_error))

#line 212 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);

#line 212 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __Pyx_TraceLine(213,0,__PYX_ERR(1, 213, __pyx_L1_error))

#line 213 "View.MemoryView"
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */

#line 212 "View.MemoryView"
    goto __pyx_L3;

#line 212 "View.MemoryView"
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __Pyx_TraceLine(214,0,__PYX_ERR(1, 214, __pyx_L1_error))

#line 214 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->free_data != 0);

#line 214 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __Pyx_TraceLine(215,0,__PYX_ERR(1, 215, __pyx_L1_error))

#line 215 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);

#line 215 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __Pyx_TraceLine(216,0,__PYX_ERR(1, 216, __pyx_L1_error))

#line 216 "View.MemoryView"
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */

#line 215 "View.MemoryView"
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    __Pyx_TraceLine(218,0,__PYX_ERR(1, 218, __pyx_L1_error))

#line 218 "View.MemoryView"
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */

#line 214 "View.MemoryView"
  }

#line 214 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(219,0,__PYX_ERR(1, 219, __pyx_L1_error))

#line 219 "View.MemoryView"
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

#line 211 "View.MemoryView"


#line 211 "View.MemoryView"
  /* function exit code */

#line 211 "View.MemoryView"
  goto __pyx_L0;

#line 211 "View.MemoryView"
  __pyx_L1_error:;

#line 211 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.array.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 211 "View.MemoryView"
  __pyx_L0:;

#line 211 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 211 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 211 "View.MemoryView"
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

#line 222 "View.MemoryView"


#line 222 "View.MemoryView"
/* Python wrapper */

#line 222 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 222 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {

#line 222 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 222 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 222 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 222 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

#line 222 "View.MemoryView"


#line 222 "View.MemoryView"
  /* function exit code */

#line 222 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 222 "View.MemoryView"
  return __pyx_r;

#line 222 "View.MemoryView"
}

#line 222 "View.MemoryView"


#line 222 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {

#line 222 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 222 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 222 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 222 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 222 "View.MemoryView"
  int __pyx_lineno = 0;

#line 222 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 222 "View.MemoryView"
  int __pyx_clineno = 0;

#line 222 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 222 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 222, 0, __PYX_ERR(1, 222, __pyx_L1_error));

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_TraceLine(223,0,__PYX_ERR(1, 223, __pyx_L1_error))

#line 223 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 223 "View.MemoryView"
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)

#line 223 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 223 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 223 "View.MemoryView"
  __pyx_t_1 = 0;

#line 223 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

#line 222 "View.MemoryView"


#line 222 "View.MemoryView"
  /* function exit code */

#line 222 "View.MemoryView"
  __pyx_L1_error:;

#line 222 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 222 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 222 "View.MemoryView"
  __pyx_r = NULL;

#line 222 "View.MemoryView"
  __pyx_L0:;

#line 222 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 222 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 222 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 222 "View.MemoryView"
  return __pyx_r;

#line 222 "View.MemoryView"
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

#line 226 "View.MemoryView"


#line 226 "View.MemoryView"
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags
#line 226 "View.MemoryView"
;

#line 226 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 226 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 226 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 226 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 226 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 226 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 226 "View.MemoryView"
  int __pyx_lineno = 0;

#line 226 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 226 "View.MemoryView"
  int __pyx_clineno = 0;

#line 226 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_memview", 0);

#line 226 "View.MemoryView"
  __Pyx_TraceCall("get_memview", __pyx_f[1], 226, 0, __PYX_ERR(1, 226, __pyx_L1_error));

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __Pyx_TraceLine(227,0,__PYX_ERR(1, 227, __pyx_L1_error))

#line 227 "View.MemoryView"
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(228,0,__PYX_ERR(1, 228, __pyx_L1_error))

#line 228 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 228 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)

#line 228 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 228 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)

#line 228 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 228 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)

#line 228 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 228 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 228 "View.MemoryView"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 228 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));

#line 228 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 228 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 228 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 228 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 228 "View.MemoryView"
  __pyx_t_1 = 0;

#line 228 "View.MemoryView"
  __pyx_t_2 = 0;

#line 228 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)

#line 228 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 228 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 228 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 228 "View.MemoryView"
  __pyx_t_2 = 0;

#line 228 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

#line 226 "View.MemoryView"


#line 226 "View.MemoryView"
  /* function exit code */

#line 226 "View.MemoryView"
  __pyx_L1_error:;

#line 226 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 226 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 226 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 226 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 226 "View.MemoryView"
  __pyx_r = 0;

#line 226 "View.MemoryView"
  __pyx_L0:;

#line 226 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 226 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 226 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 226 "View.MemoryView"
  return __pyx_r;

#line 226 "View.MemoryView"
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
/* Python wrapper */

#line 230 "View.MemoryView"
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/

#line 230 "View.MemoryView"
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {

#line 230 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 230 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 230 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = 
#line 230 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
  /* function exit code */

#line 230 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 230 "View.MemoryView"
  return __pyx_r;

#line 230 "View.MemoryView"
}

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {

#line 230 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 230 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 230 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 230 "View.MemoryView"
  int __pyx_lineno = 0;

#line 230 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 230 "View.MemoryView"
  int __pyx_clineno = 0;

#line 230 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__", 0);

#line 230 "View.MemoryView"
  __Pyx_TraceCall("__len__", __pyx_f[1], 230, 0, __PYX_ERR(1, 230, __pyx_L1_error));

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __Pyx_TraceLine(231,0,__PYX_ERR(1, 231, __pyx_L1_error))

#line 231 "View.MemoryView"
  __pyx_r = (__pyx_v_self->_shape[0]);

#line 231 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

#line 230 "View.MemoryView"


#line 230 "View.MemoryView"
  /* function exit code */

#line 230 "View.MemoryView"
  __pyx_L1_error:;

#line 230 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 230 "View.MemoryView"
  __pyx_r = -1;

#line 230 "View.MemoryView"
  __pyx_L0:;

#line 230 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 230 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 230 "View.MemoryView"
  return __pyx_r;

#line 230 "View.MemoryView"
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
/* Python wrapper */

#line 233 "View.MemoryView"
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/

#line 233 "View.MemoryView"
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {

#line 233 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 233 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 233 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = 
#line 233 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
  /* function exit code */

#line 233 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 233 "View.MemoryView"
  return __pyx_r;

#line 233 "View.MemoryView"
}

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {

#line 233 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 233 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 233 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 233 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 233 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 233 "View.MemoryView"
  int __pyx_lineno = 0;

#line 233 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 233 "View.MemoryView"
  int __pyx_clineno = 0;

#line 233 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getattr__", 0);

#line 233 "View.MemoryView"
  __Pyx_TraceCall("__getattr__", __pyx_f[1], 233, 0, __PYX_ERR(1, 233, __pyx_L1_error));

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_TraceLine(234,0,__PYX_ERR(1, 234, __pyx_L1_error))

#line 234 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 234 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 234 "View.MemoryView"
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)

#line 234 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 234 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 234 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 234 "View.MemoryView"
  __pyx_t_2 = 0;

#line 234 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

#line 233 "View.MemoryView"


#line 233 "View.MemoryView"
  /* function exit code */

#line 233 "View.MemoryView"
  __pyx_L1_error:;

#line 233 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 233 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 233 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 233 "View.MemoryView"
  __pyx_r = NULL;

#line 233 "View.MemoryView"
  __pyx_L0:;

#line 233 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 233 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 233 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 233 "View.MemoryView"
  return __pyx_r;

#line 233 "View.MemoryView"
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
/* Python wrapper */

#line 236 "View.MemoryView"
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/

#line 236 "View.MemoryView"
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {

#line 236 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 236 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 236 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = 
#line 236 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
  /* function exit code */

#line 236 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 236 "View.MemoryView"
  return __pyx_r;

#line 236 "View.MemoryView"
}

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {

#line 236 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 236 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 236 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 236 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 236 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 236 "View.MemoryView"
  int __pyx_lineno = 0;

#line 236 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 236 "View.MemoryView"
  int __pyx_clineno = 0;

#line 236 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__", 0);

#line 236 "View.MemoryView"
  __Pyx_TraceCall("__getitem__", __pyx_f[1], 236, 0, __PYX_ERR(1, 236, __pyx_L1_error));

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_TraceLine(237,0,__PYX_ERR(1, 237, __pyx_L1_error))

#line 237 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 237 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)

#line 237 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 237 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)

#line 237 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 237 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 237 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 237 "View.MemoryView"
  __pyx_t_2 = 0;

#line 237 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

#line 236 "View.MemoryView"


#line 236 "View.MemoryView"
  /* function exit code */

#line 236 "View.MemoryView"
  __pyx_L1_error:;

#line 236 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 236 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 236 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 236 "View.MemoryView"
  __pyx_r = NULL;

#line 236 "View.MemoryView"
  __pyx_L0:;

#line 236 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 236 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 236 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 236 "View.MemoryView"
  return __pyx_r;

#line 236 "View.MemoryView"
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

#line 239 "View.MemoryView"


#line 239 "View.MemoryView"
/* Python wrapper */

#line 239 "View.MemoryView"
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/

#line 239 "View.MemoryView"
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {

#line 239 "View.MemoryView"
  int __pyx_r;

#line 239 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 239 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = 
#line 239 "View.MemoryView"
__pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

#line 239 "View.MemoryView"


#line 239 "View.MemoryView"
  /* function exit code */

#line 239 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 239 "View.MemoryView"
  return __pyx_r;

#line 239 "View.MemoryView"
}

#line 239 "View.MemoryView"


#line 239 "View.MemoryView"
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {

#line 239 "View.MemoryView"
  int __pyx_r;

#line 239 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 239 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 239 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 239 "View.MemoryView"
  int __pyx_lineno = 0;

#line 239 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 239 "View.MemoryView"
  int __pyx_clineno = 0;

#line 239 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__", 0);

#line 239 "View.MemoryView"
  __Pyx_TraceCall("__setitem__", __pyx_f[1], 239, 0, __PYX_ERR(1, 239, __pyx_L1_error));

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(240,0,__PYX_ERR(1, 240, __pyx_L1_error))

#line 240 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)

#line 240 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 240 "View.MemoryView"
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)

#line 240 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

#line 239 "View.MemoryView"


#line 239 "View.MemoryView"
  /* function exit code */

#line 239 "View.MemoryView"
  __pyx_r = 0;

#line 239 "View.MemoryView"
  goto __pyx_L0;

#line 239 "View.MemoryView"
  __pyx_L1_error:;

#line 239 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 239 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 239 "View.MemoryView"
  __pyx_r = -1;

#line 239 "View.MemoryView"
  __pyx_L0:;

#line 239 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 239 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 239 "View.MemoryView"
  return __pyx_r;

#line 239 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

#line 3 "(tree fragment)"
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

#line 244 "View.MemoryView"


#line 244 "View.MemoryView"
static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0
#line 244 "View.MemoryView"
;

#line 244 "View.MemoryView"
  struct __pyx_array_obj *__pyx_r = NULL;

#line 244 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 244 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 244 "View.MemoryView"
  int __pyx_t_1;

#line 244 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 244 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 244 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 244 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 244 "View.MemoryView"
  int __pyx_lineno = 0;

#line 244 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 244 "View.MemoryView"
  int __pyx_clineno = 0;

#line 244 "View.MemoryView"
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

#line 244 "View.MemoryView"
  __Pyx_TraceCall("array_cwrapper", __pyx_f[1], 244, 0, __PYX_ERR(1, 244, __pyx_L1_error));

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __Pyx_TraceLine(248,0,__PYX_ERR(1, 248, __pyx_L1_error))

#line 248 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);

#line 248 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __Pyx_TraceLine(249,0,__PYX_ERR(1, 249, __pyx_L1_error))

#line 249 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)

#line 249 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 249 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)

#line 249 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 249 "View.MemoryView"
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)

#line 249 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 249 "View.MemoryView"
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)

#line 249 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 249 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_shape);

#line 249 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_shape);

#line 249 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);

#line 249 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_2);

#line 249 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);

#line 249 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 249 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);

#line 249 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_4);

#line 249 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);

#line 249 "View.MemoryView"
    __pyx_t_2 = 0;

#line 249 "View.MemoryView"
    __pyx_t_3 = 0;

#line 249 "View.MemoryView"
    __pyx_t_4 = 0;

#line 249 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)

#line 249 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 249 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 249 "View.MemoryView"
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);

#line 249 "View.MemoryView"
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */

#line 248 "View.MemoryView"
    goto __pyx_L3;

#line 248 "View.MemoryView"
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  __Pyx_TraceLine(251,0,__PYX_ERR(1, 251, __pyx_L1_error))

#line 251 "View.MemoryView"
  /*else*/ {

#line 251 "View.MemoryView"
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)

#line 251 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 251 "View.MemoryView"
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)

#line 251 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 251 "View.MemoryView"
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)

#line 251 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 251 "View.MemoryView"
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)

#line 251 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 251 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_shape);

#line 251 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_shape);

#line 251 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);

#line 251 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_4);

#line 251 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);

#line 251 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_5);

#line 251 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);

#line 251 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_3);

#line 251 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);

#line 251 "View.MemoryView"
    __pyx_t_4 = 0;

#line 251 "View.MemoryView"
    __pyx_t_5 = 0;

#line 251 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __Pyx_TraceLine(252,0,__PYX_ERR(1, 252, __pyx_L1_error))

#line 252 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)

#line 252 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 252 "View.MemoryView"
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __Pyx_TraceLine(251,0,__PYX_ERR(1, 251, __pyx_L1_error))

#line 251 "View.MemoryView"
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)

#line 251 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 251 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 251 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 251 "View.MemoryView"
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);

#line 251 "View.MemoryView"
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __Pyx_TraceLine(253,0,__PYX_ERR(1, 253, __pyx_L1_error))

#line 253 "View.MemoryView"
    __pyx_v_result->data = __pyx_v_buf;

#line 253 "View.MemoryView"
  }

#line 253 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(255,0,__PYX_ERR(1, 255, __pyx_L1_error))

#line 255 "View.MemoryView"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 255 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_result));

#line 255 "View.MemoryView"
  __pyx_r = __pyx_v_result;

#line 255 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

#line 244 "View.MemoryView"


#line 244 "View.MemoryView"
  /* function exit code */

#line 244 "View.MemoryView"
  __pyx_L1_error:;

#line 244 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 244 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 244 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 244 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 244 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 244 "View.MemoryView"
  __pyx_r = 0;

#line 244 "View.MemoryView"
  __pyx_L0:;

#line 244 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 244 "View.MemoryView"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 244 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 244 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 244 "View.MemoryView"
  return __pyx_r;

#line 244 "View.MemoryView"
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

#line 281 "View.MemoryView"


#line 281 "View.MemoryView"
/* Python wrapper */

#line 281 "View.MemoryView"
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 281 "View.MemoryView"
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0
#line 281 "View.MemoryView"
;

#line 281 "View.MemoryView"
  int __pyx_lineno = 0;

#line 281 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 281 "View.MemoryView"
  int __pyx_clineno = 0;

#line 281 "View.MemoryView"
  int __pyx_r;

#line 281 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 281 "View.MemoryView"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 281 "View.MemoryView"
  {

#line 281 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};

#line 281 "View.MemoryView"
    PyObject* values[1] = {0};

#line 281 "View.MemoryView"
    if (unlikely(__pyx_kwds)) {

#line 281 "View.MemoryView"
      Py_ssize_t kw_args;

#line 281 "View.MemoryView"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 281 "View.MemoryView"
      switch (pos_args) {
        case  1: 
#line 281 "View.MemoryView"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 281 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 281 "View.MemoryView"
        case  0: break;
        default: 
#line 281 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 281 "View.MemoryView"
      }

#line 281 "View.MemoryView"
      kw_args = PyDict_Size(__pyx_kwds);

#line 281 "View.MemoryView"
      switch (pos_args) {

#line 281 "View.MemoryView"
        case  0:

#line 281 "View.MemoryView"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else 
#line 281 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 281 "View.MemoryView"
      }

#line 281 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 281 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)

#line 281 "View.MemoryView"
      }

#line 281 "View.MemoryView"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 281 "View.MemoryView"
      goto __pyx_L5_argtuple_error;

#line 281 "View.MemoryView"
    } else {

#line 281 "View.MemoryView"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 281 "View.MemoryView"
    }

#line 281 "View.MemoryView"
    __pyx_v_name = values[0];

#line 281 "View.MemoryView"
  }

#line 281 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 281 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 281 "View.MemoryView"
__PYX_ERR(1, 281, __pyx_L3_error)

#line 281 "View.MemoryView"
  __pyx_L3_error:;

#line 281 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 281 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 281 "View.MemoryView"
  return -1;

#line 281 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 281 "View.MemoryView"
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

#line 281 "View.MemoryView"


#line 281 "View.MemoryView"
  /* function exit code */

#line 281 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 281 "View.MemoryView"
  return __pyx_r;

#line 281 "View.MemoryView"
}

#line 281 "View.MemoryView"


#line 281 "View.MemoryView"
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {

#line 281 "View.MemoryView"
  int __pyx_r;

#line 281 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 281 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 281 "View.MemoryView"
  int __pyx_lineno = 0;

#line 281 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 281 "View.MemoryView"
  int __pyx_clineno = 0;

#line 281 "View.MemoryView"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 281 "View.MemoryView"
  __Pyx_TraceCall("__init__", __pyx_f[1], 281, 0, __PYX_ERR(1, 281, __pyx_L1_error));

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_TraceLine(282,0,__PYX_ERR(1, 282, __pyx_L1_error))

#line 282 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_name);

#line 282 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_name);

#line 282 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->name);

#line 282 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->name);

#line 282 "View.MemoryView"
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

#line 281 "View.MemoryView"


#line 281 "View.MemoryView"
  /* function exit code */

#line 281 "View.MemoryView"
  __pyx_r = 0;

#line 281 "View.MemoryView"
  goto __pyx_L0;

#line 281 "View.MemoryView"
  __pyx_L1_error:;

#line 281 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 281 "View.MemoryView"
  __pyx_r = -1;

#line 281 "View.MemoryView"
  __pyx_L0:;

#line 281 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 281 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 281 "View.MemoryView"
  return __pyx_r;

#line 281 "View.MemoryView"
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

#line 283 "View.MemoryView"


#line 283 "View.MemoryView"
/* Python wrapper */

#line 283 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/

#line 283 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {

#line 283 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 283 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 283 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = 
#line 283 "View.MemoryView"
__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

#line 283 "View.MemoryView"


#line 283 "View.MemoryView"
  /* function exit code */

#line 283 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 283 "View.MemoryView"
  return __pyx_r;

#line 283 "View.MemoryView"
}

#line 283 "View.MemoryView"


#line 283 "View.MemoryView"
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {

#line 283 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 283 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 283 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 283 "View.MemoryView"
  int __pyx_lineno = 0;

#line 283 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 283 "View.MemoryView"
  int __pyx_clineno = 0;

#line 283 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__", 0);

#line 283 "View.MemoryView"
  __Pyx_TraceCall("__repr__", __pyx_f[1], 283, 0, __PYX_ERR(1, 283, __pyx_L1_error));

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_TraceLine(284,0,__PYX_ERR(1, 284, __pyx_L1_error))

#line 284 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 284 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->name);

#line 284 "View.MemoryView"
  __pyx_r = __pyx_v_self->name;

#line 284 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

#line 283 "View.MemoryView"


#line 283 "View.MemoryView"
  /* function exit code */

#line 283 "View.MemoryView"
  __pyx_L1_error:;

#line 283 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.Enum.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 283 "View.MemoryView"
  __pyx_r = NULL;

#line 283 "View.MemoryView"
  __pyx_L0:;

#line 283 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 283 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 283 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 283 "View.MemoryView"
  return __pyx_r;

#line 283 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v__dict = 0
#line 1 "(tree fragment)"
;
  int __pyx_v_use_setstate
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_t_2;

#line 1 "(tree fragment)"
  int __pyx_t_3;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_4 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_5 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_TraceLine(5,0,__PYX_ERR(1, 5, __pyx_L1_error))

#line 5 "(tree fragment)"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 5 "(tree fragment)"
  __Pyx_INCREF(__pyx_v_self->name);

#line 5 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_v_self->name);

#line 5 "(tree fragment)"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);

#line 5 "(tree fragment)"
  __pyx_v_state = ((PyObject*)__pyx_t_1);

#line 5 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __Pyx_TraceLine(6,0,__PYX_ERR(1, 6, __pyx_L1_error))

#line 6 "(tree fragment)"
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 6 "(tree fragment)"
  __pyx_v__dict = __pyx_t_1;

#line 6 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))

#line 7 "(tree fragment)"
  __pyx_t_2 = (__pyx_v__dict != Py_None);

#line 7 "(tree fragment)"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 7 "(tree fragment)"
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __Pyx_TraceLine(8,0,__PYX_ERR(1, 8, __pyx_L1_error))

#line 8 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 8 "(tree fragment)"
    __Pyx_INCREF(__pyx_v__dict);

#line 8 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v__dict);

#line 8 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);

#line 8 "(tree fragment)"
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)

#line 8 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 8 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 8 "(tree fragment)"
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));

#line 8 "(tree fragment)"
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(1, 9, __pyx_L1_error))

#line 9 "(tree fragment)"
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */

#line 7 "(tree fragment)"
    goto __pyx_L3;

#line 7 "(tree fragment)"
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(1, 11, __pyx_L1_error))

#line 11 "(tree fragment)"
  /*else*/ {

#line 11 "(tree fragment)"
    __pyx_t_3 = (__pyx_v_self->name != Py_None);

#line 11 "(tree fragment)"
    __pyx_v_use_setstate = __pyx_t_3;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(1, 12, __pyx_L1_error))

#line 12 "(tree fragment)"
  __pyx_t_3 = (__pyx_v_use_setstate != 0);

#line 12 "(tree fragment)"
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))

#line 13 "(tree fragment)"
    __Pyx_XDECREF(__pyx_r);

#line 13 "(tree fragment)"
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 13 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 13 "(tree fragment)"
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 13 "(tree fragment)"
    __Pyx_INCREF(__pyx_int_184977713);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_int_184977713);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);

#line 13 "(tree fragment)"
    __Pyx_INCREF(Py_None);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(Py_None);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);

#line 13 "(tree fragment)"
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_5);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_4);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_1);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);

#line 13 "(tree fragment)"
    __Pyx_INCREF(__pyx_v_state);

#line 13 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v_state);

#line 13 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);

#line 13 "(tree fragment)"
    __pyx_t_4 = 0;

#line 13 "(tree fragment)"
    __pyx_t_1 = 0;

#line 13 "(tree fragment)"
    __pyx_r = __pyx_t_5;

#line 13 "(tree fragment)"
    __pyx_t_5 = 0;

#line 13 "(tree fragment)"
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */

#line 12 "(tree fragment)"
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  __Pyx_TraceLine(15,0,__PYX_ERR(1, 15, __pyx_L1_error))

#line 15 "(tree fragment)"
  /*else*/ {

#line 15 "(tree fragment)"
    __Pyx_XDECREF(__pyx_r);

#line 15 "(tree fragment)"
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_5);

#line 15 "(tree fragment)"
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 15 "(tree fragment)"
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));

#line 15 "(tree fragment)"
    __Pyx_INCREF(__pyx_int_184977713);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_int_184977713);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);

#line 15 "(tree fragment)"
    __Pyx_INCREF(__pyx_v_state);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_v_state);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);

#line 15 "(tree fragment)"
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)

#line 15 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_5);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 15 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_t_1);

#line 15 "(tree fragment)"
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);

#line 15 "(tree fragment)"
    __pyx_t_5 = 0;

#line 15 "(tree fragment)"
    __pyx_t_1 = 0;

#line 15 "(tree fragment)"
    __pyx_r = __pyx_t_4;

#line 15 "(tree fragment)"
    __pyx_t_4 = 0;

#line 15 "(tree fragment)"
    goto __pyx_L0;

#line 15 "(tree fragment)"
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_5);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __pyx_L0:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v_state);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v__dict);

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
/* Python wrapper */

#line 16 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 16 "(tree fragment)"
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 16 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 16 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 16 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 16 "(tree fragment)"
__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
  /* function exit code */

#line 16 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 16 "(tree fragment)"
  return __pyx_r;

#line 16 "(tree fragment)"
}

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 16 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 16 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 16 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 16 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 16 "(tree fragment)"
  int __pyx_lineno = 0;

#line 16 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 16 "(tree fragment)"
  int __pyx_clineno = 0;

#line 16 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

#line 16 "(tree fragment)"
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 16, 0, __PYX_ERR(1, 16, __pyx_L1_error));

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(1, 17, __pyx_L1_error))

#line 17 "(tree fragment)"
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "(tree fragment)"
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)

#line 17 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

#line 16 "(tree fragment)"


#line 16 "(tree fragment)"
  /* function exit code */

#line 16 "(tree fragment)"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 16 "(tree fragment)"
  goto __pyx_L0;

#line 16 "(tree fragment)"
  __pyx_L1_error:;

#line 16 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 16 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 16 "(tree fragment)"
  __pyx_r = NULL;

#line 16 "(tree fragment)"
  __pyx_L0:;

#line 16 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 16 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 16 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 16 "(tree fragment)"
  return __pyx_r;

#line 16 "(tree fragment)"
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

#line 298 "View.MemoryView"


#line 298 "View.MemoryView"
static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p
#line 298 "View.MemoryView"
;
  size_t __pyx_v_offset
#line 298 "View.MemoryView"
;

#line 298 "View.MemoryView"
  void *__pyx_r;

#line 298 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 298 "View.MemoryView"
  int __pyx_t_1;

#line 298 "View.MemoryView"
  int __pyx_lineno = 0;

#line 298 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 298 "View.MemoryView"
  int __pyx_clineno = 0;

#line 298 "View.MemoryView"
  __Pyx_TraceCall("align_pointer", __pyx_f[1], 298, 1, __PYX_ERR(1, 298, __pyx_L1_error));

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __Pyx_TraceLine(300,1,__PYX_ERR(1, 300, __pyx_L1_error))

#line 300 "View.MemoryView"
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */

#line 304 "View.MemoryView"
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __Pyx_TraceLine(306,1,__PYX_ERR(1, 306, __pyx_L1_error))

#line 306 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);

#line 306 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __Pyx_TraceLine(307,1,__PYX_ERR(1, 307, __pyx_L1_error))

#line 307 "View.MemoryView"
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */

#line 306 "View.MemoryView"
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(309,1,__PYX_ERR(1, 309, __pyx_L1_error))

#line 309 "View.MemoryView"
  __pyx_r = ((void *)__pyx_v_aligned_p);

#line 309 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

#line 298 "View.MemoryView"


#line 298 "View.MemoryView"
  /* function exit code */

#line 298 "View.MemoryView"
  __pyx_L1_error:;

#line 298 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.align_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 298 "View.MemoryView"
  __pyx_r = 0;

#line 298 "View.MemoryView"
  __pyx_L0:;

#line 298 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 298 "View.MemoryView"
  return __pyx_r;

#line 298 "View.MemoryView"
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

#line 345 "View.MemoryView"


#line 345 "View.MemoryView"
/* Python wrapper */

#line 345 "View.MemoryView"
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 345 "View.MemoryView"
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0
#line 345 "View.MemoryView"
;
  int __pyx_v_flags
#line 345 "View.MemoryView"
;
  int __pyx_v_dtype_is_object
#line 345 "View.MemoryView"
;

#line 345 "View.MemoryView"
  int __pyx_lineno = 0;

#line 345 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 345 "View.MemoryView"
  int __pyx_clineno = 0;

#line 345 "View.MemoryView"
  int __pyx_r;

#line 345 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 345 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 345 "View.MemoryView"
  {

#line 345 "View.MemoryView"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};

#line 345 "View.MemoryView"
    PyObject* values[3] = {0,0,0};

#line 345 "View.MemoryView"
    if (unlikely(__pyx_kwds)) {

#line 345 "View.MemoryView"
      Py_ssize_t kw_args;

#line 345 "View.MemoryView"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 345 "View.MemoryView"
      switch (pos_args) {
        case  3: 
#line 345 "View.MemoryView"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 345 "View.MemoryView"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 345 "View.MemoryView"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 345 "View.MemoryView"
        case  0: break;
        default: 
#line 345 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 345 "View.MemoryView"
      }

#line 345 "View.MemoryView"
      kw_args = PyDict_Size(__pyx_kwds);

#line 345 "View.MemoryView"
      switch (pos_args) {

#line 345 "View.MemoryView"
        case  0:

#line 345 "View.MemoryView"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else 
#line 345 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 345 "View.MemoryView"
        case  1:

#line 345 "View.MemoryView"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;

#line 345 "View.MemoryView"
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); 
#line 345 "View.MemoryView"
__PYX_ERR(1, 345, __pyx_L3_error)

#line 345 "View.MemoryView"
        }

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;

#line 345 "View.MemoryView"
        case  2:

#line 345 "View.MemoryView"
        if (kw_args > 0) {

#line 345 "View.MemoryView"
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);

#line 345 "View.MemoryView"
          if (value) { values[2] = value; kw_args--; }

#line 345 "View.MemoryView"
        }

#line 345 "View.MemoryView"
      }

#line 345 "View.MemoryView"
      if (unlikely(kw_args > 0)) {

#line 345 "View.MemoryView"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)

#line 345 "View.MemoryView"
      }

#line 345 "View.MemoryView"
    } else {

#line 345 "View.MemoryView"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 345 "View.MemoryView"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 345 "View.MemoryView"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 345 "View.MemoryView"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 345 "View.MemoryView"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 345 "View.MemoryView"
        break;
        default: 
#line 345 "View.MemoryView"
goto __pyx_L5_argtuple_error;

#line 345 "View.MemoryView"
      }

#line 345 "View.MemoryView"
    }

#line 345 "View.MemoryView"
    __pyx_v_obj = values[0];

#line 345 "View.MemoryView"
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)

#line 345 "View.MemoryView"
    if (values[2]) {

#line 345 "View.MemoryView"
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)

#line 345 "View.MemoryView"
    } else {

#line 345 "View.MemoryView"
      __pyx_v_dtype_is_object = ((int)0);

#line 345 "View.MemoryView"
    }

#line 345 "View.MemoryView"
  }

#line 345 "View.MemoryView"
  goto __pyx_L4_argument_unpacking_done;

#line 345 "View.MemoryView"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 345 "View.MemoryView"
__PYX_ERR(1, 345, __pyx_L3_error)

#line 345 "View.MemoryView"
  __pyx_L3_error:;

#line 345 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 345 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 345 "View.MemoryView"
  return -1;

#line 345 "View.MemoryView"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 345 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

#line 345 "View.MemoryView"


#line 345 "View.MemoryView"
  /* function exit code */

#line 345 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 345 "View.MemoryView"
  return __pyx_r;

#line 345 "View.MemoryView"
}

#line 345 "View.MemoryView"


#line 345 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {

#line 345 "View.MemoryView"
  int __pyx_r;

#line 345 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 345 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 345 "View.MemoryView"
  int __pyx_t_1;

#line 345 "View.MemoryView"
  int __pyx_t_2;

#line 345 "View.MemoryView"
  int __pyx_t_3;

#line 345 "View.MemoryView"
  int __pyx_t_4;

#line 345 "View.MemoryView"
  int __pyx_lineno = 0;

#line 345 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 345 "View.MemoryView"
  int __pyx_clineno = 0;

#line 345 "View.MemoryView"
  __Pyx_RefNannySetupContext("__cinit__", 0);

#line 345 "View.MemoryView"
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 345, 0, __PYX_ERR(1, 345, __pyx_L1_error));

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_TraceLine(346,0,__PYX_ERR(1, 346, __pyx_L1_error))

#line 346 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

#line 346 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_obj);

#line 346 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_self->obj);

#line 346 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_self->obj);

#line 346 "View.MemoryView"
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __Pyx_TraceLine(347,0,__PYX_ERR(1, 347, __pyx_L1_error))

#line 347 "View.MemoryView"
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __Pyx_TraceLine(348,0,__PYX_ERR(1, 348, __pyx_L1_error))

#line 348 "View.MemoryView"
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));

#line 348 "View.MemoryView"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 348 "View.MemoryView"
  if (!__pyx_t_3) {

#line 348 "View.MemoryView"
  } else {

#line 348 "View.MemoryView"
    __pyx_t_1 = __pyx_t_3;

#line 348 "View.MemoryView"
    goto __pyx_L4_bool_binop_done;

#line 348 "View.MemoryView"
  }

#line 348 "View.MemoryView"
  __pyx_t_3 = (__pyx_v_obj != Py_None);

#line 348 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_3 != 0);

#line 348 "View.MemoryView"
  __pyx_t_1 = __pyx_t_2;

#line 348 "View.MemoryView"
  __pyx_L4_bool_binop_done:;

#line 348 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __Pyx_TraceLine(349,0,__PYX_ERR(1, 349, __pyx_L1_error))

#line 349 "View.MemoryView"
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __Pyx_TraceLine(350,0,__PYX_ERR(1, 350, __pyx_L1_error))

#line 350 "View.MemoryView"
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);

#line 350 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      __Pyx_TraceLine(351,0,__PYX_ERR(1, 351, __pyx_L1_error))

#line 351 "View.MemoryView"
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      __Pyx_TraceLine(352,0,__PYX_ERR(1, 352, __pyx_L1_error))

#line 352 "View.MemoryView"
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */

#line 350 "View.MemoryView"
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */

#line 348 "View.MemoryView"
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __Pyx_TraceLine(355,0,__PYX_ERR(1, 355, __pyx_L1_error))

#line 355 "View.MemoryView"
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);

#line 355 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __Pyx_TraceLine(356,0,__PYX_ERR(1, 356, __pyx_L1_error))

#line 356 "View.MemoryView"
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __Pyx_TraceLine(357,0,__PYX_ERR(1, 357, __pyx_L1_error))

#line 357 "View.MemoryView"
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */

#line 355 "View.MemoryView"
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __Pyx_TraceLine(358,0,__PYX_ERR(1, 358, __pyx_L1_error))

#line 358 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);

#line 358 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __Pyx_TraceLine(359,0,__PYX_ERR(1, 359, __pyx_L1_error))

#line 359 "View.MemoryView"
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __Pyx_TraceLine(360,0,__PYX_ERR(1, 360, __pyx_L1_error))

#line 360 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);

#line 360 "View.MemoryView"
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      __Pyx_TraceLine(361,0,__PYX_ERR(1, 361, __pyx_L1_error))

#line 361 "View.MemoryView"
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */

#line 360 "View.MemoryView"
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */

#line 358 "View.MemoryView"
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __Pyx_TraceLine(363,0,__PYX_ERR(1, 363, __pyx_L1_error))

#line 363 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);

#line 363 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __Pyx_TraceLine(364,0,__PYX_ERR(1, 364, __pyx_L1_error))

#line 364 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);

#line 364 "View.MemoryView"
    if (__pyx_t_2) {

#line 364 "View.MemoryView"
    } else {

#line 364 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 364 "View.MemoryView"
      goto __pyx_L11_bool_binop_done;

#line 364 "View.MemoryView"
    }

#line 364 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);

#line 364 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 364 "View.MemoryView"
    __pyx_L11_bool_binop_done:;

#line 364 "View.MemoryView"
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */

#line 363 "View.MemoryView"
    goto __pyx_L10;

#line 363 "View.MemoryView"
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  __Pyx_TraceLine(366,0,__PYX_ERR(1, 366, __pyx_L1_error))

#line 366 "View.MemoryView"
  /*else*/ {

#line 366 "View.MemoryView"
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;

#line 366 "View.MemoryView"
  }

#line 366 "View.MemoryView"
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __Pyx_TraceLine(368,0,__PYX_ERR(1, 368, __pyx_L1_error))

#line 368 "View.MemoryView"
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __Pyx_TraceLine(370,0,__PYX_ERR(1, 370, __pyx_L1_error))

#line 370 "View.MemoryView"
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

#line 345 "View.MemoryView"


#line 345 "View.MemoryView"
  /* function exit code */

#line 345 "View.MemoryView"
  __pyx_r = 0;

#line 345 "View.MemoryView"
  goto __pyx_L0;

#line 345 "View.MemoryView"
  __pyx_L1_error:;

#line 345 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 345 "View.MemoryView"
  __pyx_r = -1;

#line 345 "View.MemoryView"
  __pyx_L0:;

#line 345 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 345 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 345 "View.MemoryView"
  return __pyx_r;

#line 345 "View.MemoryView"
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

#line 372 "View.MemoryView"


#line 372 "View.MemoryView"
/* Python wrapper */

#line 372 "View.MemoryView"
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 372 "View.MemoryView"
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {

#line 372 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 372 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 372 "View.MemoryView"
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 372 "View.MemoryView"


#line 372 "View.MemoryView"
  /* function exit code */

#line 372 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 372 "View.MemoryView"
}

#line 372 "View.MemoryView"


#line 372 "View.MemoryView"
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i
#line 372 "View.MemoryView"
;

#line 372 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 372 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 372 "View.MemoryView"
  int __pyx_t_1;

#line 372 "View.MemoryView"
  int __pyx_t_2;

#line 372 "View.MemoryView"
  int __pyx_t_3;

#line 372 "View.MemoryView"
  int __pyx_t_4;

#line 372 "View.MemoryView"
  int __pyx_t_5;

#line 372 "View.MemoryView"
  PyThread_type_lock __pyx_t_6;

#line 372 "View.MemoryView"
  PyThread_type_lock __pyx_t_7;

#line 372 "View.MemoryView"
  int __pyx_lineno = 0;

#line 372 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 372 "View.MemoryView"
  int __pyx_clineno = 0;

#line 372 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 372 "View.MemoryView"
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 372, 0, __PYX_ERR(1, 372, __pyx_L1_error));

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __Pyx_TraceLine(373,0,__PYX_ERR(1, 373, __pyx_L1_error))

#line 373 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);

#line 373 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 373 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_TraceLine(374,0,__PYX_ERR(1, 374, __pyx_L1_error))

#line 374 "View.MemoryView"
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */

#line 373 "View.MemoryView"
    goto __pyx_L3;

#line 373 "View.MemoryView"
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __Pyx_TraceLine(375,0,__PYX_ERR(1, 375, __pyx_L1_error))

#line 375 "View.MemoryView"
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);

#line 375 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    __Pyx_TraceLine(377,0,__PYX_ERR(1, 377, __pyx_L1_error))

#line 377 "View.MemoryView"
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_TraceLine(378,0,__PYX_ERR(1, 378, __pyx_L1_error))

#line 378 "View.MemoryView"
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */

#line 375 "View.MemoryView"
  }

#line 375 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __Pyx_TraceLine(382,0,__PYX_ERR(1, 382, __pyx_L1_error))

#line 382 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);

#line 382 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __Pyx_TraceLine(383,0,__PYX_ERR(1, 383, __pyx_L1_error))

#line 383 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;

#line 383 "View.MemoryView"
    __pyx_t_4 = __pyx_t_3;

#line 383 "View.MemoryView"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 383 "View.MemoryView"
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __Pyx_TraceLine(384,0,__PYX_ERR(1, 384, __pyx_L1_error))

#line 384 "View.MemoryView"
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);

#line 384 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __Pyx_TraceLine(385,0,__PYX_ERR(1, 385, __pyx_L1_error))

#line 385 "View.MemoryView"
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __Pyx_TraceLine(386,0,__PYX_ERR(1, 386, __pyx_L1_error))

#line 386 "View.MemoryView"
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);

#line 386 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __Pyx_TraceLine(388,0,__PYX_ERR(1, 388, __pyx_L1_error))

#line 388 "View.MemoryView"
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

#line 388 "View.MemoryView"
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          __Pyx_TraceLine(387,0,__PYX_ERR(1, 387, __pyx_L1_error))

#line 387 "View.MemoryView"
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;

#line 387 "View.MemoryView"
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */

#line 386 "View.MemoryView"
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        __Pyx_TraceLine(389,0,__PYX_ERR(1, 389, __pyx_L1_error))

#line 389 "View.MemoryView"
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */

#line 384 "View.MemoryView"
      }

#line 384 "View.MemoryView"
    }

#line 384 "View.MemoryView"
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      __Pyx_TraceLine(391,0,__PYX_ERR(1, 391, __pyx_L1_error))

#line 391 "View.MemoryView"
      PyThread_free_lock(__pyx_v_self->lock);

#line 391 "View.MemoryView"
    }

#line 391 "View.MemoryView"
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */

#line 382 "View.MemoryView"
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

#line 372 "View.MemoryView"


#line 372 "View.MemoryView"
  /* function exit code */

#line 372 "View.MemoryView"
  goto __pyx_L0;

#line 372 "View.MemoryView"
  __pyx_L1_error:;

#line 372 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.memoryview.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 372 "View.MemoryView"
  __pyx_L0:;

#line 372 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 372 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 372 "View.MemoryView"
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

#line 393 "View.MemoryView"


#line 393 "View.MemoryView"
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim
#line 393 "View.MemoryView"
;
  char *__pyx_v_itemp
#line 393 "View.MemoryView"
;
  PyObject *__pyx_v_idx = NULL
#line 393 "View.MemoryView"
;

#line 393 "View.MemoryView"
  char *__pyx_r;

#line 393 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 393 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 393 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 393 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 393 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 393 "View.MemoryView"
  PyObject *(*__pyx_t_4)(PyObject *);

#line 393 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 393 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

#line 393 "View.MemoryView"
  char *__pyx_t_7;

#line 393 "View.MemoryView"
  int __pyx_lineno = 0;

#line 393 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 393 "View.MemoryView"
  int __pyx_clineno = 0;

#line 393 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

#line 393 "View.MemoryView"
  __Pyx_TraceCall("get_item_pointer", __pyx_f[1], 393, 0, __PYX_ERR(1, 393, __pyx_L1_error));

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __Pyx_TraceLine(395,0,__PYX_ERR(1, 395, __pyx_L1_error))

#line 395 "View.MemoryView"
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __Pyx_TraceLine(397,0,__PYX_ERR(1, 397, __pyx_L1_error))

#line 397 "View.MemoryView"
  __pyx_t_1 = 0;

#line 397 "View.MemoryView"
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {

#line 397 "View.MemoryView"
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 397 "View.MemoryView"
    __pyx_t_4 = NULL;

#line 397 "View.MemoryView"
  } else {
    __pyx_t_3 = -1; 
#line 397 "View.MemoryView"
__pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 397 "View.MemoryView"
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
  }

#line 397 "View.MemoryView"
  for (;;) {

#line 397 "View.MemoryView"
    if (likely(!__pyx_t_4)) {

#line 397 "View.MemoryView"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 397 "View.MemoryView"
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 397 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 397 "View.MemoryView"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
        #else

#line 397 "View.MemoryView"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_5);

#line 397 "View.MemoryView"
        #endif

#line 397 "View.MemoryView"
      } else {

#line 397 "View.MemoryView"
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 397 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 397 "View.MemoryView"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
        #else

#line 397 "View.MemoryView"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_5);

#line 397 "View.MemoryView"
        #endif

#line 397 "View.MemoryView"
      }
    } else 
#line 397 "View.MemoryView"
{

#line 397 "View.MemoryView"
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);

#line 397 "View.MemoryView"
      if (unlikely(!__pyx_t_5)) {

#line 397 "View.MemoryView"
        PyObject* exc_type = PyErr_Occurred();

#line 397 "View.MemoryView"
        if (exc_type) {

#line 397 "View.MemoryView"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 397 "View.MemoryView"
          else __PYX_ERR(1, 397, __pyx_L1_error)

#line 397 "View.MemoryView"
        }

#line 397 "View.MemoryView"
        break;

#line 397 "View.MemoryView"
      }

#line 397 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 397 "View.MemoryView"
    }

#line 397 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);

#line 397 "View.MemoryView"
    __pyx_t_5 = 0;

#line 397 "View.MemoryView"
    __pyx_v_dim = __pyx_t_1;

#line 397 "View.MemoryView"
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __Pyx_TraceLine(398,0,__PYX_ERR(1, 398, __pyx_L1_error))

#line 398 "View.MemoryView"
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 398, __pyx_L1_error)

#line 398 "View.MemoryView"
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 398, __pyx_L1_error)

#line 398 "View.MemoryView"
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
    __Pyx_TraceLine(397,0,__PYX_ERR(1, 397, __pyx_L1_error))

#line 397 "View.MemoryView"
  }

#line 397 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(400,0,__PYX_ERR(1, 400, __pyx_L1_error))

#line 400 "View.MemoryView"
  __pyx_r = __pyx_v_itemp;

#line 400 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

#line 393 "View.MemoryView"


#line 393 "View.MemoryView"
  /* function exit code */

#line 393 "View.MemoryView"
  __pyx_L1_error:;

#line 393 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 393 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 393 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 393 "View.MemoryView"
  __pyx_r = NULL;

#line 393 "View.MemoryView"
  __pyx_L0:;

#line 393 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_idx);

#line 393 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 393 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 393 "View.MemoryView"
  return __pyx_r;

#line 393 "View.MemoryView"
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

#line 403 "View.MemoryView"


#line 403 "View.MemoryView"
/* Python wrapper */

#line 403 "View.MemoryView"
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/

#line 403 "View.MemoryView"
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {

#line 403 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 403 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 403 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = 
#line 403 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

#line 403 "View.MemoryView"


#line 403 "View.MemoryView"
  /* function exit code */

#line 403 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 403 "View.MemoryView"
  return __pyx_r;

#line 403 "View.MemoryView"
}

#line 403 "View.MemoryView"


#line 403 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL
#line 403 "View.MemoryView"
;
  PyObject *__pyx_v_indices = NULL
#line 403 "View.MemoryView"
;
  char *__pyx_v_itemp
#line 403 "View.MemoryView"
;

#line 403 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 403 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 403 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 403 "View.MemoryView"
  int __pyx_t_1;

#line 403 "View.MemoryView"
  int __pyx_t_2;

#line 403 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 403 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 403 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 403 "View.MemoryView"
  char *__pyx_t_6;

#line 403 "View.MemoryView"
  int __pyx_lineno = 0;

#line 403 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 403 "View.MemoryView"
  int __pyx_clineno = 0;

#line 403 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getitem__", 0);

#line 403 "View.MemoryView"
  __Pyx_TraceCall("__getitem__", __pyx_f[1], 403, 0, __PYX_ERR(1, 403, __pyx_L1_error));

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __Pyx_TraceLine(404,0,__PYX_ERR(1, 404, __pyx_L1_error))

#line 404 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);

#line 404 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 404 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_TraceLine(405,0,__PYX_ERR(1, 405, __pyx_L1_error))

#line 405 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 405 "View.MemoryView"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 405 "View.MemoryView"
    __pyx_r = ((PyObject *)__pyx_v_self);

#line 405 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */

#line 404 "View.MemoryView"
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __Pyx_TraceLine(407,0,__PYX_ERR(1, 407, __pyx_L1_error))

#line 407 "View.MemoryView"
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 407 "View.MemoryView"
  if (likely(__pyx_t_3 != Py_None)) {

#line 407 "View.MemoryView"
    PyObject* sequence = __pyx_t_3;

#line 407 "View.MemoryView"
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);

#line 407 "View.MemoryView"
    if (unlikely(size != 2)) {

#line 407 "View.MemoryView"
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 407 "View.MemoryView"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 407 "View.MemoryView"
      __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "View.MemoryView"
    }

#line 407 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 407 "View.MemoryView"
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 

#line 407 "View.MemoryView"
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

#line 407 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_4);

#line 407 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_5);

#line 407 "View.MemoryView"
    #else

#line 407 "View.MemoryView"
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 407 "View.MemoryView"
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 407 "View.MemoryView"
    #endif

#line 407 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 407 "View.MemoryView"
  } else {

#line 407 "View.MemoryView"
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 407, __pyx_L1_error)

#line 407 "View.MemoryView"
  }

#line 407 "View.MemoryView"
  __pyx_v_have_slices = __pyx_t_4;

#line 407 "View.MemoryView"
  __pyx_t_4 = 0;

#line 407 "View.MemoryView"
  __pyx_v_indices = __pyx_t_5;

#line 407 "View.MemoryView"
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __Pyx_TraceLine(410,0,__PYX_ERR(1, 410, __pyx_L1_error))

#line 410 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 410, __pyx_L1_error)

#line 410 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_TraceLine(411,0,__PYX_ERR(1, 411, __pyx_L1_error))

#line 411 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 411 "View.MemoryView"
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)

#line 411 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 411 "View.MemoryView"
    __pyx_r = __pyx_t_3;

#line 411 "View.MemoryView"
    __pyx_t_3 = 0;

#line 411 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */

#line 410 "View.MemoryView"
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  __Pyx_TraceLine(413,0,__PYX_ERR(1, 413, __pyx_L1_error))

#line 413 "View.MemoryView"
  /*else*/ {

#line 413 "View.MemoryView"
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 413, __pyx_L1_error)

#line 413 "View.MemoryView"
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_TraceLine(414,0,__PYX_ERR(1, 414, __pyx_L1_error))

#line 414 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 414 "View.MemoryView"
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)

#line 414 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 414 "View.MemoryView"
    __pyx_r = __pyx_t_3;

#line 414 "View.MemoryView"
    __pyx_t_3 = 0;

#line 414 "View.MemoryView"
    goto __pyx_L0;

#line 414 "View.MemoryView"
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

#line 403 "View.MemoryView"


#line 403 "View.MemoryView"
  /* function exit code */

#line 403 "View.MemoryView"
  __pyx_L1_error:;

#line 403 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 403 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 403 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 403 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 403 "View.MemoryView"
  __pyx_r = NULL;

#line 403 "View.MemoryView"
  __pyx_L0:;

#line 403 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_have_slices);

#line 403 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_indices);

#line 403 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 403 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 403 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 403 "View.MemoryView"
  return __pyx_r;

#line 403 "View.MemoryView"
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

#line 416 "View.MemoryView"


#line 416 "View.MemoryView"
/* Python wrapper */

#line 416 "View.MemoryView"
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/

#line 416 "View.MemoryView"
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {

#line 416 "View.MemoryView"
  int __pyx_r;

#line 416 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 416 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = 
#line 416 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

#line 416 "View.MemoryView"


#line 416 "View.MemoryView"
  /* function exit code */

#line 416 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 416 "View.MemoryView"
  return __pyx_r;

#line 416 "View.MemoryView"
}

#line 416 "View.MemoryView"


#line 416 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL
#line 416 "View.MemoryView"
;
  PyObject *__pyx_v_obj = NULL
#line 416 "View.MemoryView"
;

#line 416 "View.MemoryView"
  int __pyx_r;

#line 416 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 416 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 416 "View.MemoryView"
  int __pyx_t_1;

#line 416 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 416 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 416 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 416 "View.MemoryView"
  int __pyx_lineno = 0;

#line 416 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 416 "View.MemoryView"
  int __pyx_clineno = 0;

#line 416 "View.MemoryView"
  __Pyx_RefNannySetupContext("__setitem__", 0);

#line 416 "View.MemoryView"
  __Pyx_TraceCall("__setitem__", __pyx_f[1], 416, 0, __PYX_ERR(1, 416, __pyx_L1_error));

#line 416 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __Pyx_TraceLine(417,0,__PYX_ERR(1, 417, __pyx_L1_error))

#line 417 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);

#line 417 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __Pyx_TraceLine(418,0,__PYX_ERR(1, 418, __pyx_L1_error))

#line 418 "View.MemoryView"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)

#line 418 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 418 "View.MemoryView"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 418 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 418 "View.MemoryView"
    __PYX_ERR(1, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */

#line 417 "View.MemoryView"
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __Pyx_TraceLine(420,0,__PYX_ERR(1, 420, __pyx_L1_error))

#line 420 "View.MemoryView"
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 420 "View.MemoryView"
  if (likely(__pyx_t_2 != Py_None)) {

#line 420 "View.MemoryView"
    PyObject* sequence = __pyx_t_2;

#line 420 "View.MemoryView"
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);

#line 420 "View.MemoryView"
    if (unlikely(size != 2)) {

#line 420 "View.MemoryView"
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 420 "View.MemoryView"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 420 "View.MemoryView"
      __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
    }

#line 420 "View.MemoryView"
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 420 "View.MemoryView"
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 420 "View.MemoryView"
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 420 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 420 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_4);

#line 420 "View.MemoryView"
    #else

#line 420 "View.MemoryView"
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 420 "View.MemoryView"
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 420 "View.MemoryView"
    #endif

#line 420 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 420 "View.MemoryView"
  } else {

#line 420 "View.MemoryView"
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 420, __pyx_L1_error)

#line 420 "View.MemoryView"
  }

#line 420 "View.MemoryView"
  __pyx_v_have_slices = __pyx_t_3;

#line 420 "View.MemoryView"
  __pyx_t_3 = 0;

#line 420 "View.MemoryView"
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);

#line 420 "View.MemoryView"
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __Pyx_TraceLine(422,0,__PYX_ERR(1, 422, __pyx_L1_error))

#line 422 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 422, __pyx_L1_error)

#line 422 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __Pyx_TraceLine(423,0,__PYX_ERR(1, 423, __pyx_L1_error))

#line 423 "View.MemoryView"
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)

#line 423 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 423 "View.MemoryView"
    __pyx_v_obj = __pyx_t_2;

#line 423 "View.MemoryView"
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __Pyx_TraceLine(424,0,__PYX_ERR(1, 424, __pyx_L1_error))

#line 424 "View.MemoryView"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)

#line 424 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __Pyx_TraceLine(425,0,__PYX_ERR(1, 425, __pyx_L1_error))

#line 425 "View.MemoryView"
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)

#line 425 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_2);

#line 425 "View.MemoryView"
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 425, __pyx_L1_error)

#line 425 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 425 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 425 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */

#line 424 "View.MemoryView"
      goto __pyx_L5;

#line 424 "View.MemoryView"
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    __Pyx_TraceLine(427,0,__PYX_ERR(1, 427, __pyx_L1_error))

#line 427 "View.MemoryView"
    /*else*/ {

#line 427 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)

#line 427 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 427 "View.MemoryView"
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 427, __pyx_L1_error)

#line 427 "View.MemoryView"
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)

#line 427 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_2);

#line 427 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 427 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 427 "View.MemoryView"
    }

#line 427 "View.MemoryView"
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */

#line 422 "View.MemoryView"
    goto __pyx_L4;

#line 422 "View.MemoryView"
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  __Pyx_TraceLine(429,0,__PYX_ERR(1, 429, __pyx_L1_error))

#line 429 "View.MemoryView"
  /*else*/ {

#line 429 "View.MemoryView"
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)

#line 429 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 429 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 429 "View.MemoryView"
  }

#line 429 "View.MemoryView"
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

#line 416 "View.MemoryView"


#line 416 "View.MemoryView"
  /* function exit code */

#line 416 "View.MemoryView"
  __pyx_r = 0;

#line 416 "View.MemoryView"
  goto __pyx_L0;

#line 416 "View.MemoryView"
  __pyx_L1_error:;

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 416 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 416 "View.MemoryView"
  __pyx_r = -1;

#line 416 "View.MemoryView"
  __pyx_L0:;

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_have_slices);

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_obj);

#line 416 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_index);

#line 416 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 416 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 416 "View.MemoryView"
  return __pyx_r;

#line 416 "View.MemoryView"
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

#line 431 "View.MemoryView"


#line 431 "View.MemoryView"
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {

#line 431 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 431 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 431 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 431 "View.MemoryView"
  int __pyx_t_1;

#line 431 "View.MemoryView"
  int __pyx_t_2;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 431 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 431 "View.MemoryView"
  int __pyx_t_9;

#line 431 "View.MemoryView"
  int __pyx_lineno = 0;

#line 431 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 431 "View.MemoryView"
  int __pyx_clineno = 0;

#line 431 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_slice", 0);

#line 431 "View.MemoryView"
  __Pyx_TraceCall("is_slice", __pyx_f[1], 431, 0, __PYX_ERR(1, 431, __pyx_L1_error));

#line 431 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __Pyx_TraceLine(432,0,__PYX_ERR(1, 432, __pyx_L1_error))

#line 432 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 

#line 432 "View.MemoryView"
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);

#line 432 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    __Pyx_TraceLine(433,0,__PYX_ERR(1, 433, __pyx_L1_error))

#line 433 "View.MemoryView"
    {

#line 433 "View.MemoryView"
      __Pyx_PyThreadState_declare

#line 433 "View.MemoryView"
      __Pyx_PyThreadState_assign

#line 433 "View.MemoryView"
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);

#line 433 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_3);

#line 433 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_4);

#line 433 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_5);

#line 433 "View.MemoryView"
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __Pyx_TraceLine(434,0,__PYX_ERR(1, 434, __pyx_L4_error))

#line 434 "View.MemoryView"
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 434, __pyx_L4_error)

#line 434 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __Pyx_TraceLine(435,0,__PYX_ERR(1, 435, __pyx_L4_error))

#line 435 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 435, __pyx_L4_error)

#line 435 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __Pyx_TraceLine(434,0,__PYX_ERR(1, 434, __pyx_L4_error))

#line 434 "View.MemoryView"
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 434, __pyx_L4_error)

#line 434 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 434 "View.MemoryView"
        __Pyx_INCREF(__pyx_v_obj);

#line 434 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_v_obj);

#line 434 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);

#line 434 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_6);

#line 434 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);

#line 434 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_7);

#line 434 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);

#line 434 "View.MemoryView"
        __pyx_t_6 = 0;

#line 434 "View.MemoryView"
        __pyx_t_7 = 0;

#line 434 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 434, __pyx_L4_error)

#line 434 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 434 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 434 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);

#line 434 "View.MemoryView"
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */

#line 433 "View.MemoryView"
      }

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 433 "View.MemoryView"
      goto __pyx_L9_try_end;

#line 433 "View.MemoryView"
      __pyx_L4_error:;

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 433 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __Pyx_TraceLine(436,0,__PYX_ERR(1, 436, __pyx_L6_except_error))

#line 436 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 436 "View.MemoryView"
      if (__pyx_t_9) {

#line 436 "View.MemoryView"
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 436 "View.MemoryView"
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 436, __pyx_L6_except_error)

#line 436 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 436 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_8);

#line 436 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_TraceLine(437,0,__PYX_ERR(1, 437, __pyx_L6_except_error))

#line 437 "View.MemoryView"
        __Pyx_XDECREF(__pyx_r);

#line 437 "View.MemoryView"
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 437 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 437 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 437 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 437 "View.MemoryView"
        goto __pyx_L7_except_return;

#line 437 "View.MemoryView"
      }

#line 437 "View.MemoryView"
      goto __pyx_L6_except_error;

#line 437 "View.MemoryView"
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_4);

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_5);

#line 433 "View.MemoryView"
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

#line 433 "View.MemoryView"
      goto __pyx_L1_error;

#line 433 "View.MemoryView"
      __pyx_L7_except_return:;

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_4);

#line 433 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_5);

#line 433 "View.MemoryView"
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);

#line 433 "View.MemoryView"
      goto __pyx_L0;

#line 433 "View.MemoryView"
      __pyx_L9_try_end:;

#line 433 "View.MemoryView"
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */

#line 432 "View.MemoryView"
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_TraceLine(439,0,__PYX_ERR(1, 439, __pyx_L1_error))

#line 439 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 439 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_obj);

#line 439 "View.MemoryView"
  __pyx_r = __pyx_v_obj;

#line 439 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

#line 431 "View.MemoryView"


#line 431 "View.MemoryView"
  /* function exit code */

#line 431 "View.MemoryView"
  __pyx_L1_error:;

#line 431 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 431 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 431 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_8);

#line 431 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 431 "View.MemoryView"
  __pyx_r = 0;

#line 431 "View.MemoryView"
  __pyx_L0:;

#line 431 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_obj);

#line 431 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 431 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 431 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 431 "View.MemoryView"
  return __pyx_r;

#line 431 "View.MemoryView"
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

#line 441 "View.MemoryView"


#line 441 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice
#line 441 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_src_slice
#line 441 "View.MemoryView"
;

#line 441 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 441 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 441 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 441 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 441 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_2;

#line 441 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 441 "View.MemoryView"
  int __pyx_t_4;

#line 441 "View.MemoryView"
  int __pyx_t_5;

#line 441 "View.MemoryView"
  int __pyx_t_6;

#line 441 "View.MemoryView"
  int __pyx_lineno = 0;

#line 441 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 441 "View.MemoryView"
  int __pyx_clineno = 0;

#line 441 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

#line 441 "View.MemoryView"
  __Pyx_TraceCall("setitem_slice_assignment", __pyx_f[1], 441, 0, __PYX_ERR(1, 441, __pyx_L1_error));

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __Pyx_TraceLine(445,0,__PYX_ERR(1, 445, __pyx_L1_error))

#line 445 "View.MemoryView"
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 445, __pyx_L1_error)

#line 445 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  __Pyx_TraceLine(446,0,__PYX_ERR(1, 446, __pyx_L1_error))

#line 446 "View.MemoryView"
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 446, __pyx_L1_error)

#line 446 "View.MemoryView"
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __Pyx_TraceLine(447,0,__PYX_ERR(1, 447, __pyx_L1_error))

#line 447 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 447 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 447 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 447 "View.MemoryView"
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 447, __pyx_L1_error)

#line 447 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __Pyx_TraceLine(445,0,__PYX_ERR(1, 445, __pyx_L1_error))

#line 445 "View.MemoryView"
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

#line 441 "View.MemoryView"


#line 441 "View.MemoryView"
  /* function exit code */

#line 441 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 441 "View.MemoryView"
  goto __pyx_L0;

#line 441 "View.MemoryView"
  __pyx_L1_error:;

#line 441 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 441 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 441 "View.MemoryView"
  __pyx_r = 0;

#line 441 "View.MemoryView"
  __pyx_L0:;

#line 441 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 441 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 441 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 441 "View.MemoryView"
  return __pyx_r;

#line 441 "View.MemoryView"
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

#line 449 "View.MemoryView"


#line 449 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80]
#line 449 "View.MemoryView"
;
  void *__pyx_v_tmp
#line 449 "View.MemoryView"
;
  void *__pyx_v_item
#line 449 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_dst_slice
#line 449 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp_slice
#line 449 "View.MemoryView"
;

#line 449 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 449 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 449 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 449 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 449 "View.MemoryView"
  int __pyx_t_2;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 449 "View.MemoryView"
  int __pyx_t_4;

#line 449 "View.MemoryView"
  int __pyx_t_5;

#line 449 "View.MemoryView"
  char const *__pyx_t_6;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_9 = NULL;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_10 = NULL;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_11 = NULL;

#line 449 "View.MemoryView"
  PyObject *__pyx_t_12 = NULL;

#line 449 "View.MemoryView"
  int __pyx_lineno = 0;

#line 449 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 449 "View.MemoryView"
  int __pyx_clineno = 0;

#line 449 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

#line 449 "View.MemoryView"
  __Pyx_TraceCall("setitem_slice_assign_scalar", __pyx_f[1], 449, 0, __PYX_ERR(1, 449, __pyx_L1_error));

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __Pyx_TraceLine(451,0,__PYX_ERR(1, 451, __pyx_L1_error))

#line 451 "View.MemoryView"
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __Pyx_TraceLine(456,0,__PYX_ERR(1, 456, __pyx_L1_error))

#line 456 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 456, __pyx_L1_error)

#line 456 "View.MemoryView"
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __Pyx_TraceLine(458,0,__PYX_ERR(1, 458, __pyx_L1_error))

#line 458 "View.MemoryView"
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);

#line 458 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __Pyx_TraceLine(459,0,__PYX_ERR(1, 459, __pyx_L1_error))

#line 459 "View.MemoryView"
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __Pyx_TraceLine(460,0,__PYX_ERR(1, 460, __pyx_L1_error))

#line 460 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);

#line 460 "View.MemoryView"
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      __Pyx_TraceLine(461,0,__PYX_ERR(1, 461, __pyx_L1_error))

#line 461 "View.MemoryView"
      PyErr_NoMemory(); __PYX_ERR(1, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */

#line 460 "View.MemoryView"
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __Pyx_TraceLine(462,0,__PYX_ERR(1, 462, __pyx_L1_error))

#line 462 "View.MemoryView"
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */

#line 458 "View.MemoryView"
    goto __pyx_L3;

#line 458 "View.MemoryView"
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  __Pyx_TraceLine(464,0,__PYX_ERR(1, 464, __pyx_L1_error))

#line 464 "View.MemoryView"
  /*else*/ {

#line 464 "View.MemoryView"
    __pyx_v_item = ((void *)__pyx_v_array);

#line 464 "View.MemoryView"
  }

#line 464 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  __Pyx_TraceLine(466,0,__PYX_ERR(1, 466, __pyx_L1_error))

#line 466 "View.MemoryView"
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __Pyx_TraceLine(467,0,__PYX_ERR(1, 467, __pyx_L6_error))

#line 467 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);

#line 467 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      __Pyx_TraceLine(468,0,__PYX_ERR(1, 468, __pyx_L6_error))

#line 468 "View.MemoryView"
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */

#line 467 "View.MemoryView"
      goto __pyx_L8;

#line 467 "View.MemoryView"
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(470,0,__PYX_ERR(1, 470, __pyx_L6_error))

#line 470 "View.MemoryView"
    /*else*/ {

#line 470 "View.MemoryView"
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 470, __pyx_L6_error)

#line 470 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 470 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 470 "View.MemoryView"
    }

#line 470 "View.MemoryView"
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __Pyx_TraceLine(474,0,__PYX_ERR(1, 474, __pyx_L6_error))

#line 474 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);

#line 474 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __Pyx_TraceLine(475,0,__PYX_ERR(1, 475, __pyx_L6_error))

#line 475 "View.MemoryView"
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 475, __pyx_L6_error)

#line 475 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 475 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */

#line 474 "View.MemoryView"
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __Pyx_TraceLine(476,0,__PYX_ERR(1, 476, __pyx_L6_error))

#line 476 "View.MemoryView"
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);

#line 476 "View.MemoryView"
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  __Pyx_TraceLine(479,0,__PYX_ERR(1, 479, __pyx_L6_error))

#line 479 "View.MemoryView"
  /*finally:*/ {

#line 479 "View.MemoryView"
    /*normal exit:*/{

#line 479 "View.MemoryView"
      PyMem_Free(__pyx_v_tmp);

#line 479 "View.MemoryView"
      goto __pyx_L7;

#line 479 "View.MemoryView"
    }

#line 479 "View.MemoryView"
    __pyx_L6_error:;

#line 479 "View.MemoryView"
    /*exception exit:*/{

#line 479 "View.MemoryView"
      __Pyx_PyThreadState_declare

#line 479 "View.MemoryView"
      __Pyx_PyThreadState_assign

#line 479 "View.MemoryView"
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;

#line 479 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 479 "View.MemoryView"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 479 "View.MemoryView"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_7);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_8);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_9);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_10);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_11);

#line 479 "View.MemoryView"
      __Pyx_XGOTREF(__pyx_t_12);

#line 479 "View.MemoryView"
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;

#line 479 "View.MemoryView"
      {

#line 479 "View.MemoryView"
        PyMem_Free(__pyx_v_tmp);

#line 479 "View.MemoryView"
      }

#line 479 "View.MemoryView"
      if (PY_MAJOR_VERSION >= 3) {

#line 479 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_10);

#line 479 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_11);

#line 479 "View.MemoryView"
        __Pyx_XGIVEREF(__pyx_t_12);

#line 479 "View.MemoryView"
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 479 "View.MemoryView"
      }

#line 479 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_7);

#line 479 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 479 "View.MemoryView"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 479 "View.MemoryView"
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);

#line 479 "View.MemoryView"
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;

#line 479 "View.MemoryView"
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;

#line 479 "View.MemoryView"
      goto __pyx_L1_error;

#line 479 "View.MemoryView"
    }

#line 479 "View.MemoryView"
    __pyx_L7:;

#line 479 "View.MemoryView"
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

#line 449 "View.MemoryView"


#line 449 "View.MemoryView"
  /* function exit code */

#line 449 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 449 "View.MemoryView"
  goto __pyx_L0;

#line 449 "View.MemoryView"
  __pyx_L1_error:;

#line 449 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 449 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 449 "View.MemoryView"
  __pyx_r = 0;

#line 449 "View.MemoryView"
  __pyx_L0:;

#line 449 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 449 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 449 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 449 "View.MemoryView"
  return __pyx_r;

#line 449 "View.MemoryView"
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

#line 481 "View.MemoryView"


#line 481 "View.MemoryView"
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp
#line 481 "View.MemoryView"
;

#line 481 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 481 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 481 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 481 "View.MemoryView"
  char *__pyx_t_1;

#line 481 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 481 "View.MemoryView"
  int __pyx_lineno = 0;

#line 481 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 481 "View.MemoryView"
  int __pyx_clineno = 0;

#line 481 "View.MemoryView"
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

#line 481 "View.MemoryView"
  __Pyx_TraceCall("setitem_indexed", __pyx_f[1], 481, 0, __PYX_ERR(1, 481, __pyx_L1_error));

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __Pyx_TraceLine(482,0,__PYX_ERR(1, 482, __pyx_L1_error))

#line 482 "View.MemoryView"
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 482, __pyx_L1_error)

#line 482 "View.MemoryView"
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __Pyx_TraceLine(483,0,__PYX_ERR(1, 483, __pyx_L1_error))

#line 483 "View.MemoryView"
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 483, __pyx_L1_error)

#line 483 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 483 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

#line 481 "View.MemoryView"


#line 481 "View.MemoryView"
  /* function exit code */

#line 481 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 481 "View.MemoryView"
  goto __pyx_L0;

#line 481 "View.MemoryView"
  __pyx_L1_error:;

#line 481 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 481 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 481 "View.MemoryView"
  __pyx_r = 0;

#line 481 "View.MemoryView"
  __pyx_L0:;

#line 481 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 481 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 481 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 481 "View.MemoryView"
  return __pyx_r;

#line 481 "View.MemoryView"
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 485 "View.MemoryView"


#line 485 "View.MemoryView"
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL
#line 485 "View.MemoryView"
;
  PyObject *__pyx_v_bytesitem = 0
#line 485 "View.MemoryView"
;
  PyObject *__pyx_v_result = NULL
#line 485 "View.MemoryView"
;

#line 485 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 485 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 485 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 485 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 485 "View.MemoryView"
  int __pyx_t_8;

#line 485 "View.MemoryView"
  PyObject *__pyx_t_9 = NULL;

#line 485 "View.MemoryView"
  size_t __pyx_t_10;

#line 485 "View.MemoryView"
  int __pyx_t_11;

#line 485 "View.MemoryView"
  int __pyx_lineno = 0;

#line 485 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 485 "View.MemoryView"
  int __pyx_clineno = 0;

#line 485 "View.MemoryView"
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

#line 485 "View.MemoryView"
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[1], 485, 0, __PYX_ERR(1, 485, __pyx_L1_error));

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __Pyx_TraceLine(488,0,__PYX_ERR(1, 488, __pyx_L1_error))

#line 488 "View.MemoryView"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 488, __pyx_L1_error)

#line 488 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 488 "View.MemoryView"
  __pyx_v_struct = __pyx_t_1;

#line 488 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __Pyx_TraceLine(491,0,__PYX_ERR(1, 491, __pyx_L1_error))

#line 491 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)

#line 491 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 491 "View.MemoryView"
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);

#line 491 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  __Pyx_TraceLine(492,0,__PYX_ERR(1, 492, __pyx_L1_error))

#line 492 "View.MemoryView"
  {

#line 492 "View.MemoryView"
    __Pyx_PyThreadState_declare

#line 492 "View.MemoryView"
    __Pyx_PyThreadState_assign

#line 492 "View.MemoryView"
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);

#line 492 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_2);

#line 492 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_3);

#line 492 "View.MemoryView"
    __Pyx_XGOTREF(__pyx_t_4);

#line 492 "View.MemoryView"
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __Pyx_TraceLine(493,0,__PYX_ERR(1, 493, __pyx_L3_error))

#line 493 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 493 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 493 "View.MemoryView"
      __pyx_t_7 = NULL;

#line 493 "View.MemoryView"
      __pyx_t_8 = 0;

#line 493 "View.MemoryView"
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {

#line 493 "View.MemoryView"
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

#line 493 "View.MemoryView"
        if (likely(__pyx_t_7)) {

#line 493 "View.MemoryView"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 493 "View.MemoryView"
          __Pyx_INCREF(__pyx_t_7);

#line 493 "View.MemoryView"
          __Pyx_INCREF(function);

#line 493 "View.MemoryView"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 493 "View.MemoryView"
          __pyx_t_8 = 1;

#line 493 "View.MemoryView"
        }

#line 493 "View.MemoryView"
      }

#line 493 "View.MemoryView"
      #if CYTHON_FAST_PYCALL

#line 493 "View.MemoryView"
      if (PyFunction_Check(__pyx_t_5)) {

#line 493 "View.MemoryView"
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};

#line 493 "View.MemoryView"
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 493 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 493 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 493 "View.MemoryView"
      } else

#line 493 "View.MemoryView"
      #endif

#line 493 "View.MemoryView"
      #if CYTHON_FAST_PYCCALL

#line 493 "View.MemoryView"
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {

#line 493 "View.MemoryView"
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};

#line 493 "View.MemoryView"
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 493 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 493 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 493 "View.MemoryView"
      } else

#line 493 "View.MemoryView"
      #endif

#line 493 "View.MemoryView"
      {

#line 493 "View.MemoryView"
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_9);

#line 493 "View.MemoryView"
        if (__pyx_t_7) {

#line 493 "View.MemoryView"
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;

#line 493 "View.MemoryView"
        }

#line 493 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_6);

#line 493 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);

#line 493 "View.MemoryView"
        __Pyx_INCREF(__pyx_v_bytesitem);

#line 493 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_v_bytesitem);

#line 493 "View.MemoryView"
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);

#line 493 "View.MemoryView"
        __pyx_t_6 = 0;

#line 493 "View.MemoryView"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L3_error)

#line 493 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 493 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 493 "View.MemoryView"
      }

#line 493 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 493 "View.MemoryView"
      __pyx_v_result = __pyx_t_1;

#line 493 "View.MemoryView"
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */

#line 492 "View.MemoryView"
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    __Pyx_TraceLine(497,0,__PYX_ERR(1, 497, __pyx_L5_except_error))

#line 497 "View.MemoryView"
    /*else:*/ {

#line 497 "View.MemoryView"
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 

#line 497 "View.MemoryView"
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);

#line 497 "View.MemoryView"
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_TraceLine(498,0,__PYX_ERR(1, 498, __pyx_L5_except_error))

#line 498 "View.MemoryView"
        __Pyx_XDECREF(__pyx_r);

#line 498 "View.MemoryView"
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 498, __pyx_L5_except_error)

#line 498 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_1);

#line 498 "View.MemoryView"
        __pyx_r = __pyx_t_1;

#line 498 "View.MemoryView"
        __pyx_t_1 = 0;

#line 498 "View.MemoryView"
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */

#line 497 "View.MemoryView"
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_TraceLine(499,0,__PYX_ERR(1, 499, __pyx_L5_except_error))

#line 499 "View.MemoryView"
      __Pyx_XDECREF(__pyx_r);

#line 499 "View.MemoryView"
      __Pyx_INCREF(__pyx_v_result);

#line 499 "View.MemoryView"
      __pyx_r = __pyx_v_result;

#line 499 "View.MemoryView"
      goto __pyx_L6_except_return;

#line 499 "View.MemoryView"
    }

#line 499 "View.MemoryView"
    __pyx_L3_error:;

#line 499 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 499 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 499 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 499 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 499 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_TraceLine(494,0,__PYX_ERR(1, 494, __pyx_L5_except_error))

#line 494 "View.MemoryView"
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);

#line 494 "View.MemoryView"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 494, __pyx_L5_except_error)

#line 494 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_6);

#line 494 "View.MemoryView"
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);

#line 494 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 494 "View.MemoryView"
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);

#line 494 "View.MemoryView"
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;

#line 494 "View.MemoryView"
    if (__pyx_t_8) {

#line 494 "View.MemoryView"
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 494 "View.MemoryView"
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 494, __pyx_L5_except_error)

#line 494 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 494 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 494 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __Pyx_TraceLine(495,0,__PYX_ERR(1, 495, __pyx_L5_except_error))

#line 495 "View.MemoryView"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L5_except_error)

#line 495 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 495 "View.MemoryView"
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 495 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 495 "View.MemoryView"
      __PYX_ERR(1, 495, __pyx_L5_except_error)

#line 495 "View.MemoryView"
    }

#line 495 "View.MemoryView"
    goto __pyx_L5_except_error;

#line 495 "View.MemoryView"
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 492 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 492 "View.MemoryView"
    goto __pyx_L1_error;

#line 492 "View.MemoryView"
    __pyx_L6_except_return:;

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 492 "View.MemoryView"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 492 "View.MemoryView"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 492 "View.MemoryView"
    goto __pyx_L0;

#line 492 "View.MemoryView"
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 485 "View.MemoryView"


#line 485 "View.MemoryView"
  /* function exit code */

#line 485 "View.MemoryView"
  __pyx_L1_error:;

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_9);

#line 485 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 485 "View.MemoryView"
  __pyx_r = 0;

#line 485 "View.MemoryView"
  __pyx_L0:;

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_struct);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_bytesitem);

#line 485 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 485 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 485 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 485 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 485 "View.MemoryView"
  return __pyx_r;

#line 485 "View.MemoryView"
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 501 "View.MemoryView"


#line 501 "View.MemoryView"
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL
#line 501 "View.MemoryView"
;
  char __pyx_v_c
#line 501 "View.MemoryView"
;
  PyObject *__pyx_v_bytesvalue = 0
#line 501 "View.MemoryView"
;
  Py_ssize_t __pyx_v_i
#line 501 "View.MemoryView"
;

#line 501 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 501 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 501 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 501 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 501 "View.MemoryView"
  int __pyx_t_2;

#line 501 "View.MemoryView"
  int __pyx_t_3;

#line 501 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 501 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 501 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 501 "View.MemoryView"
  int __pyx_t_7;

#line 501 "View.MemoryView"
  PyObject *__pyx_t_8 = NULL;

#line 501 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 501 "View.MemoryView"
  PyObject *__pyx_t_10 = NULL;

#line 501 "View.MemoryView"
  char *__pyx_t_11;

#line 501 "View.MemoryView"
  char *__pyx_t_12;

#line 501 "View.MemoryView"
  char *__pyx_t_13;

#line 501 "View.MemoryView"
  char *__pyx_t_14;

#line 501 "View.MemoryView"
  int __pyx_lineno = 0;

#line 501 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 501 "View.MemoryView"
  int __pyx_clineno = 0;

#line 501 "View.MemoryView"
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

#line 501 "View.MemoryView"
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[1], 501, 0, __PYX_ERR(1, 501, __pyx_L1_error));

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __Pyx_TraceLine(504,0,__PYX_ERR(1, 504, __pyx_L1_error))

#line 504 "View.MemoryView"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)

#line 504 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 504 "View.MemoryView"
  __pyx_v_struct = __pyx_t_1;

#line 504 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __Pyx_TraceLine(509,0,__PYX_ERR(1, 509, __pyx_L1_error))

#line 509 "View.MemoryView"
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 

#line 509 "View.MemoryView"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 509 "View.MemoryView"
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __Pyx_TraceLine(510,0,__PYX_ERR(1, 510, __pyx_L1_error))

#line 510 "View.MemoryView"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 510 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 510 "View.MemoryView"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 510 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_t_4);

#line 510 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 510 "View.MemoryView"
    __pyx_t_4 = 0;

#line 510 "View.MemoryView"
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 510 "View.MemoryView"
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_6);

#line 510 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 510 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 510 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 510 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 510 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 510 "View.MemoryView"
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 510, __pyx_L1_error)

#line 510 "View.MemoryView"
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);

#line 510 "View.MemoryView"
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */

#line 509 "View.MemoryView"
    goto __pyx_L3;

#line 509 "View.MemoryView"
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  __Pyx_TraceLine(512,0,__PYX_ERR(1, 512, __pyx_L1_error))

#line 512 "View.MemoryView"
  /*else*/ {

#line 512 "View.MemoryView"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_6);

#line 512 "View.MemoryView"
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_1);

#line 512 "View.MemoryView"
    __pyx_t_5 = NULL;

#line 512 "View.MemoryView"
    __pyx_t_7 = 0;

#line 512 "View.MemoryView"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {

#line 512 "View.MemoryView"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 512 "View.MemoryView"
      if (likely(__pyx_t_5)) {

#line 512 "View.MemoryView"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 512 "View.MemoryView"
        __Pyx_INCREF(__pyx_t_5);

#line 512 "View.MemoryView"
        __Pyx_INCREF(function);

#line 512 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 512 "View.MemoryView"
        __pyx_t_7 = 1;

#line 512 "View.MemoryView"
      }

#line 512 "View.MemoryView"
    }

#line 512 "View.MemoryView"
    #if CYTHON_FAST_PYCALL

#line 512 "View.MemoryView"
    if (PyFunction_Check(__pyx_t_6)) {

#line 512 "View.MemoryView"
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};

#line 512 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 512 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 512 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 512 "View.MemoryView"
    } else

#line 512 "View.MemoryView"
    #endif

#line 512 "View.MemoryView"
    #if CYTHON_FAST_PYCCALL

#line 512 "View.MemoryView"
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {

#line 512 "View.MemoryView"
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};

#line 512 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 512 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 512 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 512 "View.MemoryView"
    } else

#line 512 "View.MemoryView"
    #endif

#line 512 "View.MemoryView"
    {

#line 512 "View.MemoryView"
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_8);

#line 512 "View.MemoryView"
      if (__pyx_t_5) {

#line 512 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;

#line 512 "View.MemoryView"
      }

#line 512 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_t_1);

#line 512 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);

#line 512 "View.MemoryView"
      __Pyx_INCREF(__pyx_v_value);

#line 512 "View.MemoryView"
      __Pyx_GIVEREF(__pyx_v_value);

#line 512 "View.MemoryView"
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);

#line 512 "View.MemoryView"
      __pyx_t_1 = 0;

#line 512 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 512 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 512 "View.MemoryView"
    }

#line 512 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 512 "View.MemoryView"
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)

#line 512 "View.MemoryView"
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);

#line 512 "View.MemoryView"
    __pyx_t_4 = 0;

#line 512 "View.MemoryView"
  }

#line 512 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __Pyx_TraceLine(514,0,__PYX_ERR(1, 514, __pyx_L1_error))

#line 514 "View.MemoryView"
  __pyx_t_9 = 0;

#line 514 "View.MemoryView"
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {

#line 514 "View.MemoryView"
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");

#line 514 "View.MemoryView"
    __PYX_ERR(1, 514, __pyx_L1_error)

#line 514 "View.MemoryView"
  }

#line 514 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_bytesvalue);

#line 514 "View.MemoryView"
  __pyx_t_10 = __pyx_v_bytesvalue;

#line 514 "View.MemoryView"
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);

#line 514 "View.MemoryView"
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));

#line 514 "View.MemoryView"
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {

#line 514 "View.MemoryView"
    __pyx_t_11 = __pyx_t_14;

#line 514 "View.MemoryView"
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __Pyx_TraceLine(515,0,__PYX_ERR(1, 515, __pyx_L1_error))

#line 515 "View.MemoryView"
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __Pyx_TraceLine(514,0,__PYX_ERR(1, 514, __pyx_L1_error))

#line 514 "View.MemoryView"
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __Pyx_TraceLine(515,0,__PYX_ERR(1, 515, __pyx_L1_error))

#line 515 "View.MemoryView"
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;

#line 515 "View.MemoryView"
  }

#line 515 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

#line 501 "View.MemoryView"


#line 501 "View.MemoryView"
  /* function exit code */

#line 501 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 501 "View.MemoryView"
  goto __pyx_L0;

#line 501 "View.MemoryView"
  __pyx_L1_error:;

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_8);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_10);

#line 501 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 501 "View.MemoryView"
  __pyx_r = 0;

#line 501 "View.MemoryView"
  __pyx_L0:;

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_struct);

#line 501 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_bytesvalue);

#line 501 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 501 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 501 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 501 "View.MemoryView"
  return __pyx_r;

#line 501 "View.MemoryView"
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

#line 518 "View.MemoryView"


#line 518 "View.MemoryView"
/* Python wrapper */

#line 518 "View.MemoryView"
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 518 "View.MemoryView"
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 518 "View.MemoryView"
  int __pyx_r;

#line 518 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 518 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 518 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 518 "View.MemoryView"


#line 518 "View.MemoryView"
  /* function exit code */

#line 518 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 518 "View.MemoryView"
  return __pyx_r;

#line 518 "View.MemoryView"
}

#line 518 "View.MemoryView"


#line 518 "View.MemoryView"
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 518 "View.MemoryView"
  int __pyx_r;

#line 518 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 518 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 518 "View.MemoryView"
  int __pyx_t_1;

#line 518 "View.MemoryView"
  int __pyx_t_2;

#line 518 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 518 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 518 "View.MemoryView"
  char *__pyx_t_5;

#line 518 "View.MemoryView"
  void *__pyx_t_6;

#line 518 "View.MemoryView"
  int __pyx_t_7;

#line 518 "View.MemoryView"
  Py_ssize_t __pyx_t_8;

#line 518 "View.MemoryView"
  int __pyx_lineno = 0;

#line 518 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 518 "View.MemoryView"
  int __pyx_clineno = 0;

#line 518 "View.MemoryView"
  if (__pyx_v_info == NULL) {

#line 518 "View.MemoryView"
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");

#line 518 "View.MemoryView"
    return -1;

#line 518 "View.MemoryView"
  }

#line 518 "View.MemoryView"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 518 "View.MemoryView"
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 518 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_info->obj);

#line 518 "View.MemoryView"
  __Pyx_TraceCall("__getbuffer__", __pyx_f[1], 518, 0, __PYX_ERR(1, 518, __pyx_L1_error));

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __Pyx_TraceLine(519,0,__PYX_ERR(1, 519, __pyx_L1_error))

#line 519 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);

#line 519 "View.MemoryView"
  if (__pyx_t_2) {

#line 519 "View.MemoryView"
  } else {

#line 519 "View.MemoryView"
    __pyx_t_1 = __pyx_t_2;

#line 519 "View.MemoryView"
    goto __pyx_L4_bool_binop_done;

#line 519 "View.MemoryView"
  }

#line 519 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);

#line 519 "View.MemoryView"
  __pyx_t_1 = __pyx_t_2;

#line 519 "View.MemoryView"
  __pyx_L4_bool_binop_done:;

#line 519 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __Pyx_TraceLine(520,0,__PYX_ERR(1, 520, __pyx_L1_error))

#line 520 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 520 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 520 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 520 "View.MemoryView"
    __PYX_ERR(1, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */

#line 519 "View.MemoryView"
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __Pyx_TraceLine(522,0,__PYX_ERR(1, 522, __pyx_L1_error))

#line 522 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);

#line 522 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __Pyx_TraceLine(523,0,__PYX_ERR(1, 523, __pyx_L1_error))

#line 523 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->view.shape;

#line 523 "View.MemoryView"
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */

#line 522 "View.MemoryView"
    goto __pyx_L6;

#line 522 "View.MemoryView"
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  __Pyx_TraceLine(525,0,__PYX_ERR(1, 525, __pyx_L1_error))

#line 525 "View.MemoryView"
  /*else*/ {

#line 525 "View.MemoryView"
    __pyx_v_info->shape = NULL;

#line 525 "View.MemoryView"
  }

#line 525 "View.MemoryView"
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __Pyx_TraceLine(527,0,__PYX_ERR(1, 527, __pyx_L1_error))

#line 527 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);

#line 527 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __Pyx_TraceLine(528,0,__PYX_ERR(1, 528, __pyx_L1_error))

#line 528 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->view.strides;

#line 528 "View.MemoryView"
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */

#line 527 "View.MemoryView"
    goto __pyx_L7;

#line 527 "View.MemoryView"
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  __Pyx_TraceLine(530,0,__PYX_ERR(1, 530, __pyx_L1_error))

#line 530 "View.MemoryView"
  /*else*/ {

#line 530 "View.MemoryView"
    __pyx_v_info->strides = NULL;

#line 530 "View.MemoryView"
  }

#line 530 "View.MemoryView"
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __Pyx_TraceLine(532,0,__PYX_ERR(1, 532, __pyx_L1_error))

#line 532 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);

#line 532 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __Pyx_TraceLine(533,0,__PYX_ERR(1, 533, __pyx_L1_error))

#line 533 "View.MemoryView"
    __pyx_t_4 = __pyx_v_self->view.suboffsets;

#line 533 "View.MemoryView"
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */

#line 532 "View.MemoryView"
    goto __pyx_L8;

#line 532 "View.MemoryView"
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __Pyx_TraceLine(535,0,__PYX_ERR(1, 535, __pyx_L1_error))

#line 535 "View.MemoryView"
  /*else*/ {

#line 535 "View.MemoryView"
    __pyx_v_info->suboffsets = NULL;

#line 535 "View.MemoryView"
  }

#line 535 "View.MemoryView"
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __Pyx_TraceLine(537,0,__PYX_ERR(1, 537, __pyx_L1_error))

#line 537 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);

#line 537 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __Pyx_TraceLine(538,0,__PYX_ERR(1, 538, __pyx_L1_error))

#line 538 "View.MemoryView"
    __pyx_t_5 = __pyx_v_self->view.format;

#line 538 "View.MemoryView"
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */

#line 537 "View.MemoryView"
    goto __pyx_L9;

#line 537 "View.MemoryView"
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  __Pyx_TraceLine(540,0,__PYX_ERR(1, 540, __pyx_L1_error))

#line 540 "View.MemoryView"
  /*else*/ {

#line 540 "View.MemoryView"
    __pyx_v_info->format = NULL;

#line 540 "View.MemoryView"
  }

#line 540 "View.MemoryView"
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __Pyx_TraceLine(542,0,__PYX_ERR(1, 542, __pyx_L1_error))

#line 542 "View.MemoryView"
  __pyx_t_6 = __pyx_v_self->view.buf;

#line 542 "View.MemoryView"
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __Pyx_TraceLine(543,0,__PYX_ERR(1, 543, __pyx_L1_error))

#line 543 "View.MemoryView"
  __pyx_t_7 = __pyx_v_self->view.ndim;

#line 543 "View.MemoryView"
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __Pyx_TraceLine(544,0,__PYX_ERR(1, 544, __pyx_L1_error))

#line 544 "View.MemoryView"
  __pyx_t_8 = __pyx_v_self->view.itemsize;

#line 544 "View.MemoryView"
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __Pyx_TraceLine(545,0,__PYX_ERR(1, 545, __pyx_L1_error))

#line 545 "View.MemoryView"
  __pyx_t_8 = __pyx_v_self->view.len;

#line 545 "View.MemoryView"
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __Pyx_TraceLine(546,0,__PYX_ERR(1, 546, __pyx_L1_error))

#line 546 "View.MemoryView"
  __pyx_t_1 = __pyx_v_self->view.readonly;

#line 546 "View.MemoryView"
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_TraceLine(547,0,__PYX_ERR(1, 547, __pyx_L1_error))

#line 547 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 547 "View.MemoryView"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 547 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 547 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 547 "View.MemoryView"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

#line 518 "View.MemoryView"


#line 518 "View.MemoryView"
  /* function exit code */

#line 518 "View.MemoryView"
  __pyx_r = 0;

#line 518 "View.MemoryView"
  goto __pyx_L0;

#line 518 "View.MemoryView"
  __pyx_L1_error:;

#line 518 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 518 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 518 "View.MemoryView"
  __pyx_r = -1;

#line 518 "View.MemoryView"
  if (__pyx_v_info->obj != NULL) {

#line 518 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 518 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 518 "View.MemoryView"
  }

#line 518 "View.MemoryView"
  goto __pyx_L2;

#line 518 "View.MemoryView"
  __pyx_L0:;

#line 518 "View.MemoryView"
  if (__pyx_v_info->obj == Py_None) {

#line 518 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 518 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;

#line 518 "View.MemoryView"
  }

#line 518 "View.MemoryView"
  __pyx_L2:;

#line 518 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 518 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 518 "View.MemoryView"
  return __pyx_r;

#line 518 "View.MemoryView"
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

#line 553 "View.MemoryView"


#line 553 "View.MemoryView"
/* Python wrapper */

#line 553 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 553 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {

#line 553 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 553 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 553 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 553 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 553 "View.MemoryView"


#line 553 "View.MemoryView"
  /* function exit code */

#line 553 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 553 "View.MemoryView"
  return __pyx_r;

#line 553 "View.MemoryView"
}

#line 553 "View.MemoryView"


#line 553 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0
#line 553 "View.MemoryView"
;

#line 553 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 553 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 553 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 553 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 553 "View.MemoryView"
  int __pyx_t_2;

#line 553 "View.MemoryView"
  int __pyx_lineno = 0;

#line 553 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 553 "View.MemoryView"
  int __pyx_clineno = 0;

#line 553 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 553 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 553, 0, __PYX_ERR(1, 553, __pyx_L1_error));

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __Pyx_TraceLine(554,0,__PYX_ERR(1, 554, __pyx_L1_error))

#line 554 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 554, __pyx_L1_error)

#line 554 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 554 "View.MemoryView"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 554, __pyx_L1_error)

#line 554 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);

#line 554 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __Pyx_TraceLine(555,0,__PYX_ERR(1, 555, __pyx_L1_error))

#line 555 "View.MemoryView"
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(556,0,__PYX_ERR(1, 556, __pyx_L1_error))

#line 556 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 556 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_result));

#line 556 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 556 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

#line 553 "View.MemoryView"


#line 553 "View.MemoryView"
  /* function exit code */

#line 553 "View.MemoryView"
  __pyx_L1_error:;

#line 553 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 553 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 553 "View.MemoryView"
  __pyx_r = NULL;

#line 553 "View.MemoryView"
  __pyx_L0:;

#line 553 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 553 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 553 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 553 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 553 "View.MemoryView"
  return __pyx_r;

#line 553 "View.MemoryView"
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

#line 559 "View.MemoryView"


#line 559 "View.MemoryView"
/* Python wrapper */

#line 559 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 559 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {

#line 559 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 559 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 559 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 559 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 559 "View.MemoryView"


#line 559 "View.MemoryView"
  /* function exit code */

#line 559 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 559 "View.MemoryView"
  return __pyx_r;

#line 559 "View.MemoryView"
}

#line 559 "View.MemoryView"


#line 559 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 559 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 559 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 559 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 559 "View.MemoryView"
  int __pyx_lineno = 0;

#line 559 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 559 "View.MemoryView"
  int __pyx_clineno = 0;

#line 559 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 559 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 559, 0, __PYX_ERR(1, 559, __pyx_L1_error));

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(560,0,__PYX_ERR(1, 560, __pyx_L1_error))

#line 560 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 560 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->obj);

#line 560 "View.MemoryView"
  __pyx_r = __pyx_v_self->obj;

#line 560 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

#line 559 "View.MemoryView"


#line 559 "View.MemoryView"
  /* function exit code */

#line 559 "View.MemoryView"
  __pyx_L1_error:;

#line 559 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 559 "View.MemoryView"
  __pyx_r = NULL;

#line 559 "View.MemoryView"
  __pyx_L0:;

#line 559 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 559 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 559 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 559 "View.MemoryView"
  return __pyx_r;

#line 559 "View.MemoryView"
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

#line 563 "View.MemoryView"


#line 563 "View.MemoryView"
/* Python wrapper */

#line 563 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 563 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {

#line 563 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 563 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 563 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 563 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 563 "View.MemoryView"


#line 563 "View.MemoryView"
  /* function exit code */

#line 563 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 563 "View.MemoryView"
  return __pyx_r;

#line 563 "View.MemoryView"
}

#line 563 "View.MemoryView"


#line 563 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length
#line 563 "View.MemoryView"
;

#line 563 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 563 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 563 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 563 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 563 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 563 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 563 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 563 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 563 "View.MemoryView"
  int __pyx_lineno = 0;

#line 563 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 563 "View.MemoryView"
  int __pyx_clineno = 0;

#line 563 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 563 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 563, 0, __PYX_ERR(1, 563, __pyx_L1_error));

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(564,0,__PYX_ERR(1, 564, __pyx_L1_error))

#line 564 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 564 "View.MemoryView"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 564, __pyx_L1_error)

#line 564 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 564 "View.MemoryView"
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

#line 564 "View.MemoryView"
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

#line 564 "View.MemoryView"
    __pyx_t_2 = __pyx_t_4;

#line 564 "View.MemoryView"
    __pyx_v_length = (__pyx_t_2[0]);

#line 564 "View.MemoryView"
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)

#line 564 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_5);

#line 564 "View.MemoryView"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 564, __pyx_L1_error)

#line 564 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 564 "View.MemoryView"
  }

#line 564 "View.MemoryView"
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 564, __pyx_L1_error)

#line 564 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_5);

#line 564 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 564 "View.MemoryView"
  __pyx_r = __pyx_t_5;

#line 564 "View.MemoryView"
  __pyx_t_5 = 0;

#line 564 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

#line 563 "View.MemoryView"


#line 563 "View.MemoryView"
  /* function exit code */

#line 563 "View.MemoryView"
  __pyx_L1_error:;

#line 563 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 563 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 563 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 563 "View.MemoryView"
  __pyx_r = NULL;

#line 563 "View.MemoryView"
  __pyx_L0:;

#line 563 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 563 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 563 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 563 "View.MemoryView"
  return __pyx_r;

#line 563 "View.MemoryView"
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

#line 567 "View.MemoryView"


#line 567 "View.MemoryView"
/* Python wrapper */

#line 567 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 567 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {

#line 567 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 567 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 567 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 567 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 567 "View.MemoryView"


#line 567 "View.MemoryView"
  /* function exit code */

#line 567 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 567 "View.MemoryView"
  return __pyx_r;

#line 567 "View.MemoryView"
}

#line 567 "View.MemoryView"


#line 567 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride
#line 567 "View.MemoryView"
;

#line 567 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 567 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 567 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 567 "View.MemoryView"
  int __pyx_t_1;

#line 567 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 567 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 567 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 567 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 567 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 567 "View.MemoryView"
  int __pyx_lineno = 0;

#line 567 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 567 "View.MemoryView"
  int __pyx_clineno = 0;

#line 567 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 567 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 567, 0, __PYX_ERR(1, 567, __pyx_L1_error));

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __Pyx_TraceLine(568,0,__PYX_ERR(1, 568, __pyx_L1_error))

#line 568 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);

#line 568 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __Pyx_TraceLine(570,0,__PYX_ERR(1, 570, __pyx_L1_error))

#line 570 "View.MemoryView"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 570, __pyx_L1_error)

#line 570 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 570 "View.MemoryView"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 570 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 570 "View.MemoryView"
    __PYX_ERR(1, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */

#line 568 "View.MemoryView"
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(572,0,__PYX_ERR(1, 572, __pyx_L1_error))

#line 572 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 572 "View.MemoryView"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)

#line 572 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 572 "View.MemoryView"
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);

#line 572 "View.MemoryView"
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {

#line 572 "View.MemoryView"
    __pyx_t_3 = __pyx_t_5;

#line 572 "View.MemoryView"
    __pyx_v_stride = (__pyx_t_3[0]);

#line 572 "View.MemoryView"
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)

#line 572 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_6);

#line 572 "View.MemoryView"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 572, __pyx_L1_error)

#line 572 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 572 "View.MemoryView"
  }

#line 572 "View.MemoryView"
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 572, __pyx_L1_error)

#line 572 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_6);

#line 572 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 572 "View.MemoryView"
  __pyx_r = __pyx_t_6;

#line 572 "View.MemoryView"
  __pyx_t_6 = 0;

#line 572 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

#line 567 "View.MemoryView"


#line 567 "View.MemoryView"
  /* function exit code */

#line 567 "View.MemoryView"
  __pyx_L1_error:;

#line 567 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 567 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 567 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 567 "View.MemoryView"
  __pyx_r = NULL;

#line 567 "View.MemoryView"
  __pyx_L0:;

#line 567 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 567 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 567 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 567 "View.MemoryView"
  return __pyx_r;

#line 567 "View.MemoryView"
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

#line 575 "View.MemoryView"


#line 575 "View.MemoryView"
/* Python wrapper */

#line 575 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 575 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {

#line 575 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 575 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 575 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 575 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 575 "View.MemoryView"


#line 575 "View.MemoryView"
  /* function exit code */

#line 575 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 575 "View.MemoryView"
  return __pyx_r;

#line 575 "View.MemoryView"
}

#line 575 "View.MemoryView"


#line 575 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset
#line 575 "View.MemoryView"
;

#line 575 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 575 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 575 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 575 "View.MemoryView"
  int __pyx_t_1;

#line 575 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 575 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 575 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 575 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 575 "View.MemoryView"
  Py_ssize_t *__pyx_t_6;

#line 575 "View.MemoryView"
  int __pyx_lineno = 0;

#line 575 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 575 "View.MemoryView"
  int __pyx_clineno = 0;

#line 575 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 575 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 575, 0, __PYX_ERR(1, 575, __pyx_L1_error));

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __Pyx_TraceLine(576,0,__PYX_ERR(1, 576, __pyx_L1_error))

#line 576 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);

#line 576 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_TraceLine(577,0,__PYX_ERR(1, 577, __pyx_L1_error))

#line 577 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 577 "View.MemoryView"
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)

#line 577 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 577 "View.MemoryView"
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__16, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 577, __pyx_L1_error)

#line 577 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 577 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 577 "View.MemoryView"
    __pyx_r = __pyx_t_3;

#line 577 "View.MemoryView"
    __pyx_t_3 = 0;

#line 577 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */

#line 576 "View.MemoryView"
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(579,0,__PYX_ERR(1, 579, __pyx_L1_error))

#line 579 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 579 "View.MemoryView"
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)

#line 579 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 579 "View.MemoryView"
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);

#line 579 "View.MemoryView"
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {

#line 579 "View.MemoryView"
    __pyx_t_4 = __pyx_t_6;

#line 579 "View.MemoryView"
    __pyx_v_suboffset = (__pyx_t_4[0]);

#line 579 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)

#line 579 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 579 "View.MemoryView"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 579, __pyx_L1_error)

#line 579 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 579 "View.MemoryView"
  }

#line 579 "View.MemoryView"
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)

#line 579 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 579 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 579 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 579 "View.MemoryView"
  __pyx_t_2 = 0;

#line 579 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

#line 575 "View.MemoryView"


#line 575 "View.MemoryView"
  /* function exit code */

#line 575 "View.MemoryView"
  __pyx_L1_error:;

#line 575 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 575 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 575 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 575 "View.MemoryView"
  __pyx_r = NULL;

#line 575 "View.MemoryView"
  __pyx_L0:;

#line 575 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 575 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 575 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 575 "View.MemoryView"
  return __pyx_r;

#line 575 "View.MemoryView"
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
/* Python wrapper */

#line 582 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 582 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {

#line 582 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 582 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 582 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 582 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
  /* function exit code */

#line 582 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 582 "View.MemoryView"
  return __pyx_r;

#line 582 "View.MemoryView"
}

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 582 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 582 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 582 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 582 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 582 "View.MemoryView"
  int __pyx_lineno = 0;

#line 582 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 582 "View.MemoryView"
  int __pyx_clineno = 0;

#line 582 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 582 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 582, 0, __PYX_ERR(1, 582, __pyx_L1_error));

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(583,0,__PYX_ERR(1, 583, __pyx_L1_error))

#line 583 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 583 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)

#line 583 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 583 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 583 "View.MemoryView"
  __pyx_t_1 = 0;

#line 583 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

#line 582 "View.MemoryView"


#line 582 "View.MemoryView"
  /* function exit code */

#line 582 "View.MemoryView"
  __pyx_L1_error:;

#line 582 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 582 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 582 "View.MemoryView"
  __pyx_r = NULL;

#line 582 "View.MemoryView"
  __pyx_L0:;

#line 582 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 582 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 582 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 582 "View.MemoryView"
  return __pyx_r;

#line 582 "View.MemoryView"
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

#line 586 "View.MemoryView"


#line 586 "View.MemoryView"
/* Python wrapper */

#line 586 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 586 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {

#line 586 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 586 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 586 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 586 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 586 "View.MemoryView"


#line 586 "View.MemoryView"
  /* function exit code */

#line 586 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 586 "View.MemoryView"
  return __pyx_r;

#line 586 "View.MemoryView"
}

#line 586 "View.MemoryView"


#line 586 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 586 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 586 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 586 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 586 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 586 "View.MemoryView"
  int __pyx_lineno = 0;

#line 586 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 586 "View.MemoryView"
  int __pyx_clineno = 0;

#line 586 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 586 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 586, 0, __PYX_ERR(1, 586, __pyx_L1_error));

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(587,0,__PYX_ERR(1, 587, __pyx_L1_error))

#line 587 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 587 "View.MemoryView"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)

#line 587 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 587 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 587 "View.MemoryView"
  __pyx_t_1 = 0;

#line 587 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

#line 586 "View.MemoryView"


#line 586 "View.MemoryView"
  /* function exit code */

#line 586 "View.MemoryView"
  __pyx_L1_error:;

#line 586 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 586 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 586 "View.MemoryView"
  __pyx_r = NULL;

#line 586 "View.MemoryView"
  __pyx_L0:;

#line 586 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 586 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 586 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 586 "View.MemoryView"
  return __pyx_r;

#line 586 "View.MemoryView"
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

#line 590 "View.MemoryView"


#line 590 "View.MemoryView"
/* Python wrapper */

#line 590 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 590 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {

#line 590 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 590 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 590 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 590 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 590 "View.MemoryView"


#line 590 "View.MemoryView"
  /* function exit code */

#line 590 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 590 "View.MemoryView"
  return __pyx_r;

#line 590 "View.MemoryView"
}

#line 590 "View.MemoryView"


#line 590 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 590 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 590 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 590 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 590 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 590 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 590 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 590 "View.MemoryView"
  int __pyx_lineno = 0;

#line 590 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 590 "View.MemoryView"
  int __pyx_clineno = 0;

#line 590 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 590 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 590, 0, __PYX_ERR(1, 590, __pyx_L1_error));

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(591,0,__PYX_ERR(1, 591, __pyx_L1_error))

#line 591 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 591 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 591 "View.MemoryView"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 591 "View.MemoryView"
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 591, __pyx_L1_error)

#line 591 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 591 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 591 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 591 "View.MemoryView"
  __pyx_r = __pyx_t_3;

#line 591 "View.MemoryView"
  __pyx_t_3 = 0;

#line 591 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

#line 590 "View.MemoryView"


#line 590 "View.MemoryView"
  /* function exit code */

#line 590 "View.MemoryView"
  __pyx_L1_error:;

#line 590 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 590 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 590 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 590 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 590 "View.MemoryView"
  __pyx_r = NULL;

#line 590 "View.MemoryView"
  __pyx_L0:;

#line 590 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 590 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 590 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 590 "View.MemoryView"
  return __pyx_r;

#line 590 "View.MemoryView"
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

#line 594 "View.MemoryView"


#line 594 "View.MemoryView"
/* Python wrapper */

#line 594 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 594 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {

#line 594 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 594 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 594 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 594 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 594 "View.MemoryView"


#line 594 "View.MemoryView"
  /* function exit code */

#line 594 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 594 "View.MemoryView"
  return __pyx_r;

#line 594 "View.MemoryView"
}

#line 594 "View.MemoryView"


#line 594 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL
#line 594 "View.MemoryView"
;
  PyObject *__pyx_v_length = NULL
#line 594 "View.MemoryView"
;

#line 594 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 594 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 594 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 594 "View.MemoryView"
  int __pyx_t_1;

#line 594 "View.MemoryView"
  int __pyx_t_2;

#line 594 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 594 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 594 "View.MemoryView"
  Py_ssize_t *__pyx_t_5;

#line 594 "View.MemoryView"
  PyObject *__pyx_t_6 = NULL;

#line 594 "View.MemoryView"
  int __pyx_lineno = 0;

#line 594 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 594 "View.MemoryView"
  int __pyx_clineno = 0;

#line 594 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 594 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 594, 0, __PYX_ERR(1, 594, __pyx_L1_error));

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __Pyx_TraceLine(595,0,__PYX_ERR(1, 595, __pyx_L1_error))

#line 595 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);

#line 595 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 595 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_TraceLine(596,0,__PYX_ERR(1, 596, __pyx_L1_error))

#line 596 "View.MemoryView"
    __Pyx_INCREF(__pyx_int_1);

#line 596 "View.MemoryView"
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __Pyx_TraceLine(598,0,__PYX_ERR(1, 598, __pyx_L1_error))

#line 598 "View.MemoryView"
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);

#line 598 "View.MemoryView"
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {

#line 598 "View.MemoryView"
      __pyx_t_3 = __pyx_t_5;

#line 598 "View.MemoryView"
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 598, __pyx_L1_error)

#line 598 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 598 "View.MemoryView"
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);

#line 598 "View.MemoryView"
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __Pyx_TraceLine(599,0,__PYX_ERR(1, 599, __pyx_L1_error))

#line 599 "View.MemoryView"
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 599, __pyx_L1_error)

#line 599 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_6);

#line 599 "View.MemoryView"
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);

#line 599 "View.MemoryView"
      __pyx_t_6 = 0;

#line 599 "View.MemoryView"
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_TraceLine(601,0,__PYX_ERR(1, 601, __pyx_L1_error))

#line 601 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_result);

#line 601 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_result);

#line 601 "View.MemoryView"
    __Pyx_GOTREF(__pyx_v_self->_size);

#line 601 "View.MemoryView"
    __Pyx_DECREF(__pyx_v_self->_size);

#line 601 "View.MemoryView"
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */

#line 595 "View.MemoryView"
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_TraceLine(603,0,__PYX_ERR(1, 603, __pyx_L1_error))

#line 603 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 603 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->_size);

#line 603 "View.MemoryView"
  __pyx_r = __pyx_v_self->_size;

#line 603 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

#line 594 "View.MemoryView"


#line 594 "View.MemoryView"
  /* function exit code */

#line 594 "View.MemoryView"
  __pyx_L1_error:;

#line 594 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_6);

#line 594 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 594 "View.MemoryView"
  __pyx_r = NULL;

#line 594 "View.MemoryView"
  __pyx_L0:;

#line 594 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 594 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_length);

#line 594 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 594 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 594 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 594 "View.MemoryView"
  return __pyx_r;

#line 594 "View.MemoryView"
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

#line 605 "View.MemoryView"


#line 605 "View.MemoryView"
/* Python wrapper */

#line 605 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/

#line 605 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {

#line 605 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 605 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 605 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = 
#line 605 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 605 "View.MemoryView"


#line 605 "View.MemoryView"
  /* function exit code */

#line 605 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 605 "View.MemoryView"
  return __pyx_r;

#line 605 "View.MemoryView"
}

#line 605 "View.MemoryView"


#line 605 "View.MemoryView"
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 605 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 605 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 605 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 605 "View.MemoryView"
  int __pyx_t_1;

#line 605 "View.MemoryView"
  int __pyx_lineno = 0;

#line 605 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 605 "View.MemoryView"
  int __pyx_clineno = 0;

#line 605 "View.MemoryView"
  __Pyx_RefNannySetupContext("__len__", 0);

#line 605 "View.MemoryView"
  __Pyx_TraceCall("__len__", __pyx_f[1], 605, 0, __PYX_ERR(1, 605, __pyx_L1_error));

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __Pyx_TraceLine(606,0,__PYX_ERR(1, 606, __pyx_L1_error))

#line 606 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);

#line 606 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __Pyx_TraceLine(607,0,__PYX_ERR(1, 607, __pyx_L1_error))

#line 607 "View.MemoryView"
    __pyx_r = (__pyx_v_self->view.shape[0]);

#line 607 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */

#line 606 "View.MemoryView"
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_TraceLine(609,0,__PYX_ERR(1, 609, __pyx_L1_error))

#line 609 "View.MemoryView"
  __pyx_r = 0;

#line 609 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

#line 605 "View.MemoryView"


#line 605 "View.MemoryView"
  /* function exit code */

#line 605 "View.MemoryView"
  __pyx_L1_error:;

#line 605 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 605 "View.MemoryView"
  __pyx_r = -1;

#line 605 "View.MemoryView"
  __pyx_L0:;

#line 605 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 605 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 605 "View.MemoryView"
  return __pyx_r;

#line 605 "View.MemoryView"
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

#line 611 "View.MemoryView"


#line 611 "View.MemoryView"
/* Python wrapper */

#line 611 "View.MemoryView"
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/

#line 611 "View.MemoryView"
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {

#line 611 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 611 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 611 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = 
#line 611 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 611 "View.MemoryView"


#line 611 "View.MemoryView"
  /* function exit code */

#line 611 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 611 "View.MemoryView"
  return __pyx_r;

#line 611 "View.MemoryView"
}

#line 611 "View.MemoryView"


#line 611 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 611 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 611 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 611 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 611 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 611 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 611 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 611 "View.MemoryView"
  int __pyx_lineno = 0;

#line 611 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 611 "View.MemoryView"
  int __pyx_clineno = 0;

#line 611 "View.MemoryView"
  __Pyx_RefNannySetupContext("__repr__", 0);

#line 611 "View.MemoryView"
  __Pyx_TraceCall("__repr__", __pyx_f[1], 611, 0, __PYX_ERR(1, 611, __pyx_L1_error));

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_TraceLine(612,0,__PYX_ERR(1, 612, __pyx_L1_error))

#line 612 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 612 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)

#line 612 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 612 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)

#line 612 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 612 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 612 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)

#line 612 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 612 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_TraceLine(613,0,__PYX_ERR(1, 613, __pyx_L1_error))

#line 613 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 613, __pyx_L1_error)

#line 613 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_TraceLine(612,0,__PYX_ERR(1, 612, __pyx_L1_error))

#line 612 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 612, __pyx_L1_error)

#line 612 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 612 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 612 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 612 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 612 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);

#line 612 "View.MemoryView"
  __pyx_t_1 = 0;

#line 612 "View.MemoryView"
  __pyx_t_2 = 0;

#line 612 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)

#line 612 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 612 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 612 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 612 "View.MemoryView"
  __pyx_t_2 = 0;

#line 612 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

#line 611 "View.MemoryView"


#line 611 "View.MemoryView"
  /* function exit code */

#line 611 "View.MemoryView"
  __pyx_L1_error:;

#line 611 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 611 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 611 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 611 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 611 "View.MemoryView"
  __pyx_r = NULL;

#line 611 "View.MemoryView"
  __pyx_L0:;

#line 611 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 611 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 611 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 611 "View.MemoryView"
  return __pyx_r;

#line 611 "View.MemoryView"
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

#line 615 "View.MemoryView"


#line 615 "View.MemoryView"
/* Python wrapper */

#line 615 "View.MemoryView"
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/

#line 615 "View.MemoryView"
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {

#line 615 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 615 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 615 "View.MemoryView"
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = 
#line 615 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 615 "View.MemoryView"


#line 615 "View.MemoryView"
  /* function exit code */

#line 615 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 615 "View.MemoryView"
  return __pyx_r;

#line 615 "View.MemoryView"
}

#line 615 "View.MemoryView"


#line 615 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {

#line 615 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 615 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 615 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 615 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 615 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 615 "View.MemoryView"
  int __pyx_lineno = 0;

#line 615 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 615 "View.MemoryView"
  int __pyx_clineno = 0;

#line 615 "View.MemoryView"
  __Pyx_RefNannySetupContext("__str__", 0);

#line 615 "View.MemoryView"
  __Pyx_TraceCall("__str__", __pyx_f[1], 615, 0, __PYX_ERR(1, 615, __pyx_L1_error));

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(616,0,__PYX_ERR(1, 616, __pyx_L1_error))

#line 616 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 616 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)

#line 616 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 616 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)

#line 616 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 616 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 616 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)

#line 616 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 616 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 616 "View.MemoryView"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 616, __pyx_L1_error)

#line 616 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 616 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 616 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 616 "View.MemoryView"
  __pyx_t_1 = 0;

#line 616 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 616, __pyx_L1_error)

#line 616 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 616 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 616 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 616 "View.MemoryView"
  __pyx_t_1 = 0;

#line 616 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

#line 615 "View.MemoryView"


#line 615 "View.MemoryView"
  /* function exit code */

#line 615 "View.MemoryView"
  __pyx_L1_error:;

#line 615 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 615 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 615 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 615 "View.MemoryView"
  __pyx_r = NULL;

#line 615 "View.MemoryView"
  __pyx_L0:;

#line 615 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 615 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 615 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 615 "View.MemoryView"
  return __pyx_r;

#line 615 "View.MemoryView"
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 619 "View.MemoryView"


#line 619 "View.MemoryView"
/* Python wrapper */

#line 619 "View.MemoryView"
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 619 "View.MemoryView"
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 619 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 619 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 619 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = 
#line 619 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 619 "View.MemoryView"


#line 619 "View.MemoryView"
  /* function exit code */

#line 619 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 619 "View.MemoryView"
  return __pyx_r;

#line 619 "View.MemoryView"
}

#line 619 "View.MemoryView"


#line 619 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice
#line 619 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 619 "View.MemoryView"
;

#line 619 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 619 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 619 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 619 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 619 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 619 "View.MemoryView"
  int __pyx_lineno = 0;

#line 619 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 619 "View.MemoryView"
  int __pyx_clineno = 0;

#line 619 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_c_contig", 0);

#line 619 "View.MemoryView"
  __Pyx_TraceCall("is_c_contig", __pyx_f[1], 619, 0, __PYX_ERR(1, 619, __pyx_L1_error));

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __Pyx_TraceLine(622,0,__PYX_ERR(1, 622, __pyx_L1_error))

#line 622 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 622, __pyx_L1_error)

#line 622 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_TraceLine(623,0,__PYX_ERR(1, 623, __pyx_L1_error))

#line 623 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 623 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)

#line 623 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 623 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 623 "View.MemoryView"
  __pyx_t_2 = 0;

#line 623 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 619 "View.MemoryView"


#line 619 "View.MemoryView"
  /* function exit code */

#line 619 "View.MemoryView"
  __pyx_L1_error:;

#line 619 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 619 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 619 "View.MemoryView"
  __pyx_r = NULL;

#line 619 "View.MemoryView"
  __pyx_L0:;

#line 619 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 619 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 619 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 619 "View.MemoryView"
  return __pyx_r;

#line 619 "View.MemoryView"
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 625 "View.MemoryView"


#line 625 "View.MemoryView"
/* Python wrapper */

#line 625 "View.MemoryView"
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 625 "View.MemoryView"
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 625 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 625 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 625 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = 
#line 625 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 625 "View.MemoryView"


#line 625 "View.MemoryView"
  /* function exit code */

#line 625 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 625 "View.MemoryView"
  return __pyx_r;

#line 625 "View.MemoryView"
}

#line 625 "View.MemoryView"


#line 625 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice
#line 625 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 625 "View.MemoryView"
;

#line 625 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 625 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 625 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 625 "View.MemoryView"
  __Pyx_memviewslice *__pyx_t_1;

#line 625 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 625 "View.MemoryView"
  int __pyx_lineno = 0;

#line 625 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 625 "View.MemoryView"
  int __pyx_clineno = 0;

#line 625 "View.MemoryView"
  __Pyx_RefNannySetupContext("is_f_contig", 0);

#line 625 "View.MemoryView"
  __Pyx_TraceCall("is_f_contig", __pyx_f[1], 625, 0, __PYX_ERR(1, 625, __pyx_L1_error));

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __Pyx_TraceLine(628,0,__PYX_ERR(1, 628, __pyx_L1_error))

#line 628 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 628, __pyx_L1_error)

#line 628 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_TraceLine(629,0,__PYX_ERR(1, 629, __pyx_L1_error))

#line 629 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 629 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 629, __pyx_L1_error)

#line 629 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 629 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 629 "View.MemoryView"
  __pyx_t_2 = 0;

#line 629 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

#line 625 "View.MemoryView"


#line 625 "View.MemoryView"
  /* function exit code */

#line 625 "View.MemoryView"
  __pyx_L1_error:;

#line 625 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 625 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 625 "View.MemoryView"
  __pyx_r = NULL;

#line 625 "View.MemoryView"
  __pyx_L0:;

#line 625 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 625 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 625 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 625 "View.MemoryView"
  return __pyx_r;

#line 625 "View.MemoryView"
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

#line 631 "View.MemoryView"


#line 631 "View.MemoryView"
/* Python wrapper */

#line 631 "View.MemoryView"
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 631 "View.MemoryView"
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 631 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 631 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 631 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = 
#line 631 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 631 "View.MemoryView"


#line 631 "View.MemoryView"
  /* function exit code */

#line 631 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 631 "View.MemoryView"
  return __pyx_r;

#line 631 "View.MemoryView"
}

#line 631 "View.MemoryView"


#line 631 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice
#line 631 "View.MemoryView"
;
  int __pyx_v_flags
#line 631 "View.MemoryView"
;

#line 631 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 631 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 631 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 631 "View.MemoryView"
  __Pyx_memviewslice __pyx_t_1;

#line 631 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 631 "View.MemoryView"
  int __pyx_lineno = 0;

#line 631 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 631 "View.MemoryView"
  int __pyx_clineno = 0;

#line 631 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy", 0);

#line 631 "View.MemoryView"
  __Pyx_TraceCall("copy", __pyx_f[1], 631, 0, __PYX_ERR(1, 631, __pyx_L1_error));

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __Pyx_TraceLine(633,0,__PYX_ERR(1, 633, __pyx_L1_error))

#line 633 "View.MemoryView"
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __Pyx_TraceLine(635,0,__PYX_ERR(1, 635, __pyx_L1_error))

#line 635 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __Pyx_TraceLine(636,0,__PYX_ERR(1, 636, __pyx_L1_error))

#line 636 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)

#line 636 "View.MemoryView"
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_TraceLine(641,0,__PYX_ERR(1, 641, __pyx_L1_error))

#line 641 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 641 "View.MemoryView"
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 641, __pyx_L1_error)

#line 641 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 641 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 641 "View.MemoryView"
  __pyx_t_2 = 0;

#line 641 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

#line 631 "View.MemoryView"


#line 631 "View.MemoryView"
  /* function exit code */

#line 631 "View.MemoryView"
  __pyx_L1_error:;

#line 631 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 631 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 631 "View.MemoryView"
  __pyx_r = NULL;

#line 631 "View.MemoryView"
  __pyx_L0:;

#line 631 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 631 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 631 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 631 "View.MemoryView"
  return __pyx_r;

#line 631 "View.MemoryView"
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

#line 643 "View.MemoryView"


#line 643 "View.MemoryView"
/* Python wrapper */

#line 643 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 643 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 643 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 643 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 643 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = 
#line 643 "View.MemoryView"
__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 643 "View.MemoryView"


#line 643 "View.MemoryView"
  /* function exit code */

#line 643 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 643 "View.MemoryView"
  return __pyx_r;

#line 643 "View.MemoryView"
}

#line 643 "View.MemoryView"


#line 643 "View.MemoryView"
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src
#line 643 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_dst
#line 643 "View.MemoryView"
;
  int __pyx_v_flags
#line 643 "View.MemoryView"
;

#line 643 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 643 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 643 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 643 "View.MemoryView"
  __Pyx_memviewslice __pyx_t_1;

#line 643 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 643 "View.MemoryView"
  int __pyx_lineno = 0;

#line 643 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 643 "View.MemoryView"
  int __pyx_clineno = 0;

#line 643 "View.MemoryView"
  __Pyx_RefNannySetupContext("copy_fortran", 0);

#line 643 "View.MemoryView"
  __Pyx_TraceCall("copy_fortran", __pyx_f[1], 643, 0, __PYX_ERR(1, 643, __pyx_L1_error));

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __Pyx_TraceLine(645,0,__PYX_ERR(1, 645, __pyx_L1_error))

#line 645 "View.MemoryView"
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __Pyx_TraceLine(647,0,__PYX_ERR(1, 647, __pyx_L1_error))

#line 647 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __Pyx_TraceLine(648,0,__PYX_ERR(1, 648, __pyx_L1_error))

#line 648 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 648, __pyx_L1_error)

#line 648 "View.MemoryView"
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(653,0,__PYX_ERR(1, 653, __pyx_L1_error))

#line 653 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 653 "View.MemoryView"
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 653, __pyx_L1_error)

#line 653 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 653 "View.MemoryView"
  __pyx_r = __pyx_t_2;

#line 653 "View.MemoryView"
  __pyx_t_2 = 0;

#line 653 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

#line 643 "View.MemoryView"


#line 643 "View.MemoryView"
  /* function exit code */

#line 643 "View.MemoryView"
  __pyx_L1_error:;

#line 643 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 643 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 643 "View.MemoryView"
  __pyx_r = NULL;

#line 643 "View.MemoryView"
  __pyx_L0:;

#line 643 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 643 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 643 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 643 "View.MemoryView"
  return __pyx_r;

#line 643 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

#line 3 "(tree fragment)"
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

#line 657 "View.MemoryView"


#line 657 "View.MemoryView"
static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0
#line 657 "View.MemoryView"
;

#line 657 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 657 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 657 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 657 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 657 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 657 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 657 "View.MemoryView"
  int __pyx_lineno = 0;

#line 657 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 657 "View.MemoryView"
  int __pyx_clineno = 0;

#line 657 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

#line 657 "View.MemoryView"
  __Pyx_TraceCall("memoryview_cwrapper", __pyx_f[1], 657, 0, __PYX_ERR(1, 657, __pyx_L1_error));

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __Pyx_TraceLine(658,0,__PYX_ERR(1, 658, __pyx_L1_error))

#line 658 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 658, __pyx_L1_error)

#line 658 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 658 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)

#line 658 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 658 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 658, __pyx_L1_error)

#line 658 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 658 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_o);

#line 658 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_v_o);

#line 658 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);

#line 658 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 658 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 658 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 658 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 658 "View.MemoryView"
  __pyx_t_1 = 0;

#line 658 "View.MemoryView"
  __pyx_t_2 = 0;

#line 658 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)

#line 658 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 658 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 658 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);

#line 658 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_TraceLine(659,0,__PYX_ERR(1, 659, __pyx_L1_error))

#line 659 "View.MemoryView"
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_TraceLine(660,0,__PYX_ERR(1, 660, __pyx_L1_error))

#line 660 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 660 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_result));

#line 660 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 660 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

#line 657 "View.MemoryView"


#line 657 "View.MemoryView"
  /* function exit code */

#line 657 "View.MemoryView"
  __pyx_L1_error:;

#line 657 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 657 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 657 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 657 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 657 "View.MemoryView"
  __pyx_r = 0;

#line 657 "View.MemoryView"
  __pyx_L0:;

#line 657 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 657 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 657 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 657 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 657 "View.MemoryView"
  return __pyx_r;

#line 657 "View.MemoryView"
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

#line 663 "View.MemoryView"


#line 663 "View.MemoryView"
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {

#line 663 "View.MemoryView"
  int __pyx_r;

#line 663 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 663 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 663 "View.MemoryView"
  int __pyx_t_1;

#line 663 "View.MemoryView"
  int __pyx_lineno = 0;

#line 663 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 663 "View.MemoryView"
  int __pyx_clineno = 0;

#line 663 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_check", 0);

#line 663 "View.MemoryView"
  __Pyx_TraceCall("memoryview_check", __pyx_f[1], 663, 0, __PYX_ERR(1, 663, __pyx_L1_error));

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __Pyx_TraceLine(664,0,__PYX_ERR(1, 664, __pyx_L1_error))

#line 664 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 

#line 664 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 664 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

#line 663 "View.MemoryView"


#line 663 "View.MemoryView"
  /* function exit code */

#line 663 "View.MemoryView"
  __pyx_L1_error:;

#line 663 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.memoryview_check", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 663 "View.MemoryView"
  __pyx_r = 0;

#line 663 "View.MemoryView"
  __pyx_L0:;

#line 663 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 663 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 663 "View.MemoryView"
  return __pyx_r;

#line 663 "View.MemoryView"
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL
#line 666 "View.MemoryView"
;
  PyObject *__pyx_v_result = NULL
#line 666 "View.MemoryView"
;
  int __pyx_v_have_slices
#line 666 "View.MemoryView"
;
  int __pyx_v_seen_ellipsis
#line 666 "View.MemoryView"
;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL
#line 666 "View.MemoryView"
;
  PyObject *__pyx_v_item = NULL
#line 666 "View.MemoryView"
;
  Py_ssize_t __pyx_v_nslices
#line 666 "View.MemoryView"
;

#line 666 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 666 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 666 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 666 "View.MemoryView"
  int __pyx_t_1;

#line 666 "View.MemoryView"
  int __pyx_t_2;

#line 666 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 666 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 666 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 666 "View.MemoryView"
  PyObject *(*__pyx_t_6)(PyObject *);

#line 666 "View.MemoryView"
  PyObject *__pyx_t_7 = NULL;

#line 666 "View.MemoryView"
  Py_ssize_t __pyx_t_8;

#line 666 "View.MemoryView"
  int __pyx_t_9;

#line 666 "View.MemoryView"
  int __pyx_t_10;

#line 666 "View.MemoryView"
  PyObject *__pyx_t_11 = NULL;

#line 666 "View.MemoryView"
  int __pyx_lineno = 0;

#line 666 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 666 "View.MemoryView"
  int __pyx_clineno = 0;

#line 666 "View.MemoryView"
  __Pyx_RefNannySetupContext("_unellipsify", 0);

#line 666 "View.MemoryView"
  __Pyx_TraceCall("_unellipsify", __pyx_f[1], 666, 0, __PYX_ERR(1, 666, __pyx_L1_error));

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __Pyx_TraceLine(671,0,__PYX_ERR(1, 671, __pyx_L1_error))

#line 671 "View.MemoryView"
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 

#line 671 "View.MemoryView"
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);

#line 671 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __Pyx_TraceLine(672,0,__PYX_ERR(1, 672, __pyx_L1_error))

#line 672 "View.MemoryView"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)

#line 672 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 672 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_index);

#line 672 "View.MemoryView"
    __Pyx_GIVEREF(__pyx_v_index);

#line 672 "View.MemoryView"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);

#line 672 "View.MemoryView"
    __pyx_v_tup = __pyx_t_3;

#line 672 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */

#line 671 "View.MemoryView"
    goto __pyx_L3;

#line 671 "View.MemoryView"
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  __Pyx_TraceLine(674,0,__PYX_ERR(1, 674, __pyx_L1_error))

#line 674 "View.MemoryView"
  /*else*/ {

#line 674 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_index);

#line 674 "View.MemoryView"
    __pyx_v_tup = __pyx_v_index;

#line 674 "View.MemoryView"
  }

#line 674 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __Pyx_TraceLine(676,0,__PYX_ERR(1, 676, __pyx_L1_error))

#line 676 "View.MemoryView"
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 676, __pyx_L1_error)

#line 676 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 676 "View.MemoryView"
  __pyx_v_result = ((PyObject*)__pyx_t_3);

#line 676 "View.MemoryView"
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __Pyx_TraceLine(677,0,__PYX_ERR(1, 677, __pyx_L1_error))

#line 677 "View.MemoryView"
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __Pyx_TraceLine(678,0,__PYX_ERR(1, 678, __pyx_L1_error))

#line 678 "View.MemoryView"
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_TraceLine(679,0,__PYX_ERR(1, 679, __pyx_L1_error))

#line 679 "View.MemoryView"
  __Pyx_INCREF(__pyx_int_0);

#line 679 "View.MemoryView"
  __pyx_t_3 = __pyx_int_0;

#line 679 "View.MemoryView"
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {

#line 679 "View.MemoryView"
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;

#line 679 "View.MemoryView"
    __pyx_t_6 = NULL;

#line 679 "View.MemoryView"
  } else {
    __pyx_t_5 = -1; 
#line 679 "View.MemoryView"
__pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 679 "View.MemoryView"
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
  }

#line 679 "View.MemoryView"
  for (;;) {

#line 679 "View.MemoryView"
    if (likely(!__pyx_t_6)) {

#line 679 "View.MemoryView"
      if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 679 "View.MemoryView"
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 679 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 679 "View.MemoryView"
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
        #else

#line 679 "View.MemoryView"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 679 "View.MemoryView"
        #endif

#line 679 "View.MemoryView"
      } else {

#line 679 "View.MemoryView"
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 679 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 679 "View.MemoryView"
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
        #else

#line 679 "View.MemoryView"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 679 "View.MemoryView"
        #endif

#line 679 "View.MemoryView"
      }
    } else 
#line 679 "View.MemoryView"
{

#line 679 "View.MemoryView"
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);

#line 679 "View.MemoryView"
      if (unlikely(!__pyx_t_7)) {

#line 679 "View.MemoryView"
        PyObject* exc_type = PyErr_Occurred();

#line 679 "View.MemoryView"
        if (exc_type) {

#line 679 "View.MemoryView"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 679 "View.MemoryView"
          else __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
        }

#line 679 "View.MemoryView"
        break;

#line 679 "View.MemoryView"
      }

#line 679 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_7);

#line 679 "View.MemoryView"
    }

#line 679 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);

#line 679 "View.MemoryView"
    __pyx_t_7 = 0;

#line 679 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 679 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);

#line 679 "View.MemoryView"
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 679, __pyx_L1_error)

#line 679 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_7);

#line 679 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3);

#line 679 "View.MemoryView"
    __pyx_t_3 = __pyx_t_7;

#line 679 "View.MemoryView"
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __Pyx_TraceLine(680,0,__PYX_ERR(1, 680, __pyx_L1_error))

#line 680 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);

#line 680 "View.MemoryView"
    __pyx_t_1 = (__pyx_t_2 != 0);

#line 680 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __Pyx_TraceLine(681,0,__PYX_ERR(1, 681, __pyx_L1_error))

#line 681 "View.MemoryView"
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);

#line 681 "View.MemoryView"
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __Pyx_TraceLine(682,0,__PYX_ERR(1, 682, __pyx_L1_error))

#line 682 "View.MemoryView"
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 682, __pyx_L1_error)

#line 682 "View.MemoryView"
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 682, __pyx_L1_error)

#line 682 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 682 "View.MemoryView"
        { Py_ssize_t __pyx_temp;

#line 682 "View.MemoryView"
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {

#line 682 "View.MemoryView"
            __Pyx_INCREF(__pyx_slice__19);

#line 682 "View.MemoryView"
            __Pyx_GIVEREF(__pyx_slice__19);

#line 682 "View.MemoryView"
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__19);

#line 682 "View.MemoryView"
          }

#line 682 "View.MemoryView"
        }

#line 682 "View.MemoryView"
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 682, __pyx_L1_error)

#line 682 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __Pyx_TraceLine(683,0,__PYX_ERR(1, 683, __pyx_L1_error))

#line 683 "View.MemoryView"
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */

#line 681 "View.MemoryView"
        goto __pyx_L7;

#line 681 "View.MemoryView"
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      __Pyx_TraceLine(685,0,__PYX_ERR(1, 685, __pyx_L1_error))

#line 685 "View.MemoryView"
      /*else*/ {

#line 685 "View.MemoryView"
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__19); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 685, __pyx_L1_error)

#line 685 "View.MemoryView"
      }

#line 685 "View.MemoryView"
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __Pyx_TraceLine(686,0,__PYX_ERR(1, 686, __pyx_L1_error))

#line 686 "View.MemoryView"
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */

#line 680 "View.MemoryView"
      goto __pyx_L6;

#line 680 "View.MemoryView"
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    __Pyx_TraceLine(688,0,__PYX_ERR(1, 688, __pyx_L1_error))

#line 688 "View.MemoryView"
    /*else*/ {

#line 688 "View.MemoryView"
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 

#line 688 "View.MemoryView"
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);

#line 688 "View.MemoryView"
      if (__pyx_t_10) {

#line 688 "View.MemoryView"
      } else {

#line 688 "View.MemoryView"
        __pyx_t_1 = __pyx_t_10;

#line 688 "View.MemoryView"
        goto __pyx_L9_bool_binop_done;

#line 688 "View.MemoryView"
      }

#line 688 "View.MemoryView"
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);

#line 688 "View.MemoryView"
      __pyx_t_1 = __pyx_t_10;

#line 688 "View.MemoryView"
      __pyx_L9_bool_binop_done:;

#line 688 "View.MemoryView"
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __Pyx_TraceLine(689,0,__PYX_ERR(1, 689, __pyx_L1_error))

#line 689 "View.MemoryView"
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 689, __pyx_L1_error)

#line 689 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_7);

#line 689 "View.MemoryView"
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 689, __pyx_L1_error)

#line 689 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_11);

#line 689 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 689 "View.MemoryView"
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);

#line 689 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 689 "View.MemoryView"
        __PYX_ERR(1, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */

#line 688 "View.MemoryView"
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __Pyx_TraceLine(691,0,__PYX_ERR(1, 691, __pyx_L1_error))

#line 691 "View.MemoryView"
      __pyx_t_10 = (__pyx_v_have_slices != 0);

#line 691 "View.MemoryView"
      if (!__pyx_t_10) {

#line 691 "View.MemoryView"
      } else {

#line 691 "View.MemoryView"
        __pyx_t_1 = __pyx_t_10;

#line 691 "View.MemoryView"
        goto __pyx_L11_bool_binop_done;

#line 691 "View.MemoryView"
      }

#line 691 "View.MemoryView"
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 

#line 691 "View.MemoryView"
      __pyx_t_2 = (__pyx_t_10 != 0);

#line 691 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 691 "View.MemoryView"
      __pyx_L11_bool_binop_done:;

#line 691 "View.MemoryView"
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __Pyx_TraceLine(692,0,__PYX_ERR(1, 692, __pyx_L1_error))

#line 692 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)

#line 692 "View.MemoryView"
    }

#line 692 "View.MemoryView"
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
    __Pyx_TraceLine(679,0,__PYX_ERR(1, 679, __pyx_L1_error))

#line 679 "View.MemoryView"
  }

#line 679 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 679 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __Pyx_TraceLine(694,0,__PYX_ERR(1, 694, __pyx_L1_error))

#line 694 "View.MemoryView"
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 694, __pyx_L1_error)

#line 694 "View.MemoryView"
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __Pyx_TraceLine(695,0,__PYX_ERR(1, 695, __pyx_L1_error))

#line 695 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_nslices != 0);

#line 695 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __Pyx_TraceLine(696,0,__PYX_ERR(1, 696, __pyx_L1_error))

#line 696 "View.MemoryView"
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 696, __pyx_L1_error)

#line 696 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 696 "View.MemoryView"
    { Py_ssize_t __pyx_temp;

#line 696 "View.MemoryView"
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {

#line 696 "View.MemoryView"
        __Pyx_INCREF(__pyx_slice__19);

#line 696 "View.MemoryView"
        __Pyx_GIVEREF(__pyx_slice__19);

#line 696 "View.MemoryView"
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__19);

#line 696 "View.MemoryView"
      }

#line 696 "View.MemoryView"
    }

#line 696 "View.MemoryView"
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 696, __pyx_L1_error)

#line 696 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */

#line 695 "View.MemoryView"
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_TraceLine(698,0,__PYX_ERR(1, 698, __pyx_L1_error))

#line 698 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 698 "View.MemoryView"
  if (!__pyx_v_have_slices) {

#line 698 "View.MemoryView"
  } else {

#line 698 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)

#line 698 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 698 "View.MemoryView"
    __pyx_t_3 = __pyx_t_4;

#line 698 "View.MemoryView"
    __pyx_t_4 = 0;

#line 698 "View.MemoryView"
    goto __pyx_L14_bool_binop_done;

#line 698 "View.MemoryView"
  }

#line 698 "View.MemoryView"
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)

#line 698 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 698 "View.MemoryView"
  __pyx_t_3 = __pyx_t_4;

#line 698 "View.MemoryView"
  __pyx_t_4 = 0;

#line 698 "View.MemoryView"
  __pyx_L14_bool_binop_done:;

#line 698 "View.MemoryView"
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 698, __pyx_L1_error)

#line 698 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 698 "View.MemoryView"
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 698, __pyx_L1_error)

#line 698 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_11);

#line 698 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_3);

#line 698 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);

#line 698 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_4);

#line 698 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);

#line 698 "View.MemoryView"
  __pyx_t_3 = 0;

#line 698 "View.MemoryView"
  __pyx_t_4 = 0;

#line 698 "View.MemoryView"
  __pyx_r = ((PyObject*)__pyx_t_11);

#line 698 "View.MemoryView"
  __pyx_t_11 = 0;

#line 698 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

#line 666 "View.MemoryView"


#line 666 "View.MemoryView"
  /* function exit code */

#line 666 "View.MemoryView"
  __pyx_L1_error:;

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_7);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_11);

#line 666 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 666 "View.MemoryView"
  __pyx_r = 0;

#line 666 "View.MemoryView"
  __pyx_L0:;

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_tup);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_result);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_idx);

#line 666 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_item);

#line 666 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 666 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 666 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 666 "View.MemoryView"
  return __pyx_r;

#line 666 "View.MemoryView"
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

#line 700 "View.MemoryView"


#line 700 "View.MemoryView"
static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset
#line 700 "View.MemoryView"
;

#line 700 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 700 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 700 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 700 "View.MemoryView"
  Py_ssize_t *__pyx_t_1;

#line 700 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 700 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 700 "View.MemoryView"
  int __pyx_t_4;

#line 700 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 700 "View.MemoryView"
  int __pyx_lineno = 0;

#line 700 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 700 "View.MemoryView"
  int __pyx_clineno = 0;

#line 700 "View.MemoryView"
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

#line 700 "View.MemoryView"
  __Pyx_TraceCall("assert_direct_dimensions", __pyx_f[1], 700, 0, __PYX_ERR(1, 700, __pyx_L1_error));

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __Pyx_TraceLine(701,0,__PYX_ERR(1, 701, __pyx_L1_error))

#line 701 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);

#line 701 "View.MemoryView"
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {

#line 701 "View.MemoryView"
    __pyx_t_1 = __pyx_t_3;

#line 701 "View.MemoryView"
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __Pyx_TraceLine(702,0,__PYX_ERR(1, 702, __pyx_L1_error))

#line 702 "View.MemoryView"
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);

#line 702 "View.MemoryView"
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_TraceLine(703,0,__PYX_ERR(1, 703, __pyx_L1_error))

#line 703 "View.MemoryView"
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 703, __pyx_L1_error)

#line 703 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_5);

#line 703 "View.MemoryView"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 703 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 703 "View.MemoryView"
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */

#line 702 "View.MemoryView"
    }

#line 702 "View.MemoryView"
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

#line 700 "View.MemoryView"


#line 700 "View.MemoryView"
  /* function exit code */

#line 700 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 700 "View.MemoryView"
  goto __pyx_L0;

#line 700 "View.MemoryView"
  __pyx_L1_error:;

#line 700 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 700 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 700 "View.MemoryView"
  __pyx_r = 0;

#line 700 "View.MemoryView"
  __pyx_L0:;

#line 700 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 700 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 700 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 700 "View.MemoryView"
  return __pyx_r;

#line 700 "View.MemoryView"
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

#line 710 "View.MemoryView"


#line 710 "View.MemoryView"
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim
#line 710 "View.MemoryView"
;
  int __pyx_v_suboffset_dim
#line 710 "View.MemoryView"
;
  int __pyx_v_dim
#line 710 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_src
#line 710 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_dst
#line 710 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_p_src
#line 710 "View.MemoryView"
;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0
#line 710 "View.MemoryView"
;
  __Pyx_memviewslice *__pyx_v_p_dst
#line 710 "View.MemoryView"
;
  int *__pyx_v_p_suboffset_dim
#line 710 "View.MemoryView"
;
  Py_ssize_t __pyx_v_start
#line 710 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stop
#line 710 "View.MemoryView"
;
  Py_ssize_t __pyx_v_step
#line 710 "View.MemoryView"
;
  int __pyx_v_have_start
#line 710 "View.MemoryView"
;
  int __pyx_v_have_stop
#line 710 "View.MemoryView"
;
  int __pyx_v_have_step
#line 710 "View.MemoryView"
;
  PyObject *__pyx_v_index = NULL
#line 710 "View.MemoryView"
;

#line 710 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_r = NULL;

#line 710 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 710 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 710 "View.MemoryView"
  int __pyx_t_1;

#line 710 "View.MemoryView"
  int __pyx_t_2;

#line 710 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 710 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_t_4;

#line 710 "View.MemoryView"
  char *__pyx_t_5;

#line 710 "View.MemoryView"
  int __pyx_t_6;

#line 710 "View.MemoryView"
  Py_ssize_t __pyx_t_7;

#line 710 "View.MemoryView"
  PyObject *(*__pyx_t_8)(PyObject *);

#line 710 "View.MemoryView"
  PyObject *__pyx_t_9 = NULL;

#line 710 "View.MemoryView"
  Py_ssize_t __pyx_t_10;

#line 710 "View.MemoryView"
  int __pyx_t_11;

#line 710 "View.MemoryView"
  Py_ssize_t __pyx_t_12;

#line 710 "View.MemoryView"
  int __pyx_lineno = 0;

#line 710 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 710 "View.MemoryView"
  int __pyx_clineno = 0;

#line 710 "View.MemoryView"
  __Pyx_RefNannySetupContext("memview_slice", 0);

#line 710 "View.MemoryView"
  __Pyx_TraceCall("memview_slice", __pyx_f[1], 710, 0, __PYX_ERR(1, 710, __pyx_L1_error));

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __Pyx_TraceLine(711,0,__PYX_ERR(1, 711, __pyx_L1_error))

#line 711 "View.MemoryView"
  __pyx_v_new_ndim = 0;

#line 711 "View.MemoryView"
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  __Pyx_TraceLine(718,0,__PYX_ERR(1, 718, __pyx_L1_error))

#line 718 "View.MemoryView"
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  __Pyx_TraceLine(722,0,__PYX_ERR(1, 722, __pyx_L1_error))

#line 722 "View.MemoryView"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 722 "View.MemoryView"
  if (unlikely(!Py_OptimizeFlag)) {

#line 722 "View.MemoryView"
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {

#line 722 "View.MemoryView"
      PyErr_SetNone(PyExc_AssertionError);

#line 722 "View.MemoryView"
      __PYX_ERR(1, 722, __pyx_L1_error)

#line 722 "View.MemoryView"
    }

#line 722 "View.MemoryView"
  }

#line 722 "View.MemoryView"
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __Pyx_TraceLine(724,0,__PYX_ERR(1, 724, __pyx_L1_error))

#line 724 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 724 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 724 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    __Pyx_TraceLine(725,0,__PYX_ERR(1, 725, __pyx_L1_error))

#line 725 "View.MemoryView"
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 725, __pyx_L1_error)

#line 725 "View.MemoryView"
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);

#line 725 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 725 "View.MemoryView"
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);

#line 725 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __Pyx_TraceLine(726,0,__PYX_ERR(1, 726, __pyx_L1_error))

#line 726 "View.MemoryView"
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */

#line 724 "View.MemoryView"
    goto __pyx_L3;

#line 724 "View.MemoryView"
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  __Pyx_TraceLine(728,0,__PYX_ERR(1, 728, __pyx_L1_error))

#line 728 "View.MemoryView"
  /*else*/ {

#line 728 "View.MemoryView"
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(729,0,__PYX_ERR(1, 729, __pyx_L1_error))

#line 729 "View.MemoryView"
    __pyx_v_p_src = (&__pyx_v_src);

#line 729 "View.MemoryView"
  }

#line 729 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __Pyx_TraceLine(735,0,__PYX_ERR(1, 735, __pyx_L1_error))

#line 735 "View.MemoryView"
  __pyx_t_4 = __pyx_v_p_src->memview;

#line 735 "View.MemoryView"
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(736,0,__PYX_ERR(1, 736, __pyx_L1_error))

#line 736 "View.MemoryView"
  __pyx_t_5 = __pyx_v_p_src->data;

#line 736 "View.MemoryView"
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __Pyx_TraceLine(741,0,__PYX_ERR(1, 741, __pyx_L1_error))

#line 741 "View.MemoryView"
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __Pyx_TraceLine(742,0,__PYX_ERR(1, 742, __pyx_L1_error))

#line 742 "View.MemoryView"
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __Pyx_TraceLine(746,0,__PYX_ERR(1, 746, __pyx_L1_error))

#line 746 "View.MemoryView"
  __pyx_t_6 = 0;

#line 746 "View.MemoryView"
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {

#line 746 "View.MemoryView"
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;

#line 746 "View.MemoryView"
    __pyx_t_8 = NULL;

#line 746 "View.MemoryView"
  } else {
    __pyx_t_7 = -1; 
#line 746 "View.MemoryView"
__pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 746 "View.MemoryView"
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
  }

#line 746 "View.MemoryView"
  for (;;) {

#line 746 "View.MemoryView"
    if (likely(!__pyx_t_8)) {

#line 746 "View.MemoryView"
      if (likely(PyList_CheckExact(__pyx_t_3))) {

#line 746 "View.MemoryView"
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 746 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 746 "View.MemoryView"
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
        #else

#line 746 "View.MemoryView"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_9);

#line 746 "View.MemoryView"
        #endif

#line 746 "View.MemoryView"
      } else {

#line 746 "View.MemoryView"
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 746 "View.MemoryView"
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS

#line 746 "View.MemoryView"
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
        #else

#line 746 "View.MemoryView"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
        __Pyx_GOTREF(__pyx_t_9);

#line 746 "View.MemoryView"
        #endif

#line 746 "View.MemoryView"
      }
    } else 
#line 746 "View.MemoryView"
{

#line 746 "View.MemoryView"
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);

#line 746 "View.MemoryView"
      if (unlikely(!__pyx_t_9)) {

#line 746 "View.MemoryView"
        PyObject* exc_type = PyErr_Occurred();

#line 746 "View.MemoryView"
        if (exc_type) {

#line 746 "View.MemoryView"
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 746 "View.MemoryView"
          else __PYX_ERR(1, 746, __pyx_L1_error)

#line 746 "View.MemoryView"
        }

#line 746 "View.MemoryView"
        break;

#line 746 "View.MemoryView"
      }

#line 746 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 746 "View.MemoryView"
    }

#line 746 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);

#line 746 "View.MemoryView"
    __pyx_t_9 = 0;

#line 746 "View.MemoryView"
    __pyx_v_dim = __pyx_t_6;

#line 746 "View.MemoryView"
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __Pyx_TraceLine(747,0,__PYX_ERR(1, 747, __pyx_L1_error))

#line 747 "View.MemoryView"
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);

#line 747 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __Pyx_TraceLine(751,0,__PYX_ERR(1, 751, __pyx_L1_error))

#line 751 "View.MemoryView"
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __Pyx_TraceLine(748,0,__PYX_ERR(1, 748, __pyx_L1_error))

#line 748 "View.MemoryView"
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */

#line 747 "View.MemoryView"
      goto __pyx_L6;

#line 747 "View.MemoryView"
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __Pyx_TraceLine(754,0,__PYX_ERR(1, 754, __pyx_L1_error))

#line 754 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_index == Py_None);

#line 754 "View.MemoryView"
    __pyx_t_1 = (__pyx_t_2 != 0);

#line 754 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      __Pyx_TraceLine(755,0,__PYX_ERR(1, 755, __pyx_L1_error))

#line 755 "View.MemoryView"
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      __Pyx_TraceLine(756,0,__PYX_ERR(1, 756, __pyx_L1_error))

#line 756 "View.MemoryView"
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      __Pyx_TraceLine(757,0,__PYX_ERR(1, 757, __pyx_L1_error))

#line 757 "View.MemoryView"
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __Pyx_TraceLine(758,0,__PYX_ERR(1, 758, __pyx_L1_error))

#line 758 "View.MemoryView"
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */

#line 754 "View.MemoryView"
      goto __pyx_L6;

#line 754 "View.MemoryView"
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    __Pyx_TraceLine(760,0,__PYX_ERR(1, 760, __pyx_L1_error))

#line 760 "View.MemoryView"
    /*else*/ {

#line 760 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)

#line 760 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 760 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 760, __pyx_L1_error)

#line 760 "View.MemoryView"
      if (!__pyx_t_1) {

#line 760 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 760 "View.MemoryView"
      } else {

#line 760 "View.MemoryView"
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 760, __pyx_L1_error)

#line 760 "View.MemoryView"
        __pyx_t_10 = __pyx_t_12;

#line 760 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 760 "View.MemoryView"
        goto __pyx_L7_bool_binop_done;

#line 760 "View.MemoryView"
      }

#line 760 "View.MemoryView"
      __pyx_t_10 = 0;

#line 760 "View.MemoryView"
      __pyx_L7_bool_binop_done:;

#line 760 "View.MemoryView"
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __Pyx_TraceLine(761,0,__PYX_ERR(1, 761, __pyx_L1_error))

#line 761 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)

#line 761 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 761 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 761, __pyx_L1_error)

#line 761 "View.MemoryView"
      if (!__pyx_t_1) {

#line 761 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 761 "View.MemoryView"
      } else {

#line 761 "View.MemoryView"
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 761, __pyx_L1_error)

#line 761 "View.MemoryView"
        __pyx_t_10 = __pyx_t_12;

#line 761 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 761 "View.MemoryView"
        goto __pyx_L9_bool_binop_done;

#line 761 "View.MemoryView"
      }

#line 761 "View.MemoryView"
      __pyx_t_10 = 0;

#line 761 "View.MemoryView"
      __pyx_L9_bool_binop_done:;

#line 761 "View.MemoryView"
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __Pyx_TraceLine(762,0,__PYX_ERR(1, 762, __pyx_L1_error))

#line 762 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)

#line 762 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 762 "View.MemoryView"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)

#line 762 "View.MemoryView"
      if (!__pyx_t_1) {

#line 762 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 762 "View.MemoryView"
      } else {

#line 762 "View.MemoryView"
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)

#line 762 "View.MemoryView"
        __pyx_t_10 = __pyx_t_12;

#line 762 "View.MemoryView"
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 762 "View.MemoryView"
        goto __pyx_L11_bool_binop_done;

#line 762 "View.MemoryView"
      }

#line 762 "View.MemoryView"
      __pyx_t_10 = 0;

#line 762 "View.MemoryView"
      __pyx_L11_bool_binop_done:;

#line 762 "View.MemoryView"
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __Pyx_TraceLine(764,0,__PYX_ERR(1, 764, __pyx_L1_error))

#line 764 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)

#line 764 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 764 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_9 != Py_None);

#line 764 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 764 "View.MemoryView"
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __Pyx_TraceLine(765,0,__PYX_ERR(1, 765, __pyx_L1_error))

#line 765 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 765, __pyx_L1_error)

#line 765 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 765 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_9 != Py_None);

#line 765 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 765 "View.MemoryView"
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __Pyx_TraceLine(766,0,__PYX_ERR(1, 766, __pyx_L1_error))

#line 766 "View.MemoryView"
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)

#line 766 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_9);

#line 766 "View.MemoryView"
      __pyx_t_1 = (__pyx_t_9 != Py_None);

#line 766 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 766 "View.MemoryView"
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __Pyx_TraceLine(768,0,__PYX_ERR(1, 768, __pyx_L1_error))

#line 768 "View.MemoryView"
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __Pyx_TraceLine(774,0,__PYX_ERR(1, 774, __pyx_L1_error))

#line 774 "View.MemoryView"
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

#line 774 "View.MemoryView"
    }

#line 774 "View.MemoryView"
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
    __Pyx_TraceLine(746,0,__PYX_ERR(1, 746, __pyx_L1_error))

#line 746 "View.MemoryView"
  }

#line 746 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __Pyx_TraceLine(776,0,__PYX_ERR(1, 776, __pyx_L1_error))

#line 776 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 776 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 776 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_TraceLine(777,0,__PYX_ERR(1, 777, __pyx_L1_error))

#line 777 "View.MemoryView"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    __Pyx_TraceLine(778,0,__PYX_ERR(1, 778, __pyx_L1_error))

#line 778 "View.MemoryView"
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    __Pyx_TraceLine(779,0,__PYX_ERR(1, 779, __pyx_L1_error))

#line 779 "View.MemoryView"
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_TraceLine(777,0,__PYX_ERR(1, 777, __pyx_L1_error))

#line 777 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 777, __pyx_L1_error)

#line 777 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 777 "View.MemoryView"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 777, __pyx_L1_error)

#line 777 "View.MemoryView"
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);

#line 777 "View.MemoryView"
    __pyx_t_3 = 0;

#line 777 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */

#line 776 "View.MemoryView"
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  __Pyx_TraceLine(782,0,__PYX_ERR(1, 782, __pyx_L1_error))

#line 782 "View.MemoryView"
  /*else*/ {

#line 782 "View.MemoryView"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(783,0,__PYX_ERR(1, 783, __pyx_L1_error))

#line 783 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 782, __pyx_L1_error)

#line 783 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    __Pyx_TraceLine(782,0,__PYX_ERR(1, 782, __pyx_L1_error))

#line 782 "View.MemoryView"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 782, __pyx_L1_error)

#line 782 "View.MemoryView"
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);

#line 782 "View.MemoryView"
    __pyx_t_3 = 0;

#line 782 "View.MemoryView"
    goto __pyx_L0;

#line 782 "View.MemoryView"
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

#line 710 "View.MemoryView"


#line 710 "View.MemoryView"
  /* function exit code */

#line 710 "View.MemoryView"
  __pyx_L1_error:;

#line 710 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 710 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_9);

#line 710 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 710 "View.MemoryView"
  __pyx_r = 0;

#line 710 "View.MemoryView"
  __pyx_L0:;

#line 710 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);

#line 710 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_index);

#line 710 "View.MemoryView"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 710 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 710 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 710 "View.MemoryView"
  return __pyx_r;

#line 710 "View.MemoryView"
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

#line 807 "View.MemoryView"


#line 807 "View.MemoryView"
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape
#line 807 "View.MemoryView"
;
  int __pyx_v_negative_step
#line 807 "View.MemoryView"
;

#line 807 "View.MemoryView"
  int __pyx_r;

#line 807 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 807 "View.MemoryView"
  int __pyx_t_1;

#line 807 "View.MemoryView"
  int __pyx_t_2;

#line 807 "View.MemoryView"
  int __pyx_t_3;

#line 807 "View.MemoryView"
  int __pyx_lineno = 0;

#line 807 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 807 "View.MemoryView"
  int __pyx_clineno = 0;

#line 807 "View.MemoryView"
  __Pyx_TraceCall("slice_memviewslice", __pyx_f[1], 807, 1, __PYX_ERR(1, 807, __pyx_L1_error));

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __Pyx_TraceLine(827,1,__PYX_ERR(1, 827, __pyx_L1_error))

#line 827 "View.MemoryView"
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);

#line 827 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __Pyx_TraceLine(829,1,__PYX_ERR(1, 829, __pyx_L1_error))

#line 829 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);

#line 829 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __Pyx_TraceLine(830,1,__PYX_ERR(1, 830, __pyx_L1_error))

#line 830 "View.MemoryView"
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */

#line 829 "View.MemoryView"
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __Pyx_TraceLine(831,1,__PYX_ERR(1, 831, __pyx_L1_error))

#line 831 "View.MemoryView"
    __pyx_t_1 = (0 <= __pyx_v_start);

#line 831 "View.MemoryView"
    if (__pyx_t_1) {

#line 831 "View.MemoryView"
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);

#line 831 "View.MemoryView"
    }

#line 831 "View.MemoryView"
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);

#line 831 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __Pyx_TraceLine(832,1,__PYX_ERR(1, 832, __pyx_L1_error))

#line 832 "View.MemoryView"
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */

#line 831 "View.MemoryView"
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */

#line 827 "View.MemoryView"
    goto __pyx_L3;

#line 827 "View.MemoryView"
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  __Pyx_TraceLine(835,1,__PYX_ERR(1, 835, __pyx_L1_error))

#line 835 "View.MemoryView"
  /*else*/ {

#line 835 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);

#line 835 "View.MemoryView"
    if (__pyx_t_1) {

#line 835 "View.MemoryView"
    } else {

#line 835 "View.MemoryView"
      __pyx_t_2 = __pyx_t_1;

#line 835 "View.MemoryView"
      goto __pyx_L6_bool_binop_done;

#line 835 "View.MemoryView"
    }

#line 835 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);

#line 835 "View.MemoryView"
    __pyx_t_2 = __pyx_t_1;

#line 835 "View.MemoryView"
    __pyx_L6_bool_binop_done:;

#line 835 "View.MemoryView"
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __Pyx_TraceLine(837,1,__PYX_ERR(1, 837, __pyx_L1_error))

#line 837 "View.MemoryView"
    __pyx_t_1 = (__pyx_v_have_step != 0);

#line 837 "View.MemoryView"
    if (__pyx_t_1) {

#line 837 "View.MemoryView"
    } else {

#line 837 "View.MemoryView"
      __pyx_t_2 = __pyx_t_1;

#line 837 "View.MemoryView"
      goto __pyx_L9_bool_binop_done;

#line 837 "View.MemoryView"
    }

#line 837 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);

#line 837 "View.MemoryView"
    __pyx_t_2 = __pyx_t_1;

#line 837 "View.MemoryView"
    __pyx_L9_bool_binop_done:;

#line 837 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_TraceLine(838,1,__PYX_ERR(1, 838, __pyx_L1_error))

#line 838 "View.MemoryView"
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */

#line 837 "View.MemoryView"
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __Pyx_TraceLine(841,1,__PYX_ERR(1, 841, __pyx_L1_error))

#line 841 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_have_start != 0);

#line 841 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __Pyx_TraceLine(842,1,__PYX_ERR(1, 842, __pyx_L1_error))

#line 842 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);

#line 842 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __Pyx_TraceLine(843,1,__PYX_ERR(1, 843, __pyx_L1_error))

#line 843 "View.MemoryView"
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __Pyx_TraceLine(844,1,__PYX_ERR(1, 844, __pyx_L1_error))

#line 844 "View.MemoryView"
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);

#line 844 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __Pyx_TraceLine(845,1,__PYX_ERR(1, 845, __pyx_L1_error))

#line 845 "View.MemoryView"
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */

#line 844 "View.MemoryView"
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */

#line 842 "View.MemoryView"
        goto __pyx_L12;

#line 842 "View.MemoryView"
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __Pyx_TraceLine(846,1,__PYX_ERR(1, 846, __pyx_L1_error))

#line 846 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);

#line 846 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __Pyx_TraceLine(847,1,__PYX_ERR(1, 847, __pyx_L1_error))

#line 847 "View.MemoryView"
        __pyx_t_2 = (__pyx_v_negative_step != 0);

#line 847 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __Pyx_TraceLine(848,1,__PYX_ERR(1, 848, __pyx_L1_error))

#line 848 "View.MemoryView"
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */

#line 847 "View.MemoryView"
          goto __pyx_L14;

#line 847 "View.MemoryView"
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __Pyx_TraceLine(850,1,__PYX_ERR(1, 850, __pyx_L1_error))

#line 850 "View.MemoryView"
        /*else*/ {

#line 850 "View.MemoryView"
          __pyx_v_start = __pyx_v_shape;

#line 850 "View.MemoryView"
        }

#line 850 "View.MemoryView"
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */

#line 846 "View.MemoryView"
      }

#line 846 "View.MemoryView"
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */

#line 841 "View.MemoryView"
      goto __pyx_L11;

#line 841 "View.MemoryView"
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    __Pyx_TraceLine(852,1,__PYX_ERR(1, 852, __pyx_L1_error))

#line 852 "View.MemoryView"
    /*else*/ {

#line 852 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_negative_step != 0);

#line 852 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __Pyx_TraceLine(853,1,__PYX_ERR(1, 853, __pyx_L1_error))

#line 853 "View.MemoryView"
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */

#line 852 "View.MemoryView"
        goto __pyx_L15;

#line 852 "View.MemoryView"
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      __Pyx_TraceLine(855,1,__PYX_ERR(1, 855, __pyx_L1_error))

#line 855 "View.MemoryView"
      /*else*/ {

#line 855 "View.MemoryView"
        __pyx_v_start = 0;

#line 855 "View.MemoryView"
      }

#line 855 "View.MemoryView"
      __pyx_L15:;

#line 855 "View.MemoryView"
    }

#line 855 "View.MemoryView"
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __Pyx_TraceLine(857,1,__PYX_ERR(1, 857, __pyx_L1_error))

#line 857 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_have_stop != 0);

#line 857 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __Pyx_TraceLine(858,1,__PYX_ERR(1, 858, __pyx_L1_error))

#line 858 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);

#line 858 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __Pyx_TraceLine(859,1,__PYX_ERR(1, 859, __pyx_L1_error))

#line 859 "View.MemoryView"
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __Pyx_TraceLine(860,1,__PYX_ERR(1, 860, __pyx_L1_error))

#line 860 "View.MemoryView"
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);

#line 860 "View.MemoryView"
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __Pyx_TraceLine(861,1,__PYX_ERR(1, 861, __pyx_L1_error))

#line 861 "View.MemoryView"
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */

#line 860 "View.MemoryView"
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */

#line 858 "View.MemoryView"
        goto __pyx_L17;

#line 858 "View.MemoryView"
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __Pyx_TraceLine(862,1,__PYX_ERR(1, 862, __pyx_L1_error))

#line 862 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);

#line 862 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __Pyx_TraceLine(863,1,__PYX_ERR(1, 863, __pyx_L1_error))

#line 863 "View.MemoryView"
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */

#line 862 "View.MemoryView"
      }

#line 862 "View.MemoryView"
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */

#line 857 "View.MemoryView"
      goto __pyx_L16;

#line 857 "View.MemoryView"
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    __Pyx_TraceLine(865,1,__PYX_ERR(1, 865, __pyx_L1_error))

#line 865 "View.MemoryView"
    /*else*/ {

#line 865 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_negative_step != 0);

#line 865 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __Pyx_TraceLine(866,1,__PYX_ERR(1, 866, __pyx_L1_error))

#line 866 "View.MemoryView"
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */

#line 865 "View.MemoryView"
        goto __pyx_L19;

#line 865 "View.MemoryView"
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      __Pyx_TraceLine(868,1,__PYX_ERR(1, 868, __pyx_L1_error))

#line 868 "View.MemoryView"
      /*else*/ {

#line 868 "View.MemoryView"
        __pyx_v_stop = __pyx_v_shape;

#line 868 "View.MemoryView"
      }

#line 868 "View.MemoryView"
      __pyx_L19:;

#line 868 "View.MemoryView"
    }

#line 868 "View.MemoryView"
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __Pyx_TraceLine(870,1,__PYX_ERR(1, 870, __pyx_L1_error))

#line 870 "View.MemoryView"
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);

#line 870 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_TraceLine(871,1,__PYX_ERR(1, 871, __pyx_L1_error))

#line 871 "View.MemoryView"
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */

#line 870 "View.MemoryView"
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */

#line 875 "View.MemoryView"
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */

#line 877 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);

#line 877 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */

#line 878 "View.MemoryView"
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */

#line 877 "View.MemoryView"
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __Pyx_TraceLine(880,1,__PYX_ERR(1, 880, __pyx_L1_error))

#line 880 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);

#line 880 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_TraceLine(881,1,__PYX_ERR(1, 881, __pyx_L1_error))

#line 881 "View.MemoryView"
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */

#line 880 "View.MemoryView"
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    __Pyx_TraceLine(884,1,__PYX_ERR(1, 884, __pyx_L1_error))

#line 884 "View.MemoryView"
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    __Pyx_TraceLine(885,1,__PYX_ERR(1, 885, __pyx_L1_error))

#line 885 "View.MemoryView"
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(886,1,__PYX_ERR(1, 886, __pyx_L1_error))

#line 886 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;

#line 886 "View.MemoryView"
  }

#line 886 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __Pyx_TraceLine(889,1,__PYX_ERR(1, 889, __pyx_L1_error))

#line 889 "View.MemoryView"
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);

#line 889 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __Pyx_TraceLine(890,1,__PYX_ERR(1, 890, __pyx_L1_error))

#line 890 "View.MemoryView"
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */

#line 889 "View.MemoryView"
    goto __pyx_L23;

#line 889 "View.MemoryView"
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  __Pyx_TraceLine(892,1,__PYX_ERR(1, 892, __pyx_L1_error))

#line 892 "View.MemoryView"
  /*else*/ {

#line 892 "View.MemoryView"
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);

#line 892 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));

#line 892 "View.MemoryView"
  }

#line 892 "View.MemoryView"
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __Pyx_TraceLine(894,1,__PYX_ERR(1, 894, __pyx_L1_error))

#line 894 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);

#line 894 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __Pyx_TraceLine(895,1,__PYX_ERR(1, 895, __pyx_L1_error))

#line 895 "View.MemoryView"
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);

#line 895 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __Pyx_TraceLine(896,1,__PYX_ERR(1, 896, __pyx_L1_error))

#line 896 "View.MemoryView"
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);

#line 896 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __Pyx_TraceLine(897,1,__PYX_ERR(1, 897, __pyx_L1_error))

#line 897 "View.MemoryView"
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */

#line 896 "View.MemoryView"
        goto __pyx_L26;

#line 896 "View.MemoryView"
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      __Pyx_TraceLine(899,1,__PYX_ERR(1, 899, __pyx_L1_error))

#line 899 "View.MemoryView"
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __Pyx_TraceLine(900,1,__PYX_ERR(1, 900, __pyx_L1_error))

#line 900 "View.MemoryView"
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 899, __pyx_L1_error)

#line 900 "View.MemoryView"
      }

#line 900 "View.MemoryView"
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */

#line 895 "View.MemoryView"
      goto __pyx_L25;

#line 895 "View.MemoryView"
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    __Pyx_TraceLine(902,1,__PYX_ERR(1, 902, __pyx_L1_error))

#line 902 "View.MemoryView"
    /*else*/ {

#line 902 "View.MemoryView"
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;

#line 902 "View.MemoryView"
    }

#line 902 "View.MemoryView"
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */

#line 894 "View.MemoryView"
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(904,1,__PYX_ERR(1, 904, __pyx_L1_error))

#line 904 "View.MemoryView"
  __pyx_r = 0;

#line 904 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

#line 807 "View.MemoryView"


#line 807 "View.MemoryView"
  /* function exit code */

#line 807 "View.MemoryView"
  __pyx_L1_error:;

#line 807 "View.MemoryView"
  {

#line 807 "View.MemoryView"
    #ifdef WITH_THREAD
    PyGILState_STATE 
#line 807 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 807 "View.MemoryView"
    #endif

#line 807 "View.MemoryView"
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 807 "View.MemoryView"
    #ifdef WITH_THREAD

#line 807 "View.MemoryView"
    __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 807 "View.MemoryView"
    #endif

#line 807 "View.MemoryView"
  }

#line 807 "View.MemoryView"
  __pyx_r = -1;

#line 807 "View.MemoryView"
  __pyx_L0:;

#line 807 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 807 "View.MemoryView"
  return __pyx_r;

#line 807 "View.MemoryView"
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

#line 910 "View.MemoryView"


#line 910 "View.MemoryView"
static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape
#line 910 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stride
#line 910 "View.MemoryView"
;
  Py_ssize_t __pyx_v_suboffset
#line 910 "View.MemoryView"
;
  Py_ssize_t __pyx_v_itemsize
#line 910 "View.MemoryView"
;
  char *__pyx_v_resultp
#line 910 "View.MemoryView"
;

#line 910 "View.MemoryView"
  char *__pyx_r;

#line 910 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 910 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 910 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 910 "View.MemoryView"
  int __pyx_t_2;

#line 910 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 910 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 910 "View.MemoryView"
  int __pyx_lineno = 0;

#line 910 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 910 "View.MemoryView"
  int __pyx_clineno = 0;

#line 910 "View.MemoryView"
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

#line 910 "View.MemoryView"
  __Pyx_TraceCall("pybuffer_index", __pyx_f[1], 910, 0, __PYX_ERR(1, 910, __pyx_L1_error));

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __Pyx_TraceLine(912,0,__PYX_ERR(1, 912, __pyx_L1_error))

#line 912 "View.MemoryView"
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __Pyx_TraceLine(913,0,__PYX_ERR(1, 913, __pyx_L1_error))

#line 913 "View.MemoryView"
  __pyx_t_1 = __pyx_v_view->itemsize;

#line 913 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __Pyx_TraceLine(916,0,__PYX_ERR(1, 916, __pyx_L1_error))

#line 916 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);

#line 916 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    __Pyx_TraceLine(917,0,__PYX_ERR(1, 917, __pyx_L1_error))

#line 917 "View.MemoryView"
    if (unlikely(__pyx_v_itemsize == 0)) {

#line 917 "View.MemoryView"
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");

#line 917 "View.MemoryView"
      __PYX_ERR(1, 917, __pyx_L1_error)

#line 917 "View.MemoryView"
    }

#line 917 "View.MemoryView"
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {

#line 917 "View.MemoryView"
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");

#line 917 "View.MemoryView"
      __PYX_ERR(1, 917, __pyx_L1_error)

#line 917 "View.MemoryView"
    }

#line 917 "View.MemoryView"
    __pyx_v_shape = (__pyx_v_view->len / __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __Pyx_TraceLine(918,0,__PYX_ERR(1, 918, __pyx_L1_error))

#line 918 "View.MemoryView"
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */

#line 916 "View.MemoryView"
    goto __pyx_L3;

#line 916 "View.MemoryView"
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  __Pyx_TraceLine(920,0,__PYX_ERR(1, 920, __pyx_L1_error))

#line 920 "View.MemoryView"
  /*else*/ {

#line 920 "View.MemoryView"
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __Pyx_TraceLine(921,0,__PYX_ERR(1, 921, __pyx_L1_error))

#line 921 "View.MemoryView"
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __Pyx_TraceLine(922,0,__PYX_ERR(1, 922, __pyx_L1_error))

#line 922 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);

#line 922 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __Pyx_TraceLine(923,0,__PYX_ERR(1, 923, __pyx_L1_error))

#line 923 "View.MemoryView"
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */

#line 922 "View.MemoryView"
    }

#line 922 "View.MemoryView"
  }

#line 922 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __Pyx_TraceLine(925,0,__PYX_ERR(1, 925, __pyx_L1_error))

#line 925 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);

#line 925 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __Pyx_TraceLine(926,0,__PYX_ERR(1, 926, __pyx_L1_error))

#line 926 "View.MemoryView"
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __Pyx_TraceLine(927,0,__PYX_ERR(1, 927, __pyx_L1_error))

#line 927 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);

#line 927 "View.MemoryView"
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __Pyx_TraceLine(928,0,__PYX_ERR(1, 928, __pyx_L1_error))

#line 928 "View.MemoryView"
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)

#line 928 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 928 "View.MemoryView"
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 928, __pyx_L1_error)

#line 928 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_4);

#line 928 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 928 "View.MemoryView"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 928, __pyx_L1_error)

#line 928 "View.MemoryView"
      __Pyx_GOTREF(__pyx_t_3);

#line 928 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 928 "View.MemoryView"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 928 "View.MemoryView"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 928 "View.MemoryView"
      __PYX_ERR(1, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */

#line 927 "View.MemoryView"
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */

#line 925 "View.MemoryView"
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __Pyx_TraceLine(930,0,__PYX_ERR(1, 930, __pyx_L1_error))

#line 930 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);

#line 930 "View.MemoryView"
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __Pyx_TraceLine(931,0,__PYX_ERR(1, 931, __pyx_L1_error))

#line 931 "View.MemoryView"
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 931 "View.MemoryView"
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_4);

#line 931 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 931 "View.MemoryView"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 931, __pyx_L1_error)

#line 931 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 931 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 931 "View.MemoryView"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 931 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 931 "View.MemoryView"
    __PYX_ERR(1, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */

#line 930 "View.MemoryView"
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __Pyx_TraceLine(933,0,__PYX_ERR(1, 933, __pyx_L1_error))

#line 933 "View.MemoryView"
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __Pyx_TraceLine(934,0,__PYX_ERR(1, 934, __pyx_L1_error))

#line 934 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);

#line 934 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __Pyx_TraceLine(935,0,__PYX_ERR(1, 935, __pyx_L1_error))

#line 935 "View.MemoryView"
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */

#line 934 "View.MemoryView"
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(937,0,__PYX_ERR(1, 937, __pyx_L1_error))

#line 937 "View.MemoryView"
  __pyx_r = __pyx_v_resultp;

#line 937 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

#line 910 "View.MemoryView"


#line 910 "View.MemoryView"
  /* function exit code */

#line 910 "View.MemoryView"
  __pyx_L1_error:;

#line 910 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 910 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 910 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 910 "View.MemoryView"
  __pyx_r = NULL;

#line 910 "View.MemoryView"
  __pyx_L0:;

#line 910 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 910 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 910 "View.MemoryView"
  return __pyx_r;

#line 910 "View.MemoryView"
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

#line 943 "View.MemoryView"


#line 943 "View.MemoryView"
static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim
#line 943 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_shape
#line 943 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_strides
#line 943 "View.MemoryView"
;
  int __pyx_v_i
#line 943 "View.MemoryView"
;
  int __pyx_v_j
#line 943 "View.MemoryView"
;

#line 943 "View.MemoryView"
  int __pyx_r;

#line 943 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 943 "View.MemoryView"
  int __pyx_t_1;

#line 943 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 943 "View.MemoryView"
  long __pyx_t_3;

#line 943 "View.MemoryView"
  long __pyx_t_4;

#line 943 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 943 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

#line 943 "View.MemoryView"
  int __pyx_t_7;

#line 943 "View.MemoryView"
  int __pyx_t_8;

#line 943 "View.MemoryView"
  int __pyx_t_9;

#line 943 "View.MemoryView"
  int __pyx_lineno = 0;

#line 943 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 943 "View.MemoryView"
  int __pyx_clineno = 0;

#line 943 "View.MemoryView"
  __Pyx_TraceCall("transpose_memslice", __pyx_f[1], 943, 1, __PYX_ERR(1, 943, __pyx_L1_error));

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __Pyx_TraceLine(944,1,__PYX_ERR(1, 944, __pyx_L1_error))

#line 944 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;

#line 944 "View.MemoryView"
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __Pyx_TraceLine(946,1,__PYX_ERR(1, 946, __pyx_L1_error))

#line 946 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memslice->shape;

#line 946 "View.MemoryView"
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(947,1,__PYX_ERR(1, 947, __pyx_L1_error))

#line 947 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memslice->strides;

#line 947 "View.MemoryView"
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __Pyx_TraceLine(951,1,__PYX_ERR(1, 951, __pyx_L1_error))

#line 951 "View.MemoryView"
  __pyx_t_3 = (__pyx_v_ndim / 2);

#line 951 "View.MemoryView"
  __pyx_t_4 = __pyx_t_3;

#line 951 "View.MemoryView"
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {

#line 951 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __Pyx_TraceLine(952,1,__PYX_ERR(1, 952, __pyx_L1_error))

#line 952 "View.MemoryView"
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __Pyx_TraceLine(953,1,__PYX_ERR(1, 953, __pyx_L1_error))

#line 953 "View.MemoryView"
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);

#line 953 "View.MemoryView"
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);

#line 953 "View.MemoryView"
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;

#line 953 "View.MemoryView"
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __Pyx_TraceLine(954,1,__PYX_ERR(1, 954, __pyx_L1_error))

#line 954 "View.MemoryView"
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);

#line 954 "View.MemoryView"
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);

#line 954 "View.MemoryView"
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;

#line 954 "View.MemoryView"
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __Pyx_TraceLine(956,1,__PYX_ERR(1, 956, __pyx_L1_error))

#line 956 "View.MemoryView"
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);

#line 956 "View.MemoryView"
    if (!__pyx_t_8) {

#line 956 "View.MemoryView"
    } else {

#line 956 "View.MemoryView"
      __pyx_t_7 = __pyx_t_8;

#line 956 "View.MemoryView"
      goto __pyx_L6_bool_binop_done;

#line 956 "View.MemoryView"
    }

#line 956 "View.MemoryView"
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);

#line 956 "View.MemoryView"
    __pyx_t_7 = __pyx_t_8;

#line 956 "View.MemoryView"
    __pyx_L6_bool_binop_done:;

#line 956 "View.MemoryView"
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __Pyx_TraceLine(957,1,__PYX_ERR(1, 957, __pyx_L1_error))

#line 957 "View.MemoryView"
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */

#line 956 "View.MemoryView"
    }

#line 956 "View.MemoryView"
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(959,1,__PYX_ERR(1, 959, __pyx_L1_error))

#line 959 "View.MemoryView"
  __pyx_r = 1;

#line 959 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

#line 943 "View.MemoryView"


#line 943 "View.MemoryView"
  /* function exit code */

#line 943 "View.MemoryView"
  __pyx_L1_error:;

#line 943 "View.MemoryView"
  {

#line 943 "View.MemoryView"
    #ifdef WITH_THREAD
    PyGILState_STATE 
#line 943 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 943 "View.MemoryView"
    #endif

#line 943 "View.MemoryView"
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 943 "View.MemoryView"
    #ifdef WITH_THREAD

#line 943 "View.MemoryView"
    __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 943 "View.MemoryView"
    #endif

#line 943 "View.MemoryView"
  }

#line 943 "View.MemoryView"
  __pyx_r = 0;

#line 943 "View.MemoryView"
  __pyx_L0:;

#line 943 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 943 "View.MemoryView"
  return __pyx_r;

#line 943 "View.MemoryView"
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

#line 976 "View.MemoryView"


#line 976 "View.MemoryView"
/* Python wrapper */

#line 976 "View.MemoryView"
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 976 "View.MemoryView"
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {

#line 976 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 976 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 976 "View.MemoryView"
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

#line 976 "View.MemoryView"


#line 976 "View.MemoryView"
  /* function exit code */

#line 976 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 976 "View.MemoryView"
}

#line 976 "View.MemoryView"


#line 976 "View.MemoryView"
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 976 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 976 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 976 "View.MemoryView"
  int __pyx_lineno = 0;

#line 976 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 976 "View.MemoryView"
  int __pyx_clineno = 0;

#line 976 "View.MemoryView"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 976 "View.MemoryView"
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 976, 0, __PYX_ERR(1, 976, __pyx_L1_error));

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __Pyx_TraceLine(977,0,__PYX_ERR(1, 977, __pyx_L1_error))

#line 977 "View.MemoryView"
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

#line 976 "View.MemoryView"


#line 976 "View.MemoryView"
  /* function exit code */

#line 976 "View.MemoryView"
  goto __pyx_L0;

#line 976 "View.MemoryView"
  __pyx_L1_error:;

#line 976 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView._memoryviewslice.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 976 "View.MemoryView"
  __pyx_L0:;

#line 976 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 976 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 976 "View.MemoryView"
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {

#line 979 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 979 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 979 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 979 "View.MemoryView"
  int __pyx_t_1;

#line 979 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 979 "View.MemoryView"
  int __pyx_lineno = 0;

#line 979 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 979 "View.MemoryView"
  int __pyx_clineno = 0;

#line 979 "View.MemoryView"
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

#line 979 "View.MemoryView"
  __Pyx_TraceCall("convert_item_to_object", __pyx_f[1], 979, 0, __PYX_ERR(1, 979, __pyx_L1_error));

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __Pyx_TraceLine(980,0,__PYX_ERR(1, 980, __pyx_L1_error))

#line 980 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);

#line 980 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_TraceLine(981,0,__PYX_ERR(1, 981, __pyx_L1_error))

#line 981 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 981 "View.MemoryView"
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 981, __pyx_L1_error)

#line 981 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 981 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 981 "View.MemoryView"
    __pyx_t_2 = 0;

#line 981 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */

#line 980 "View.MemoryView"
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  __Pyx_TraceLine(983,0,__PYX_ERR(1, 983, __pyx_L1_error))

#line 983 "View.MemoryView"
  /*else*/ {

#line 983 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 983 "View.MemoryView"
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)

#line 983 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 983 "View.MemoryView"
    __pyx_r = __pyx_t_2;

#line 983 "View.MemoryView"
    __pyx_t_2 = 0;

#line 983 "View.MemoryView"
    goto __pyx_L0;

#line 983 "View.MemoryView"
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

#line 979 "View.MemoryView"


#line 979 "View.MemoryView"
  /* function exit code */

#line 979 "View.MemoryView"
  __pyx_L1_error:;

#line 979 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 979 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 979 "View.MemoryView"
  __pyx_r = 0;

#line 979 "View.MemoryView"
  __pyx_L0:;

#line 979 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 979 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 979 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 979 "View.MemoryView"
  return __pyx_r;

#line 979 "View.MemoryView"
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

#line 985 "View.MemoryView"


#line 985 "View.MemoryView"
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {

#line 985 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 985 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 985 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 985 "View.MemoryView"
  int __pyx_t_1;

#line 985 "View.MemoryView"
  int __pyx_t_2;

#line 985 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 985 "View.MemoryView"
  int __pyx_lineno = 0;

#line 985 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 985 "View.MemoryView"
  int __pyx_clineno = 0;

#line 985 "View.MemoryView"
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

#line 985 "View.MemoryView"
  __Pyx_TraceCall("assign_item_from_object", __pyx_f[1], 985, 0, __PYX_ERR(1, 985, __pyx_L1_error));

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __Pyx_TraceLine(986,0,__PYX_ERR(1, 986, __pyx_L1_error))

#line 986 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);

#line 986 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __Pyx_TraceLine(987,0,__PYX_ERR(1, 987, __pyx_L1_error))

#line 987 "View.MemoryView"
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */

#line 986 "View.MemoryView"
    goto __pyx_L3;

#line 986 "View.MemoryView"
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_TraceLine(989,0,__PYX_ERR(1, 989, __pyx_L1_error))

#line 989 "View.MemoryView"
  /*else*/ {

#line 989 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 989, __pyx_L1_error)

#line 989 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 989 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 989 "View.MemoryView"
  }

#line 989 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

#line 985 "View.MemoryView"


#line 985 "View.MemoryView"
  /* function exit code */

#line 985 "View.MemoryView"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 985 "View.MemoryView"
  goto __pyx_L0;

#line 985 "View.MemoryView"
  __pyx_L1_error:;

#line 985 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 985 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 985 "View.MemoryView"
  __pyx_r = 0;

#line 985 "View.MemoryView"
  __pyx_L0:;

#line 985 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 985 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 985 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 985 "View.MemoryView"
  return __pyx_r;

#line 985 "View.MemoryView"
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

#line 992 "View.MemoryView"


#line 992 "View.MemoryView"
/* Python wrapper */

#line 992 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 992 "View.MemoryView"
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {

#line 992 "View.MemoryView"
  PyObject *__pyx_r = 0;

#line 992 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 992 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 992 "View.MemoryView"
__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

#line 992 "View.MemoryView"


#line 992 "View.MemoryView"
  /* function exit code */

#line 992 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 992 "View.MemoryView"
  return __pyx_r;

#line 992 "View.MemoryView"
}

#line 992 "View.MemoryView"


#line 992 "View.MemoryView"
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 992 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 992 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 992 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 992 "View.MemoryView"
  int __pyx_lineno = 0;

#line 992 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 992 "View.MemoryView"
  int __pyx_clineno = 0;

#line 992 "View.MemoryView"
  __Pyx_RefNannySetupContext("__get__", 0);

#line 992 "View.MemoryView"
  __Pyx_TraceCall("__get__", __pyx_f[1], 992, 0, __PYX_ERR(1, 992, __pyx_L1_error));

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_TraceLine(993,0,__PYX_ERR(1, 993, __pyx_L1_error))

#line 993 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 993 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_self->from_object);

#line 993 "View.MemoryView"
  __pyx_r = __pyx_v_self->from_object;

#line 993 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

#line 992 "View.MemoryView"


#line 992 "View.MemoryView"
  /* function exit code */

#line 992 "View.MemoryView"
  __pyx_L1_error:;

#line 992 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 992 "View.MemoryView"
  __pyx_r = NULL;

#line 992 "View.MemoryView"
  __pyx_L0:;

#line 992 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 992 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 992 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 992 "View.MemoryView"
  return __pyx_r;

#line 992 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__reduce_cython__", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __Pyx_TraceLine(2,0,__PYX_ERR(1, 2, __pyx_L1_error))

#line 2 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 2 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 2 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2 "(tree fragment)"
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
/* Python wrapper */

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/

#line 3 "(tree fragment)"
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = 
#line 3 "(tree fragment)"
__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {

#line 3 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 3 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 3 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 3 "(tree fragment)"
  int __pyx_lineno = 0;

#line 3 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 3 "(tree fragment)"
  int __pyx_clineno = 0;

#line 3 "(tree fragment)"
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

#line 3 "(tree fragment)"
  __Pyx_TraceCall("__setstate_cython__", __pyx_f[1], 3, 0, __PYX_ERR(1, 3, __pyx_L1_error));

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))

#line 4 "(tree fragment)"
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "(tree fragment)"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 4 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 4 "(tree fragment)"
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 3 "(tree fragment)"


#line 3 "(tree fragment)"
  /* function exit code */

#line 3 "(tree fragment)"
  __pyx_L1_error:;

#line 3 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 3 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3 "(tree fragment)"
  __pyx_r = NULL;

#line 3 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 3 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 3 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 3 "(tree fragment)"
  return __pyx_r;

#line 3 "(tree fragment)"
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

#line 999 "View.MemoryView"


#line 999 "View.MemoryView"
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0
#line 999 "View.MemoryView"
;
  Py_ssize_t __pyx_v_suboffset
#line 999 "View.MemoryView"
;
  PyObject *__pyx_v_length = NULL
#line 999 "View.MemoryView"
;

#line 999 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 999 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 999 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 999 "View.MemoryView"
  int __pyx_t_1;

#line 999 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 999 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 999 "View.MemoryView"
  __Pyx_TypeInfo *__pyx_t_4;

#line 999 "View.MemoryView"
  Py_buffer __pyx_t_5;

#line 999 "View.MemoryView"
  Py_ssize_t *__pyx_t_6;

#line 999 "View.MemoryView"
  Py_ssize_t *__pyx_t_7;

#line 999 "View.MemoryView"
  Py_ssize_t *__pyx_t_8;

#line 999 "View.MemoryView"
  Py_ssize_t __pyx_t_9;

#line 999 "View.MemoryView"
  int __pyx_lineno = 0;

#line 999 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 999 "View.MemoryView"
  int __pyx_clineno = 0;

#line 999 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

#line 999 "View.MemoryView"
  __Pyx_TraceCall("memoryview_fromslice", __pyx_f[1], 999, 0, __PYX_ERR(1, 999, __pyx_L1_error));

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __Pyx_TraceLine(1007,0,__PYX_ERR(1, 1007, __pyx_L1_error))

#line 1007 "View.MemoryView"
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);

#line 1007 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(1008,0,__PYX_ERR(1, 1008, __pyx_L1_error))

#line 1008 "View.MemoryView"
    __Pyx_XDECREF(__pyx_r);

#line 1008 "View.MemoryView"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1008 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */

#line 1007 "View.MemoryView"
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __Pyx_TraceLine(1013,0,__PYX_ERR(1, 1013, __pyx_L1_error))

#line 1013 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)

#line 1013 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1013 "View.MemoryView"
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)

#line 1013 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 1013 "View.MemoryView"
  __Pyx_INCREF(Py_None);

#line 1013 "View.MemoryView"
  __Pyx_GIVEREF(Py_None);

#line 1013 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);

#line 1013 "View.MemoryView"
  __Pyx_INCREF(__pyx_int_0);

#line 1013 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_int_0);

#line 1013 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);

#line 1013 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 1013 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);

#line 1013 "View.MemoryView"
  __pyx_t_2 = 0;

#line 1013 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)

#line 1013 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1013 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1013 "View.MemoryView"
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);

#line 1013 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __Pyx_TraceLine(1015,0,__PYX_ERR(1, 1015, __pyx_L1_error))

#line 1015 "View.MemoryView"
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __Pyx_TraceLine(1016,0,__PYX_ERR(1, 1016, __pyx_L1_error))

#line 1016 "View.MemoryView"
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __Pyx_TraceLine(1018,0,__PYX_ERR(1, 1018, __pyx_L1_error))

#line 1018 "View.MemoryView"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)

#line 1018 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1018 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 1018 "View.MemoryView"
  __Pyx_GOTREF(__pyx_v_result->from_object);

#line 1018 "View.MemoryView"
  __Pyx_DECREF(__pyx_v_result->from_object);

#line 1018 "View.MemoryView"
  __pyx_v_result->from_object = __pyx_t_2;

#line 1018 "View.MemoryView"
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __Pyx_TraceLine(1019,0,__PYX_ERR(1, 1019, __pyx_L1_error))

#line 1019 "View.MemoryView"
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;

#line 1019 "View.MemoryView"
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __Pyx_TraceLine(1021,0,__PYX_ERR(1, 1021, __pyx_L1_error))

#line 1021 "View.MemoryView"
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;

#line 1021 "View.MemoryView"
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __Pyx_TraceLine(1022,0,__PYX_ERR(1, 1022, __pyx_L1_error))

#line 1022 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __Pyx_TraceLine(1023,0,__PYX_ERR(1, 1023, __pyx_L1_error))

#line 1023 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  __Pyx_TraceLine(1024,0,__PYX_ERR(1, 1024, __pyx_L1_error))

#line 1024 "View.MemoryView"
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  __Pyx_TraceLine(1025,0,__PYX_ERR(1, 1025, __pyx_L1_error))

#line 1025 "View.MemoryView"
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __Pyx_TraceLine(1027,0,__PYX_ERR(1, 1027, __pyx_L1_error))

#line 1027 "View.MemoryView"
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);

#line 1027 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __Pyx_TraceLine(1028,0,__PYX_ERR(1, 1028, __pyx_L1_error))

#line 1028 "View.MemoryView"
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */

#line 1027 "View.MemoryView"
    goto __pyx_L4;

#line 1027 "View.MemoryView"
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  __Pyx_TraceLine(1030,0,__PYX_ERR(1, 1030, __pyx_L1_error))

#line 1030 "View.MemoryView"
  /*else*/ {

#line 1030 "View.MemoryView"
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;

#line 1030 "View.MemoryView"
  }

#line 1030 "View.MemoryView"
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __Pyx_TraceLine(1032,0,__PYX_ERR(1, 1032, __pyx_L1_error))

#line 1032 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1033,0,__PYX_ERR(1, 1033, __pyx_L1_error))

#line 1033 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __Pyx_TraceLine(1036,0,__PYX_ERR(1, 1036, __pyx_L1_error))

#line 1036 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __Pyx_TraceLine(1037,0,__PYX_ERR(1, 1037, __pyx_L1_error))

#line 1037 "View.MemoryView"
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);

#line 1037 "View.MemoryView"
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

#line 1037 "View.MemoryView"
    __pyx_t_6 = __pyx_t_8;

#line 1037 "View.MemoryView"
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __Pyx_TraceLine(1038,0,__PYX_ERR(1, 1038, __pyx_L1_error))

#line 1038 "View.MemoryView"
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);

#line 1038 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __Pyx_TraceLine(1039,0,__PYX_ERR(1, 1039, __pyx_L1_error))

#line 1039 "View.MemoryView"
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      __Pyx_TraceLine(1040,0,__PYX_ERR(1, 1040, __pyx_L1_error))

#line 1040 "View.MemoryView"
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */

#line 1038 "View.MemoryView"
    }

#line 1038 "View.MemoryView"
  }

#line 1038 "View.MemoryView"
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __Pyx_TraceLine(1042,0,__PYX_ERR(1, 1042, __pyx_L1_error))

#line 1042 "View.MemoryView"
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;

#line 1042 "View.MemoryView"
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __Pyx_TraceLine(1043,0,__PYX_ERR(1, 1043, __pyx_L1_error))

#line 1043 "View.MemoryView"
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);

#line 1043 "View.MemoryView"
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {

#line 1043 "View.MemoryView"
    __pyx_t_6 = __pyx_t_8;

#line 1043 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)

#line 1043 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 1043 "View.MemoryView"
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);

#line 1043 "View.MemoryView"
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __Pyx_TraceLine(1044,0,__PYX_ERR(1, 1044, __pyx_L1_error))

#line 1044 "View.MemoryView"
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)

#line 1044 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 1044 "View.MemoryView"
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)

#line 1044 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 1044 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1044 "View.MemoryView"
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)

#line 1044 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1044 "View.MemoryView"
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

#line 1044 "View.MemoryView"
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __Pyx_TraceLine(1046,0,__PYX_ERR(1, 1046, __pyx_L1_error))

#line 1046 "View.MemoryView"
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __Pyx_TraceLine(1047,0,__PYX_ERR(1, 1047, __pyx_L1_error))

#line 1047 "View.MemoryView"
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_TraceLine(1049,0,__PYX_ERR(1, 1049, __pyx_L1_error))

#line 1049 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 1049 "View.MemoryView"
  __Pyx_INCREF(((PyObject *)__pyx_v_result));

#line 1049 "View.MemoryView"
  __pyx_r = ((PyObject *)__pyx_v_result);

#line 1049 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

#line 999 "View.MemoryView"


#line 999 "View.MemoryView"
  /* function exit code */

#line 999 "View.MemoryView"
  __pyx_L1_error:;

#line 999 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 999 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 999 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 999 "View.MemoryView"
  __pyx_r = 0;

#line 999 "View.MemoryView"
  __pyx_L0:;

#line 999 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_result);

#line 999 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_length);

#line 999 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 999 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 999 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 999 "View.MemoryView"
  return __pyx_r;

#line 999 "View.MemoryView"
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

#line 1052 "View.MemoryView"


#line 1052 "View.MemoryView"
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0
#line 1052 "View.MemoryView"
;

#line 1052 "View.MemoryView"
  __Pyx_memviewslice *__pyx_r;

#line 1052 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1052 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1052 "View.MemoryView"
  int __pyx_t_1;

#line 1052 "View.MemoryView"
  int __pyx_t_2;

#line 1052 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 1052 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1052 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1052 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1052 "View.MemoryView"
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

#line 1052 "View.MemoryView"
  __Pyx_TraceCall("get_slice_from_memview", __pyx_f[1], 1052, 0, __PYX_ERR(1, 1052, __pyx_L1_error));

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __Pyx_TraceLine(1055,0,__PYX_ERR(1, 1055, __pyx_L1_error))

#line 1055 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 1055 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 1055 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    __Pyx_TraceLine(1056,0,__PYX_ERR(1, 1056, __pyx_L1_error))

#line 1056 "View.MemoryView"
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)

#line 1056 "View.MemoryView"
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);

#line 1056 "View.MemoryView"
    __Pyx_INCREF(__pyx_t_3);

#line 1056 "View.MemoryView"
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);

#line 1056 "View.MemoryView"
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __Pyx_TraceLine(1057,0,__PYX_ERR(1, 1057, __pyx_L1_error))

#line 1057 "View.MemoryView"
    __pyx_r = (&__pyx_v_obj->from_slice);

#line 1057 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */

#line 1055 "View.MemoryView"
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  __Pyx_TraceLine(1059,0,__PYX_ERR(1, 1059, __pyx_L1_error))

#line 1059 "View.MemoryView"
  /*else*/ {

#line 1059 "View.MemoryView"
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __Pyx_TraceLine(1060,0,__PYX_ERR(1, 1060, __pyx_L1_error))

#line 1060 "View.MemoryView"
    __pyx_r = __pyx_v_mslice;

#line 1060 "View.MemoryView"
    goto __pyx_L0;

#line 1060 "View.MemoryView"
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

#line 1052 "View.MemoryView"


#line 1052 "View.MemoryView"
  /* function exit code */

#line 1052 "View.MemoryView"
  __pyx_L1_error:;

#line 1052 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 1052 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1052 "View.MemoryView"
  __pyx_r = NULL;

#line 1052 "View.MemoryView"
  __pyx_L0:;

#line 1052 "View.MemoryView"
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);

#line 1052 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1052 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1052 "View.MemoryView"
  return __pyx_r;

#line 1052 "View.MemoryView"
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

#line 1063 "View.MemoryView"


#line 1063 "View.MemoryView"
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim
#line 1063 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_shape
#line 1063 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_strides
#line 1063 "View.MemoryView"
;
  Py_ssize_t *__pyx_v_suboffsets
#line 1063 "View.MemoryView"
;

#line 1063 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1063 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1063 "View.MemoryView"
  Py_ssize_t *__pyx_t_1;

#line 1063 "View.MemoryView"
  int __pyx_t_2;

#line 1063 "View.MemoryView"
  int __pyx_t_3;

#line 1063 "View.MemoryView"
  int __pyx_t_4;

#line 1063 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 1063 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1063 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1063 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1063 "View.MemoryView"
  __Pyx_RefNannySetupContext("slice_copy", 0);

#line 1063 "View.MemoryView"
  __Pyx_TraceCall("slice_copy", __pyx_f[1], 1063, 0, __PYX_ERR(1, 1063, __pyx_L1_error));

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __Pyx_TraceLine(1067,0,__PYX_ERR(1, 1067, __pyx_L1_error))

#line 1067 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.shape;

#line 1067 "View.MemoryView"
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __Pyx_TraceLine(1068,0,__PYX_ERR(1, 1068, __pyx_L1_error))

#line 1068 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.strides;

#line 1068 "View.MemoryView"
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __Pyx_TraceLine(1069,0,__PYX_ERR(1, 1069, __pyx_L1_error))

#line 1069 "View.MemoryView"
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;

#line 1069 "View.MemoryView"
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __Pyx_TraceLine(1071,0,__PYX_ERR(1, 1071, __pyx_L1_error))

#line 1071 "View.MemoryView"
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __Pyx_TraceLine(1072,0,__PYX_ERR(1, 1072, __pyx_L1_error))

#line 1072 "View.MemoryView"
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __Pyx_TraceLine(1074,0,__PYX_ERR(1, 1074, __pyx_L1_error))

#line 1074 "View.MemoryView"
  __pyx_t_2 = __pyx_v_memview->view.ndim;

#line 1074 "View.MemoryView"
  __pyx_t_3 = __pyx_t_2;

#line 1074 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1074 "View.MemoryView"
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    __Pyx_TraceLine(1075,0,__PYX_ERR(1, 1075, __pyx_L1_error))

#line 1075 "View.MemoryView"
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    __Pyx_TraceLine(1076,0,__PYX_ERR(1, 1076, __pyx_L1_error))

#line 1076 "View.MemoryView"
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    __Pyx_TraceLine(1077,0,__PYX_ERR(1, 1077, __pyx_L1_error))

#line 1077 "View.MemoryView"
    if ((__pyx_v_suboffsets != 0)) {

#line 1077 "View.MemoryView"
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);

#line 1077 "View.MemoryView"
    } else {

#line 1077 "View.MemoryView"
      __pyx_t_5 = -1L;

#line 1077 "View.MemoryView"
    }

#line 1077 "View.MemoryView"
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;

#line 1077 "View.MemoryView"
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

#line 1063 "View.MemoryView"


#line 1063 "View.MemoryView"
  /* function exit code */

#line 1063 "View.MemoryView"
  goto __pyx_L0;

#line 1063 "View.MemoryView"
  __pyx_L1_error:;

#line 1063 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.slice_copy", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 1063 "View.MemoryView"
  __pyx_L0:;

#line 1063 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1063 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1063 "View.MemoryView"
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

#line 1080 "View.MemoryView"


#line 1080 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice
#line 1080 "View.MemoryView"
;

#line 1080 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 1080 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1080 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1080 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1080 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1080 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1080 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1080 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

#line 1080 "View.MemoryView"
  __Pyx_TraceCall("memoryview_copy", __pyx_f[1], 1080, 0, __PYX_ERR(1, 1080, __pyx_L1_error));

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __Pyx_TraceLine(1083,0,__PYX_ERR(1, 1083, __pyx_L1_error))

#line 1083 "View.MemoryView"
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_TraceLine(1084,0,__PYX_ERR(1, 1084, __pyx_L1_error))

#line 1084 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

#line 1084 "View.MemoryView"
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)

#line 1084 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1084 "View.MemoryView"
  __pyx_r = __pyx_t_1;

#line 1084 "View.MemoryView"
  __pyx_t_1 = 0;

#line 1084 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

#line 1080 "View.MemoryView"


#line 1080 "View.MemoryView"
  /* function exit code */

#line 1080 "View.MemoryView"
  __pyx_L1_error:;

#line 1080 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1080 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1080 "View.MemoryView"
  __pyx_r = 0;

#line 1080 "View.MemoryView"
  __pyx_L0:;

#line 1080 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 1080 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1080 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1080 "View.MemoryView"
  return __pyx_r;

#line 1080 "View.MemoryView"
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

#line 1087 "View.MemoryView"


#line 1087 "View.MemoryView"
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *)
#line 1087 "View.MemoryView"
;
  int (*__pyx_v_to_dtype_func)(char *, PyObject *)
#line 1087 "View.MemoryView"
;

#line 1087 "View.MemoryView"
  PyObject *__pyx_r = NULL;

#line 1087 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1087 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1087 "View.MemoryView"
  int __pyx_t_1;

#line 1087 "View.MemoryView"
  int __pyx_t_2;

#line 1087 "View.MemoryView"
  PyObject *(*__pyx_t_3)(char *);

#line 1087 "View.MemoryView"
  int (*__pyx_t_4)(char *, PyObject *);

#line 1087 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 1087 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1087 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1087 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1087 "View.MemoryView"
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

#line 1087 "View.MemoryView"
  __Pyx_TraceCall("memoryview_copy_from_slice", __pyx_f[1], 1087, 0, __PYX_ERR(1, 1087, __pyx_L1_error));

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __Pyx_TraceLine(1094,0,__PYX_ERR(1, 1094, __pyx_L1_error))

#line 1094 "View.MemoryView"
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 

#line 1094 "View.MemoryView"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 1094 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __Pyx_TraceLine(1095,0,__PYX_ERR(1, 1095, __pyx_L1_error))

#line 1095 "View.MemoryView"
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;

#line 1095 "View.MemoryView"
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __Pyx_TraceLine(1096,0,__PYX_ERR(1, 1096, __pyx_L1_error))

#line 1096 "View.MemoryView"
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;

#line 1096 "View.MemoryView"
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */

#line 1094 "View.MemoryView"
    goto __pyx_L3;

#line 1094 "View.MemoryView"
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  __Pyx_TraceLine(1098,0,__PYX_ERR(1, 1098, __pyx_L1_error))

#line 1098 "View.MemoryView"
  /*else*/ {

#line 1098 "View.MemoryView"
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __Pyx_TraceLine(1099,0,__PYX_ERR(1, 1099, __pyx_L1_error))

#line 1099 "View.MemoryView"
    __pyx_v_to_dtype_func = NULL;

#line 1099 "View.MemoryView"
  }

#line 1099 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_TraceLine(1101,0,__PYX_ERR(1, 1101, __pyx_L1_error))

#line 1101 "View.MemoryView"
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1103,0,__PYX_ERR(1, 1103, __pyx_L1_error))

#line 1103 "View.MemoryView"
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1101, __pyx_L1_error)

#line 1103 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_5);

#line 1103 "View.MemoryView"
  __pyx_r = __pyx_t_5;

#line 1103 "View.MemoryView"
  __pyx_t_5 = 0;

#line 1103 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

#line 1087 "View.MemoryView"


#line 1087 "View.MemoryView"
  /* function exit code */

#line 1087 "View.MemoryView"
  __pyx_L1_error:;

#line 1087 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 1087 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1087 "View.MemoryView"
  __pyx_r = 0;

#line 1087 "View.MemoryView"
  __pyx_L0:;

#line 1087 "View.MemoryView"
  __Pyx_XGIVEREF(__pyx_r);

#line 1087 "View.MemoryView"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1087 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1087 "View.MemoryView"
  return __pyx_r;

#line 1087 "View.MemoryView"
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

#line 1109 "View.MemoryView"


#line 1109 "View.MemoryView"
static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {

#line 1109 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1109 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1109 "View.MemoryView"
  int __pyx_t_1;

#line 1109 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1109 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1109 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1109 "View.MemoryView"
  __Pyx_TraceCall("abs_py_ssize_t", __pyx_f[1], 1109, 1, __PYX_ERR(1, 1109, __pyx_L1_error));

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __Pyx_TraceLine(1110,1,__PYX_ERR(1, 1110, __pyx_L1_error))

#line 1110 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);

#line 1110 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __Pyx_TraceLine(1111,1,__PYX_ERR(1, 1111, __pyx_L1_error))

#line 1111 "View.MemoryView"
    __pyx_r = (-__pyx_v_arg);

#line 1111 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */

#line 1110 "View.MemoryView"
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  __Pyx_TraceLine(1113,1,__PYX_ERR(1, 1113, __pyx_L1_error))

#line 1113 "View.MemoryView"
  /*else*/ {

#line 1113 "View.MemoryView"
    __pyx_r = __pyx_v_arg;

#line 1113 "View.MemoryView"
    goto __pyx_L0;

#line 1113 "View.MemoryView"
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

#line 1109 "View.MemoryView"


#line 1109 "View.MemoryView"
  /* function exit code */

#line 1109 "View.MemoryView"
  __pyx_L1_error:;

#line 1109 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.abs_py_ssize_t", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1109 "View.MemoryView"
  __pyx_r = 0;

#line 1109 "View.MemoryView"
  __pyx_L0:;

#line 1109 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1109 "View.MemoryView"
  return __pyx_r;

#line 1109 "View.MemoryView"
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

#line 1116 "View.MemoryView"


#line 1116 "View.MemoryView"
static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i
#line 1116 "View.MemoryView"
;
  Py_ssize_t __pyx_v_c_stride
#line 1116 "View.MemoryView"
;
  Py_ssize_t __pyx_v_f_stride
#line 1116 "View.MemoryView"
;

#line 1116 "View.MemoryView"
  char __pyx_r;

#line 1116 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1116 "View.MemoryView"
  int __pyx_t_1;

#line 1116 "View.MemoryView"
  int __pyx_t_2;

#line 1116 "View.MemoryView"
  int __pyx_t_3;

#line 1116 "View.MemoryView"
  int __pyx_t_4;

#line 1116 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1116 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1116 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1116 "View.MemoryView"
  __Pyx_TraceCall("get_best_order", __pyx_f[1], 1116, 1, __PYX_ERR(1, 1116, __pyx_L1_error));

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __Pyx_TraceLine(1121,1,__PYX_ERR(1, 1121, __pyx_L1_error))

#line 1121 "View.MemoryView"
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __Pyx_TraceLine(1122,1,__PYX_ERR(1, 1122, __pyx_L1_error))

#line 1122 "View.MemoryView"
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  __Pyx_TraceLine(1124,1,__PYX_ERR(1, 1124, __pyx_L1_error))

#line 1124 "View.MemoryView"
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {

#line 1124 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __Pyx_TraceLine(1125,1,__PYX_ERR(1, 1125, __pyx_L1_error))

#line 1125 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);

#line 1125 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __Pyx_TraceLine(1126,1,__PYX_ERR(1, 1126, __pyx_L1_error))

#line 1126 "View.MemoryView"
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      __Pyx_TraceLine(1127,1,__PYX_ERR(1, 1127, __pyx_L1_error))

#line 1127 "View.MemoryView"
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */

#line 1125 "View.MemoryView"
    }

#line 1125 "View.MemoryView"
  }

#line 1125 "View.MemoryView"
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __Pyx_TraceLine(1129,1,__PYX_ERR(1, 1129, __pyx_L1_error))

#line 1129 "View.MemoryView"
  __pyx_t_1 = __pyx_v_ndim;

#line 1129 "View.MemoryView"
  __pyx_t_3 = __pyx_t_1;

#line 1129 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1129 "View.MemoryView"
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __Pyx_TraceLine(1130,1,__PYX_ERR(1, 1130, __pyx_L1_error))

#line 1130 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);

#line 1130 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __Pyx_TraceLine(1131,1,__PYX_ERR(1, 1131, __pyx_L1_error))

#line 1131 "View.MemoryView"
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      __Pyx_TraceLine(1132,1,__PYX_ERR(1, 1132, __pyx_L1_error))

#line 1132 "View.MemoryView"
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */

#line 1130 "View.MemoryView"
    }

#line 1130 "View.MemoryView"
  }

#line 1130 "View.MemoryView"
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __Pyx_TraceLine(1134,1,__PYX_ERR(1, 1134, __pyx_L1_error))

#line 1134 "View.MemoryView"
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);

#line 1134 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __Pyx_TraceLine(1135,1,__PYX_ERR(1, 1135, __pyx_L1_error))

#line 1135 "View.MemoryView"
    __pyx_r = 'C';

#line 1135 "View.MemoryView"
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */

#line 1134 "View.MemoryView"
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __Pyx_TraceLine(1137,1,__PYX_ERR(1, 1137, __pyx_L1_error))

#line 1137 "View.MemoryView"
  /*else*/ {

#line 1137 "View.MemoryView"
    __pyx_r = 'F';

#line 1137 "View.MemoryView"
    goto __pyx_L0;

#line 1137 "View.MemoryView"
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

#line 1116 "View.MemoryView"


#line 1116 "View.MemoryView"
  /* function exit code */

#line 1116 "View.MemoryView"
  __pyx_L1_error:;

#line 1116 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.get_best_order", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1116 "View.MemoryView"
  __pyx_r = 0;

#line 1116 "View.MemoryView"
  __pyx_L0:;

#line 1116 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1116 "View.MemoryView"
  return __pyx_r;

#line 1116 "View.MemoryView"
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

#line 1140 "View.MemoryView"


#line 1140 "View.MemoryView"
static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1140 "View.MemoryView"
;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent
#line 1140 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dst_extent
#line 1140 "View.MemoryView"
;
  Py_ssize_t __pyx_v_src_stride
#line 1140 "View.MemoryView"
;
  Py_ssize_t __pyx_v_dst_stride
#line 1140 "View.MemoryView"
;

#line 1140 "View.MemoryView"
  int __pyx_t_1;

#line 1140 "View.MemoryView"
  int __pyx_t_2;

#line 1140 "View.MemoryView"
  int __pyx_t_3;

#line 1140 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

#line 1140 "View.MemoryView"
  Py_ssize_t __pyx_t_5;

#line 1140 "View.MemoryView"
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */

#line 1147 "View.MemoryView"
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */

#line 1148 "View.MemoryView"
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */

#line 1149 "View.MemoryView"
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */

#line 1150 "View.MemoryView"
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */

#line 1152 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);

#line 1152 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1153 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);

#line 1153 "View.MemoryView"
    if (__pyx_t_2) {

#line 1153 "View.MemoryView"
    } else {

#line 1153 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 1153 "View.MemoryView"
      goto __pyx_L5_bool_binop_done;

#line 1153 "View.MemoryView"
    }

#line 1153 "View.MemoryView"
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);

#line 1153 "View.MemoryView"
    if (__pyx_t_2) {

#line 1153 "View.MemoryView"
    } else {

#line 1153 "View.MemoryView"
      __pyx_t_1 = __pyx_t_2;

#line 1153 "View.MemoryView"
      goto __pyx_L5_bool_binop_done;

#line 1153 "View.MemoryView"
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */

#line 1154 "View.MemoryView"
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);

#line 1154 "View.MemoryView"
    if (__pyx_t_2) {

#line 1154 "View.MemoryView"
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));

#line 1154 "View.MemoryView"
    }

#line 1154 "View.MemoryView"
    __pyx_t_3 = (__pyx_t_2 != 0);

#line 1154 "View.MemoryView"
    __pyx_t_1 = __pyx_t_3;

#line 1154 "View.MemoryView"
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1153 "View.MemoryView"
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */

#line 1155 "View.MemoryView"
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */

#line 1153 "View.MemoryView"
      goto __pyx_L4;

#line 1153 "View.MemoryView"
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */

#line 1157 "View.MemoryView"
    /*else*/ {

#line 1157 "View.MemoryView"
      __pyx_t_4 = __pyx_v_dst_extent;

#line 1157 "View.MemoryView"
      __pyx_t_5 = __pyx_t_4;

#line 1157 "View.MemoryView"
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1157 "View.MemoryView"
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */

#line 1158 "View.MemoryView"
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */

#line 1159 "View.MemoryView"
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */

#line 1160 "View.MemoryView"
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

#line 1160 "View.MemoryView"
      }

#line 1160 "View.MemoryView"
    }

#line 1160 "View.MemoryView"
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */

#line 1152 "View.MemoryView"
    goto __pyx_L3;

#line 1152 "View.MemoryView"
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */

#line 1162 "View.MemoryView"
  /*else*/ {

#line 1162 "View.MemoryView"
    __pyx_t_4 = __pyx_v_dst_extent;

#line 1162 "View.MemoryView"
    __pyx_t_5 = __pyx_t_4;

#line 1162 "View.MemoryView"
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1162 "View.MemoryView"
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */

#line 1163 "View.MemoryView"
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */

#line 1167 "View.MemoryView"
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */

#line 1168 "View.MemoryView"
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);

#line 1168 "View.MemoryView"
    }

#line 1168 "View.MemoryView"
  }

#line 1168 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

#line 1140 "View.MemoryView"


#line 1140 "View.MemoryView"
  /* function exit code */

#line 1140 "View.MemoryView"
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

#line 1170 "View.MemoryView"


#line 1170 "View.MemoryView"
static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

#line 1170 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1170 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1170 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1170 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1170 "View.MemoryView"
  __Pyx_TraceCall("copy_strided_to_strided", __pyx_f[1], 1170, 1, __PYX_ERR(1, 1170, __pyx_L1_error));

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  __Pyx_TraceLine(1173,1,__PYX_ERR(1, 1173, __pyx_L1_error))

#line 1173 "View.MemoryView"
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

#line 1170 "View.MemoryView"


#line 1170 "View.MemoryView"
  /* function exit code */

#line 1170 "View.MemoryView"
  goto __pyx_L0;

#line 1170 "View.MemoryView"
  __pyx_L1_error:;

#line 1170 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.copy_strided_to_strided", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1170 "View.MemoryView"
  __pyx_L0:;

#line 1170 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1170 "View.MemoryView"
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

#line 1177 "View.MemoryView"


#line 1177 "View.MemoryView"
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape
#line 1177 "View.MemoryView"
;
  Py_ssize_t __pyx_v_size
#line 1177 "View.MemoryView"
;

#line 1177 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1177 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1177 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1177 "View.MemoryView"
  Py_ssize_t *__pyx_t_2;

#line 1177 "View.MemoryView"
  Py_ssize_t *__pyx_t_3;

#line 1177 "View.MemoryView"
  Py_ssize_t *__pyx_t_4;

#line 1177 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1177 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1177 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1177 "View.MemoryView"
  __Pyx_TraceCall("slice_get_size", __pyx_f[1], 1177, 1, __PYX_ERR(1, 1177, __pyx_L1_error));

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __Pyx_TraceLine(1179,1,__PYX_ERR(1, 1179, __pyx_L1_error))

#line 1179 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

#line 1179 "View.MemoryView"
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __Pyx_TraceLine(1181,1,__PYX_ERR(1, 1181, __pyx_L1_error))

#line 1181 "View.MemoryView"
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);

#line 1181 "View.MemoryView"
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {

#line 1181 "View.MemoryView"
    __pyx_t_2 = __pyx_t_4;

#line 1181 "View.MemoryView"
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __Pyx_TraceLine(1182,1,__PYX_ERR(1, 1182, __pyx_L1_error))

#line 1182 "View.MemoryView"
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);

#line 1182 "View.MemoryView"
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __Pyx_TraceLine(1184,1,__PYX_ERR(1, 1184, __pyx_L1_error))

#line 1184 "View.MemoryView"
  __pyx_r = __pyx_v_size;

#line 1184 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

#line 1177 "View.MemoryView"


#line 1177 "View.MemoryView"
  /* function exit code */

#line 1177 "View.MemoryView"
  __pyx_L1_error:;

#line 1177 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.slice_get_size", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1177 "View.MemoryView"
  __pyx_r = 0;

#line 1177 "View.MemoryView"
  __pyx_L0:;

#line 1177 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1177 "View.MemoryView"
  return __pyx_r;

#line 1177 "View.MemoryView"
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

#line 1187 "View.MemoryView"


#line 1187 "View.MemoryView"
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx
#line 1187 "View.MemoryView"
;

#line 1187 "View.MemoryView"
  Py_ssize_t __pyx_r;

#line 1187 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1187 "View.MemoryView"
  int __pyx_t_1;

#line 1187 "View.MemoryView"
  int __pyx_t_2;

#line 1187 "View.MemoryView"
  int __pyx_t_3;

#line 1187 "View.MemoryView"
  int __pyx_t_4;

#line 1187 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1187 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1187 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1187 "View.MemoryView"
  __Pyx_TraceCall("fill_contig_strides_array", __pyx_f[1], 1187, 1, __PYX_ERR(1, 1187, __pyx_L1_error));

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __Pyx_TraceLine(1196,1,__PYX_ERR(1, 1196, __pyx_L1_error))

#line 1196 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);

#line 1196 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __Pyx_TraceLine(1197,1,__PYX_ERR(1, 1197, __pyx_L1_error))

#line 1197 "View.MemoryView"
    __pyx_t_2 = __pyx_v_ndim;

#line 1197 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1197 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1197 "View.MemoryView"
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      __Pyx_TraceLine(1198,1,__PYX_ERR(1, 1198, __pyx_L1_error))

#line 1198 "View.MemoryView"
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __Pyx_TraceLine(1199,1,__PYX_ERR(1, 1199, __pyx_L1_error))

#line 1199 "View.MemoryView"
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

#line 1199 "View.MemoryView"
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */

#line 1196 "View.MemoryView"
    goto __pyx_L3;

#line 1196 "View.MemoryView"
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  __Pyx_TraceLine(1201,1,__PYX_ERR(1, 1201, __pyx_L1_error))

#line 1201 "View.MemoryView"
  /*else*/ {

#line 1201 "View.MemoryView"
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {

#line 1201 "View.MemoryView"
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      __Pyx_TraceLine(1202,1,__PYX_ERR(1, 1202, __pyx_L1_error))

#line 1202 "View.MemoryView"
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __Pyx_TraceLine(1203,1,__PYX_ERR(1, 1203, __pyx_L1_error))

#line 1203 "View.MemoryView"
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));

#line 1203 "View.MemoryView"
    }

#line 1203 "View.MemoryView"
  }

#line 1203 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __Pyx_TraceLine(1205,1,__PYX_ERR(1, 1205, __pyx_L1_error))

#line 1205 "View.MemoryView"
  __pyx_r = __pyx_v_stride;

#line 1205 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

#line 1187 "View.MemoryView"


#line 1187 "View.MemoryView"
  /* function exit code */

#line 1187 "View.MemoryView"
  __pyx_L1_error:;

#line 1187 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.fill_contig_strides_array", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1187 "View.MemoryView"
  __pyx_r = 0;

#line 1187 "View.MemoryView"
  __pyx_L0:;

#line 1187 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1187 "View.MemoryView"
  return __pyx_r;

#line 1187 "View.MemoryView"
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

#line 1208 "View.MemoryView"


#line 1208 "View.MemoryView"
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i
#line 1208 "View.MemoryView"
;
  void *__pyx_v_result
#line 1208 "View.MemoryView"
;
  size_t __pyx_v_itemsize
#line 1208 "View.MemoryView"
;
  size_t __pyx_v_size
#line 1208 "View.MemoryView"
;

#line 1208 "View.MemoryView"
  void *__pyx_r;

#line 1208 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1208 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1208 "View.MemoryView"
  int __pyx_t_2;

#line 1208 "View.MemoryView"
  int __pyx_t_3;

#line 1208 "View.MemoryView"
  struct __pyx_memoryview_obj *__pyx_t_4;

#line 1208 "View.MemoryView"
  int __pyx_t_5;

#line 1208 "View.MemoryView"
  int __pyx_t_6;

#line 1208 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1208 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1208 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1208 "View.MemoryView"
  __Pyx_TraceCall("copy_data_to_temp", __pyx_f[1], 1208, 1, __PYX_ERR(1, 1208, __pyx_L1_error));

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __Pyx_TraceLine(1219,1,__PYX_ERR(1, 1219, __pyx_L1_error))

#line 1219 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;

#line 1219 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __Pyx_TraceLine(1220,1,__PYX_ERR(1, 1220, __pyx_L1_error))

#line 1220 "View.MemoryView"
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __Pyx_TraceLine(1222,1,__PYX_ERR(1, 1222, __pyx_L1_error))

#line 1222 "View.MemoryView"
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __Pyx_TraceLine(1223,1,__PYX_ERR(1, 1223, __pyx_L1_error))

#line 1223 "View.MemoryView"
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);

#line 1223 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(1224,1,__PYX_ERR(1, 1224, __pyx_L1_error))

#line 1224 "View.MemoryView"
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */

#line 1223 "View.MemoryView"
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __Pyx_TraceLine(1227,1,__PYX_ERR(1, 1227, __pyx_L1_error))

#line 1227 "View.MemoryView"
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __Pyx_TraceLine(1228,1,__PYX_ERR(1, 1228, __pyx_L1_error))

#line 1228 "View.MemoryView"
  __pyx_t_4 = __pyx_v_src->memview;

#line 1228 "View.MemoryView"
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __Pyx_TraceLine(1229,1,__PYX_ERR(1, 1229, __pyx_L1_error))

#line 1229 "View.MemoryView"
  __pyx_t_3 = __pyx_v_ndim;

#line 1229 "View.MemoryView"
  __pyx_t_5 = __pyx_t_3;

#line 1229 "View.MemoryView"
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1229 "View.MemoryView"
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    __Pyx_TraceLine(1230,1,__PYX_ERR(1, 1230, __pyx_L1_error))

#line 1230 "View.MemoryView"
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    __Pyx_TraceLine(1231,1,__PYX_ERR(1, 1231, __pyx_L1_error))

#line 1231 "View.MemoryView"
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;

#line 1231 "View.MemoryView"
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  __Pyx_TraceLine(1233,1,__PYX_ERR(1, 1233, __pyx_L1_error))

#line 1233 "View.MemoryView"
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __Pyx_TraceLine(1237,1,__PYX_ERR(1, 1237, __pyx_L1_error))

#line 1237 "View.MemoryView"
  __pyx_t_3 = __pyx_v_ndim;

#line 1237 "View.MemoryView"
  __pyx_t_5 = __pyx_t_3;

#line 1237 "View.MemoryView"
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 1237 "View.MemoryView"
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __Pyx_TraceLine(1238,1,__PYX_ERR(1, 1238, __pyx_L1_error))

#line 1238 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);

#line 1238 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      __Pyx_TraceLine(1239,1,__PYX_ERR(1, 1239, __pyx_L1_error))

#line 1239 "View.MemoryView"
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */

#line 1238 "View.MemoryView"
    }

#line 1238 "View.MemoryView"
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __Pyx_TraceLine(1241,1,__PYX_ERR(1, 1241, __pyx_L1_error))

#line 1241 "View.MemoryView"
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);

#line 1241 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    __Pyx_TraceLine(1242,1,__PYX_ERR(1, 1242, __pyx_L1_error))

#line 1242 "View.MemoryView"
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */

#line 1241 "View.MemoryView"
    goto __pyx_L9;

#line 1241 "View.MemoryView"
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __Pyx_TraceLine(1244,1,__PYX_ERR(1, 1244, __pyx_L1_error))

#line 1244 "View.MemoryView"
  /*else*/ {

#line 1244 "View.MemoryView"
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);

#line 1244 "View.MemoryView"
  }

#line 1244 "View.MemoryView"
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1246,1,__PYX_ERR(1, 1246, __pyx_L1_error))

#line 1246 "View.MemoryView"
  __pyx_r = __pyx_v_result;

#line 1246 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

#line 1208 "View.MemoryView"


#line 1208 "View.MemoryView"
  /* function exit code */

#line 1208 "View.MemoryView"
  __pyx_L1_error:;

#line 1208 "View.MemoryView"
  {

#line 1208 "View.MemoryView"
    #ifdef WITH_THREAD
    PyGILState_STATE 
#line 1208 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1208 "View.MemoryView"
    #endif

#line 1208 "View.MemoryView"
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1208 "View.MemoryView"
    #ifdef WITH_THREAD

#line 1208 "View.MemoryView"
    __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1208 "View.MemoryView"
    #endif

#line 1208 "View.MemoryView"
  }

#line 1208 "View.MemoryView"
  __pyx_r = NULL;

#line 1208 "View.MemoryView"
  __pyx_L0:;

#line 1208 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1208 "View.MemoryView"
  return __pyx_r;

#line 1208 "View.MemoryView"
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

#line 1251 "View.MemoryView"


#line 1251 "View.MemoryView"
static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {

#line 1251 "View.MemoryView"
  int __pyx_r;

#line 1251 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1251 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1251 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1251 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1251 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 1251 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 1251 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1251 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1251 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1251 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1251 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1251 "View.MemoryView"
  #endif

#line 1251 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err_extents", 0);

#line 1251 "View.MemoryView"
  __Pyx_TraceCall("_err_extents", __pyx_f[1], 1251, 0, __PYX_ERR(1, 1251, __pyx_L1_error));

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __Pyx_TraceLine(1254,0,__PYX_ERR(1, 1254, __pyx_L1_error))

#line 1254 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1254, __pyx_L1_error)

#line 1254 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1254 "View.MemoryView"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1254, __pyx_L1_error)

#line 1254 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1254 "View.MemoryView"
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1254, __pyx_L1_error)

#line 1254 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 1254 "View.MemoryView"
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1254, __pyx_L1_error)

#line 1254 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1254 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1254 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 1254 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_2);

#line 1254 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);

#line 1254 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_3);

#line 1254 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);

#line 1254 "View.MemoryView"
  __pyx_t_1 = 0;

#line 1254 "View.MemoryView"
  __pyx_t_2 = 0;

#line 1254 "View.MemoryView"
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __Pyx_TraceLine(1253,0,__PYX_ERR(1, 1253, __pyx_L1_error))

#line 1253 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1253, __pyx_L1_error)

#line 1253 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 1253 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1253 "View.MemoryView"
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1253, __pyx_L1_error)

#line 1253 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1253 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1253 "View.MemoryView"
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 1253 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1253 "View.MemoryView"
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

#line 1251 "View.MemoryView"


#line 1251 "View.MemoryView"
  /* function exit code */

#line 1251 "View.MemoryView"
  __pyx_L1_error:;

#line 1251 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1251 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1251 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 1251 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 1251 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1251 "View.MemoryView"
  __pyx_r = -1;

#line 1251 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1251 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1251 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1251 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1251 "View.MemoryView"
  #endif

#line 1251 "View.MemoryView"
  return __pyx_r;

#line 1251 "View.MemoryView"
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

#line 1257 "View.MemoryView"


#line 1257 "View.MemoryView"
static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {

#line 1257 "View.MemoryView"
  int __pyx_r;

#line 1257 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1257 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1257 "View.MemoryView"
  PyObject *__pyx_t_1 = NULL;

#line 1257 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1257 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 1257 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 1257 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1257 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1257 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1257 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1257 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1257 "View.MemoryView"
  #endif

#line 1257 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err_dim", 0);

#line 1257 "View.MemoryView"
  __Pyx_TraceCall("_err_dim", __pyx_f[1], 1257, 0, __PYX_ERR(1, 1257, __pyx_L1_error));

#line 1257 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __Pyx_TraceLine(1258,0,__PYX_ERR(1, 1258, __pyx_L1_error))

#line 1258 "View.MemoryView"
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1258, __pyx_L1_error)

#line 1258 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_2);

#line 1258 "View.MemoryView"
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1258, __pyx_L1_error)

#line 1258 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_3);

#line 1258 "View.MemoryView"
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1258, __pyx_L1_error)

#line 1258 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_4);

#line 1258 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1258 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1258 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; 
#line 1258 "View.MemoryView"
__pyx_t_2 = NULL;

#line 1258 "View.MemoryView"
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 1258 "View.MemoryView"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 1258 "View.MemoryView"
    if (likely(__pyx_t_2)) {

#line 1258 "View.MemoryView"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 1258 "View.MemoryView"
      __Pyx_INCREF(__pyx_t_2);

#line 1258 "View.MemoryView"
      __Pyx_INCREF(function);

#line 1258 "View.MemoryView"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 1258 "View.MemoryView"
    }

#line 1258 "View.MemoryView"
  }

#line 1258 "View.MemoryView"
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);

#line 1258 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1258 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1258 "View.MemoryView"
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1258, __pyx_L1_error)

#line 1258 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 1258 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1258 "View.MemoryView"
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 1258 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1258 "View.MemoryView"
  __PYX_ERR(1, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

#line 1257 "View.MemoryView"


#line 1257 "View.MemoryView"
  /* function exit code */

#line 1257 "View.MemoryView"
  __pyx_L1_error:;

#line 1257 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_1);

#line 1257 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1257 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 1257 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 1257 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1257 "View.MemoryView"
  __pyx_r = -1;

#line 1257 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_error);

#line 1257 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1257 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1257 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1257 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1257 "View.MemoryView"
  #endif

#line 1257 "View.MemoryView"
  return __pyx_r;

#line 1257 "View.MemoryView"
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

#line 1261 "View.MemoryView"


#line 1261 "View.MemoryView"
static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {

#line 1261 "View.MemoryView"
  int __pyx_r;

#line 1261 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1261 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1261 "View.MemoryView"
  int __pyx_t_1;

#line 1261 "View.MemoryView"
  PyObject *__pyx_t_2 = NULL;

#line 1261 "View.MemoryView"
  PyObject *__pyx_t_3 = NULL;

#line 1261 "View.MemoryView"
  PyObject *__pyx_t_4 = NULL;

#line 1261 "View.MemoryView"
  PyObject *__pyx_t_5 = NULL;

#line 1261 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1261 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1261 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1261 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1261 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1261 "View.MemoryView"
  #endif

#line 1261 "View.MemoryView"
  __Pyx_RefNannySetupContext("_err", 0);

#line 1261 "View.MemoryView"
  __Pyx_TraceCall("_err", __pyx_f[1], 1261, 0, __PYX_ERR(1, 1261, __pyx_L1_error));

#line 1261 "View.MemoryView"
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __Pyx_TraceLine(1262,0,__PYX_ERR(1, 1262, __pyx_L1_error))

#line 1262 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);

#line 1262 "View.MemoryView"
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __Pyx_TraceLine(1263,0,__PYX_ERR(1, 1263, __pyx_L1_error))

#line 1263 "View.MemoryView"
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1263, __pyx_L1_error)

#line 1263 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_3);

#line 1263 "View.MemoryView"
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; 
#line 1263 "View.MemoryView"
__pyx_t_5 = NULL;

#line 1263 "View.MemoryView"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 1263 "View.MemoryView"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 1263 "View.MemoryView"
      if (likely(__pyx_t_5)) {

#line 1263 "View.MemoryView"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 1263 "View.MemoryView"
        __Pyx_INCREF(__pyx_t_5);

#line 1263 "View.MemoryView"
        __Pyx_INCREF(function);

#line 1263 "View.MemoryView"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 1263 "View.MemoryView"
      }

#line 1263 "View.MemoryView"
    }

#line 1263 "View.MemoryView"
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);

#line 1263 "View.MemoryView"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 1263 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1263 "View.MemoryView"
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1263, __pyx_L1_error)

#line 1263 "View.MemoryView"
    __Pyx_GOTREF(__pyx_t_2);

#line 1263 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1263 "View.MemoryView"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 1263 "View.MemoryView"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1263 "View.MemoryView"
    __PYX_ERR(1, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */

#line 1262 "View.MemoryView"
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  __Pyx_TraceLine(1265,0,__PYX_ERR(1, 1265, __pyx_L1_error))

#line 1265 "View.MemoryView"
  /*else*/ {

#line 1265 "View.MemoryView"
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);

#line 1265 "View.MemoryView"
    __PYX_ERR(1, 1265, __pyx_L1_error)

#line 1265 "View.MemoryView"
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

#line 1261 "View.MemoryView"


#line 1261 "View.MemoryView"
  /* function exit code */

#line 1261 "View.MemoryView"
  __pyx_L1_error:;

#line 1261 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_2);

#line 1261 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_3);

#line 1261 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_4);

#line 1261 "View.MemoryView"
  __Pyx_XDECREF(__pyx_t_5);

#line 1261 "View.MemoryView"
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1261 "View.MemoryView"
  __pyx_r = -1;

#line 1261 "View.MemoryView"
  __Pyx_XDECREF(__pyx_v_error);

#line 1261 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1261 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1261 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1261 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1261 "View.MemoryView"
  #endif

#line 1261 "View.MemoryView"
  return __pyx_r;

#line 1261 "View.MemoryView"
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

#line 1268 "View.MemoryView"


#line 1268 "View.MemoryView"
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata
#line 1268 "View.MemoryView"
;
  size_t __pyx_v_itemsize
#line 1268 "View.MemoryView"
;
  int __pyx_v_i
#line 1268 "View.MemoryView"
;
  char __pyx_v_order
#line 1268 "View.MemoryView"
;
  int __pyx_v_broadcasting
#line 1268 "View.MemoryView"
;
  int __pyx_v_direct_copy
#line 1268 "View.MemoryView"
;
  __Pyx_memviewslice __pyx_v_tmp
#line 1268 "View.MemoryView"
;
  int __pyx_v_ndim
#line 1268 "View.MemoryView"
;

#line 1268 "View.MemoryView"
  int __pyx_r;

#line 1268 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1268 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1268 "View.MemoryView"
  int __pyx_t_2;

#line 1268 "View.MemoryView"
  int __pyx_t_3;

#line 1268 "View.MemoryView"
  int __pyx_t_4;

#line 1268 "View.MemoryView"
  int __pyx_t_5;

#line 1268 "View.MemoryView"
  int __pyx_t_6;

#line 1268 "View.MemoryView"
  void *__pyx_t_7;

#line 1268 "View.MemoryView"
  int __pyx_t_8;

#line 1268 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1268 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1268 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1268 "View.MemoryView"
  __Pyx_TraceCall("memoryview_copy_contents", __pyx_f[1], 1268, 1, __PYX_ERR(1, 1268, __pyx_L1_error));

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __Pyx_TraceLine(1276,1,__PYX_ERR(1, 1276, __pyx_L1_error))

#line 1276 "View.MemoryView"
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __Pyx_TraceLine(1277,1,__PYX_ERR(1, 1277, __pyx_L1_error))

#line 1277 "View.MemoryView"
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;

#line 1277 "View.MemoryView"
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __Pyx_TraceLine(1279,1,__PYX_ERR(1, 1279, __pyx_L1_error))

#line 1279 "View.MemoryView"
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __Pyx_TraceLine(1280,1,__PYX_ERR(1, 1280, __pyx_L1_error))

#line 1280 "View.MemoryView"
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __Pyx_TraceLine(1281,1,__PYX_ERR(1, 1281, __pyx_L1_error))

#line 1281 "View.MemoryView"
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __Pyx_TraceLine(1284,1,__PYX_ERR(1, 1284, __pyx_L1_error))

#line 1284 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);

#line 1284 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __Pyx_TraceLine(1285,1,__PYX_ERR(1, 1285, __pyx_L1_error))

#line 1285 "View.MemoryView"
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */

#line 1284 "View.MemoryView"
    goto __pyx_L3;

#line 1284 "View.MemoryView"
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __Pyx_TraceLine(1286,1,__PYX_ERR(1, 1286, __pyx_L1_error))

#line 1286 "View.MemoryView"
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);

#line 1286 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __Pyx_TraceLine(1287,1,__PYX_ERR(1, 1287, __pyx_L1_error))

#line 1287 "View.MemoryView"
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */

#line 1286 "View.MemoryView"
  }

#line 1286 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __Pyx_TraceLine(1289,1,__PYX_ERR(1, 1289, __pyx_L1_error))

#line 1289 "View.MemoryView"
  __pyx_t_3 = __pyx_v_dst_ndim;

#line 1289 "View.MemoryView"
  __pyx_t_4 = __pyx_v_src_ndim;

#line 1289 "View.MemoryView"
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {

#line 1289 "View.MemoryView"
    __pyx_t_5 = __pyx_t_3;

#line 1289 "View.MemoryView"
  } else {

#line 1289 "View.MemoryView"
    __pyx_t_5 = __pyx_t_4;

#line 1289 "View.MemoryView"
  }

#line 1289 "View.MemoryView"
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __Pyx_TraceLine(1291,1,__PYX_ERR(1, 1291, __pyx_L1_error))

#line 1291 "View.MemoryView"
  __pyx_t_5 = __pyx_v_ndim;

#line 1291 "View.MemoryView"
  __pyx_t_3 = __pyx_t_5;

#line 1291 "View.MemoryView"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1291 "View.MemoryView"
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __Pyx_TraceLine(1292,1,__PYX_ERR(1, 1292, __pyx_L1_error))

#line 1292 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);

#line 1292 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __Pyx_TraceLine(1293,1,__PYX_ERR(1, 1293, __pyx_L1_error))

#line 1293 "View.MemoryView"
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);

#line 1293 "View.MemoryView"
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __Pyx_TraceLine(1294,1,__PYX_ERR(1, 1294, __pyx_L1_error))

#line 1294 "View.MemoryView"
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        __Pyx_TraceLine(1295,1,__PYX_ERR(1, 1295, __pyx_L1_error))

#line 1295 "View.MemoryView"
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */

#line 1293 "View.MemoryView"
        goto __pyx_L7;

#line 1293 "View.MemoryView"
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      __Pyx_TraceLine(1297,1,__PYX_ERR(1, 1297, __pyx_L1_error))

#line 1297 "View.MemoryView"
      /*else*/ {

#line 1297 "View.MemoryView"
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)

#line 1297 "View.MemoryView"
      }

#line 1297 "View.MemoryView"
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */

#line 1292 "View.MemoryView"
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __Pyx_TraceLine(1299,1,__PYX_ERR(1, 1299, __pyx_L1_error))

#line 1299 "View.MemoryView"
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);

#line 1299 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __Pyx_TraceLine(1300,1,__PYX_ERR(1, 1300, __pyx_L1_error))

#line 1300 "View.MemoryView"
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */

#line 1299 "View.MemoryView"
    }

#line 1299 "View.MemoryView"
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __Pyx_TraceLine(1302,1,__PYX_ERR(1, 1302, __pyx_L1_error))

#line 1302 "View.MemoryView"
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);

#line 1302 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __Pyx_TraceLine(1304,1,__PYX_ERR(1, 1304, __pyx_L1_error))

#line 1304 "View.MemoryView"
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);

#line 1304 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __Pyx_TraceLine(1305,1,__PYX_ERR(1, 1305, __pyx_L1_error))

#line 1305 "View.MemoryView"
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */

#line 1304 "View.MemoryView"
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __Pyx_TraceLine(1307,1,__PYX_ERR(1, 1307, __pyx_L1_error))

#line 1307 "View.MemoryView"
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1307, __pyx_L1_error)

#line 1307 "View.MemoryView"
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __Pyx_TraceLine(1308,1,__PYX_ERR(1, 1308, __pyx_L1_error))

#line 1308 "View.MemoryView"
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */

#line 1302 "View.MemoryView"
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1310,1,__PYX_ERR(1, 1310, __pyx_L1_error))

#line 1310 "View.MemoryView"
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);

#line 1310 "View.MemoryView"
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __Pyx_TraceLine(1313,1,__PYX_ERR(1, 1313, __pyx_L1_error))

#line 1313 "View.MemoryView"
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);

#line 1313 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __Pyx_TraceLine(1314,1,__PYX_ERR(1, 1314, __pyx_L1_error))

#line 1314 "View.MemoryView"
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */

#line 1313 "View.MemoryView"
      goto __pyx_L12;

#line 1313 "View.MemoryView"
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __Pyx_TraceLine(1315,1,__PYX_ERR(1, 1315, __pyx_L1_error))

#line 1315 "View.MemoryView"
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);

#line 1315 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __Pyx_TraceLine(1316,1,__PYX_ERR(1, 1316, __pyx_L1_error))

#line 1316 "View.MemoryView"
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */

#line 1315 "View.MemoryView"
    }

#line 1315 "View.MemoryView"
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __Pyx_TraceLine(1318,1,__PYX_ERR(1, 1318, __pyx_L1_error))

#line 1318 "View.MemoryView"
    __pyx_t_2 = (__pyx_v_direct_copy != 0);

#line 1318 "View.MemoryView"
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __Pyx_TraceLine(1320,1,__PYX_ERR(1, 1320, __pyx_L1_error))

#line 1320 "View.MemoryView"
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      __Pyx_TraceLine(1321,1,__PYX_ERR(1, 1321, __pyx_L1_error))

#line 1321 "View.MemoryView"
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __Pyx_TraceLine(1322,1,__PYX_ERR(1, 1322, __pyx_L1_error))

#line 1322 "View.MemoryView"
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      __Pyx_TraceLine(1323,1,__PYX_ERR(1, 1323, __pyx_L1_error))

#line 1323 "View.MemoryView"
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __Pyx_TraceLine(1324,1,__PYX_ERR(1, 1324, __pyx_L1_error))

#line 1324 "View.MemoryView"
      __pyx_r = 0;

#line 1324 "View.MemoryView"
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */

#line 1318 "View.MemoryView"
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1310 "View.MemoryView"
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1326,1,__PYX_ERR(1, 1326, __pyx_L1_error))

#line 1326 "View.MemoryView"
  __pyx_t_2 = (__pyx_v_order == 'F');

#line 1326 "View.MemoryView"
  if (__pyx_t_2) {

#line 1326 "View.MemoryView"
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));

#line 1326 "View.MemoryView"
  }

#line 1326 "View.MemoryView"
  __pyx_t_8 = (__pyx_t_2 != 0);

#line 1326 "View.MemoryView"
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __Pyx_TraceLine(1329,1,__PYX_ERR(1, 1329, __pyx_L1_error))

#line 1329 "View.MemoryView"
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __Pyx_TraceLine(1330,1,__PYX_ERR(1, 1330, __pyx_L1_error))

#line 1330 "View.MemoryView"
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1326 "View.MemoryView"
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __Pyx_TraceLine(1332,1,__PYX_ERR(1, 1332, __pyx_L1_error))

#line 1332 "View.MemoryView"
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  __Pyx_TraceLine(1333,1,__PYX_ERR(1, 1333, __pyx_L1_error))

#line 1333 "View.MemoryView"
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __Pyx_TraceLine(1334,1,__PYX_ERR(1, 1334, __pyx_L1_error))

#line 1334 "View.MemoryView"
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __Pyx_TraceLine(1336,1,__PYX_ERR(1, 1336, __pyx_L1_error))

#line 1336 "View.MemoryView"
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __Pyx_TraceLine(1337,1,__PYX_ERR(1, 1337, __pyx_L1_error))

#line 1337 "View.MemoryView"
  __pyx_r = 0;

#line 1337 "View.MemoryView"
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

#line 1268 "View.MemoryView"


#line 1268 "View.MemoryView"
  /* function exit code */

#line 1268 "View.MemoryView"
  __pyx_L1_error:;

#line 1268 "View.MemoryView"
  {

#line 1268 "View.MemoryView"
    #ifdef WITH_THREAD
    PyGILState_STATE 
#line 1268 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1268 "View.MemoryView"
    #endif

#line 1268 "View.MemoryView"
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1268 "View.MemoryView"
    #ifdef WITH_THREAD

#line 1268 "View.MemoryView"
    __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1268 "View.MemoryView"
    #endif

#line 1268 "View.MemoryView"
  }

#line 1268 "View.MemoryView"
  __pyx_r = -1;

#line 1268 "View.MemoryView"
  __pyx_L0:;

#line 1268 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1268 "View.MemoryView"
  return __pyx_r;

#line 1268 "View.MemoryView"
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

#line 1340 "View.MemoryView"


#line 1340 "View.MemoryView"
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i
#line 1340 "View.MemoryView"
;
  int __pyx_v_offset
#line 1340 "View.MemoryView"
;

#line 1340 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1340 "View.MemoryView"
  int __pyx_t_1;

#line 1340 "View.MemoryView"
  int __pyx_t_2;

#line 1340 "View.MemoryView"
  int __pyx_t_3;

#line 1340 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1340 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1340 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1340 "View.MemoryView"
  __Pyx_TraceCall("broadcast_leading", __pyx_f[1], 1340, 1, __PYX_ERR(1, 1340, __pyx_L1_error));

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __Pyx_TraceLine(1344,1,__PYX_ERR(1, 1344, __pyx_L1_error))

#line 1344 "View.MemoryView"
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  __Pyx_TraceLine(1346,1,__PYX_ERR(1, 1346, __pyx_L1_error))

#line 1346 "View.MemoryView"
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {

#line 1346 "View.MemoryView"
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    __Pyx_TraceLine(1347,1,__PYX_ERR(1, 1347, __pyx_L1_error))

#line 1347 "View.MemoryView"
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    __Pyx_TraceLine(1348,1,__PYX_ERR(1, 1348, __pyx_L1_error))

#line 1348 "View.MemoryView"
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    __Pyx_TraceLine(1349,1,__PYX_ERR(1, 1349, __pyx_L1_error))

#line 1349 "View.MemoryView"
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);

#line 1349 "View.MemoryView"
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __Pyx_TraceLine(1351,1,__PYX_ERR(1, 1351, __pyx_L1_error))

#line 1351 "View.MemoryView"
  __pyx_t_1 = __pyx_v_offset;

#line 1351 "View.MemoryView"
  __pyx_t_2 = __pyx_t_1;

#line 1351 "View.MemoryView"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 1351 "View.MemoryView"
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    __Pyx_TraceLine(1352,1,__PYX_ERR(1, 1352, __pyx_L1_error))

#line 1352 "View.MemoryView"
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    __Pyx_TraceLine(1353,1,__PYX_ERR(1, 1353, __pyx_L1_error))

#line 1353 "View.MemoryView"
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(1354,1,__PYX_ERR(1, 1354, __pyx_L1_error))

#line 1354 "View.MemoryView"
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;

#line 1354 "View.MemoryView"
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

#line 1340 "View.MemoryView"


#line 1340 "View.MemoryView"
  /* function exit code */

#line 1340 "View.MemoryView"
  goto __pyx_L0;

#line 1340 "View.MemoryView"
  __pyx_L1_error:;

#line 1340 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.broadcast_leading", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1340 "View.MemoryView"
  __pyx_L0:;

#line 1340 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1340 "View.MemoryView"
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

#line 1362 "View.MemoryView"


#line 1362 "View.MemoryView"
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {

#line 1362 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1362 "View.MemoryView"
  int __pyx_t_1;

#line 1362 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1362 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1362 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1362 "View.MemoryView"
  __Pyx_TraceCall("refcount_copying", __pyx_f[1], 1362, 1, __PYX_ERR(1, 1362, __pyx_L1_error));

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __Pyx_TraceLine(1366,1,__PYX_ERR(1, 1366, __pyx_L1_error))

#line 1366 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);

#line 1366 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __Pyx_TraceLine(1367,1,__PYX_ERR(1, 1367, __pyx_L1_error))

#line 1367 "View.MemoryView"
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */

#line 1366 "View.MemoryView"
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

#line 1362 "View.MemoryView"


#line 1362 "View.MemoryView"
  /* function exit code */

#line 1362 "View.MemoryView"
  goto __pyx_L0;

#line 1362 "View.MemoryView"
  __pyx_L1_error:;

#line 1362 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.refcount_copying", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1362 "View.MemoryView"
  __pyx_L0:;

#line 1362 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1362 "View.MemoryView"
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

#line 1371 "View.MemoryView"


#line 1371 "View.MemoryView"
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {

#line 1371 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1371 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1371 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1371 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1371 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1371 "View.MemoryView"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 1371 "View.MemoryView"
__pyx_gilstate_save = __Pyx_PyGILState_Ensure();

#line 1371 "View.MemoryView"
  #endif

#line 1371 "View.MemoryView"
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

#line 1371 "View.MemoryView"
  __Pyx_TraceCall("refcount_objects_in_slice_with_gil", __pyx_f[1], 1371, 0, __PYX_ERR(1, 1371, __pyx_L1_error));

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __Pyx_TraceLine(1374,0,__PYX_ERR(1, 1374, __pyx_L1_error))

#line 1374 "View.MemoryView"
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

#line 1371 "View.MemoryView"


#line 1371 "View.MemoryView"
  /* function exit code */

#line 1371 "View.MemoryView"
  goto __pyx_L0;

#line 1371 "View.MemoryView"
  __pyx_L1_error:;

#line 1371 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice_with_gil", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 1371 "View.MemoryView"
  __pyx_L0:;

#line 1371 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1371 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1371 "View.MemoryView"
  #ifdef WITH_THREAD

#line 1371 "View.MemoryView"
  __Pyx_PyGILState_Release(__pyx_gilstate_save);

#line 1371 "View.MemoryView"
  #endif

#line 1371 "View.MemoryView"
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

#line 1377 "View.MemoryView"


#line 1377 "View.MemoryView"
static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1377 "View.MemoryView"
;

#line 1377 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1377 "View.MemoryView"
  __Pyx_RefNannyDeclarations

#line 1377 "View.MemoryView"
  Py_ssize_t __pyx_t_1;

#line 1377 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 1377 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 1377 "View.MemoryView"
  int __pyx_t_4;

#line 1377 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1377 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1377 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1377 "View.MemoryView"
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

#line 1377 "View.MemoryView"
  __Pyx_TraceCall("refcount_objects_in_slice", __pyx_f[1], 1377, 0, __PYX_ERR(1, 1377, __pyx_L1_error));

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __Pyx_TraceLine(1381,0,__PYX_ERR(1, 1381, __pyx_L1_error))

#line 1381 "View.MemoryView"
  __pyx_t_1 = (__pyx_v_shape[0]);

#line 1381 "View.MemoryView"
  __pyx_t_2 = __pyx_t_1;

#line 1381 "View.MemoryView"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 1381 "View.MemoryView"
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __Pyx_TraceLine(1382,0,__PYX_ERR(1, 1382, __pyx_L1_error))

#line 1382 "View.MemoryView"
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);

#line 1382 "View.MemoryView"
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __Pyx_TraceLine(1383,0,__PYX_ERR(1, 1383, __pyx_L1_error))

#line 1383 "View.MemoryView"
      __pyx_t_4 = (__pyx_v_inc != 0);

#line 1383 "View.MemoryView"
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        __Pyx_TraceLine(1384,0,__PYX_ERR(1, 1384, __pyx_L1_error))

#line 1384 "View.MemoryView"
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */

#line 1383 "View.MemoryView"
        goto __pyx_L6;

#line 1383 "View.MemoryView"
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      __Pyx_TraceLine(1386,0,__PYX_ERR(1, 1386, __pyx_L1_error))

#line 1386 "View.MemoryView"
      /*else*/ {

#line 1386 "View.MemoryView"
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));

#line 1386 "View.MemoryView"
      }

#line 1386 "View.MemoryView"
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */

#line 1382 "View.MemoryView"
      goto __pyx_L5;

#line 1382 "View.MemoryView"
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    __Pyx_TraceLine(1388,0,__PYX_ERR(1, 1388, __pyx_L1_error))

#line 1388 "View.MemoryView"
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __Pyx_TraceLine(1389,0,__PYX_ERR(1, 1389, __pyx_L1_error))

#line 1389 "View.MemoryView"
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);

#line 1389 "View.MemoryView"
    }

#line 1389 "View.MemoryView"
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_TraceLine(1391,0,__PYX_ERR(1, 1391, __pyx_L1_error))

#line 1391 "View.MemoryView"
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));

#line 1391 "View.MemoryView"
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

#line 1377 "View.MemoryView"


#line 1377 "View.MemoryView"
  /* function exit code */

#line 1377 "View.MemoryView"
  goto __pyx_L0;

#line 1377 "View.MemoryView"
  __pyx_L1_error:;

#line 1377 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.refcount_objects_in_slice", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);

#line 1377 "View.MemoryView"
  __pyx_L0:;

#line 1377 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 0);

#line 1377 "View.MemoryView"
  __Pyx_RefNannyFinishContext();

#line 1377 "View.MemoryView"
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

#line 1397 "View.MemoryView"


#line 1397 "View.MemoryView"
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

#line 1397 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1397 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1397 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1397 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1397 "View.MemoryView"
  __Pyx_TraceCall("slice_assign_scalar", __pyx_f[1], 1397, 1, __PYX_ERR(1, 1397, __pyx_L1_error));

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __Pyx_TraceLine(1400,1,__PYX_ERR(1, 1400, __pyx_L1_error))

#line 1400 "View.MemoryView"
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __Pyx_TraceLine(1401,1,__PYX_ERR(1, 1401, __pyx_L1_error))

#line 1401 "View.MemoryView"
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(1403,1,__PYX_ERR(1, 1403, __pyx_L1_error))

#line 1403 "View.MemoryView"
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

#line 1397 "View.MemoryView"


#line 1397 "View.MemoryView"
  /* function exit code */

#line 1397 "View.MemoryView"
  goto __pyx_L0;

#line 1397 "View.MemoryView"
  __pyx_L1_error:;

#line 1397 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView.slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1397 "View.MemoryView"
  __pyx_L0:;

#line 1397 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1397 "View.MemoryView"
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

#line 1407 "View.MemoryView"


#line 1407 "View.MemoryView"
static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i
#line 1407 "View.MemoryView"
;
  Py_ssize_t __pyx_v_stride
#line 1407 "View.MemoryView"
;
  Py_ssize_t __pyx_v_extent
#line 1407 "View.MemoryView"
;

#line 1407 "View.MemoryView"
  __Pyx_TraceDeclarations

#line 1407 "View.MemoryView"
  int __pyx_t_1;

#line 1407 "View.MemoryView"
  Py_ssize_t __pyx_t_2;

#line 1407 "View.MemoryView"
  Py_ssize_t __pyx_t_3;

#line 1407 "View.MemoryView"
  Py_ssize_t __pyx_t_4;

#line 1407 "View.MemoryView"
  int __pyx_lineno = 0;

#line 1407 "View.MemoryView"
  const char *__pyx_filename = NULL;

#line 1407 "View.MemoryView"
  int __pyx_clineno = 0;

#line 1407 "View.MemoryView"
  __Pyx_TraceCall("_slice_assign_scalar", __pyx_f[1], 1407, 1, __PYX_ERR(1, 1407, __pyx_L1_error));

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __Pyx_TraceLine(1411,1,__PYX_ERR(1, 1411, __pyx_L1_error))

#line 1411 "View.MemoryView"
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __Pyx_TraceLine(1412,1,__PYX_ERR(1, 1412, __pyx_L1_error))

#line 1412 "View.MemoryView"
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __Pyx_TraceLine(1414,1,__PYX_ERR(1, 1414, __pyx_L1_error))

#line 1414 "View.MemoryView"
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);

#line 1414 "View.MemoryView"
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __Pyx_TraceLine(1415,1,__PYX_ERR(1, 1415, __pyx_L1_error))

#line 1415 "View.MemoryView"
    __pyx_t_2 = __pyx_v_extent;

#line 1415 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1415 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1415 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      __Pyx_TraceLine(1416,1,__PYX_ERR(1, 1416, __pyx_L1_error))

#line 1416 "View.MemoryView"
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __Pyx_TraceLine(1417,1,__PYX_ERR(1, 1417, __pyx_L1_error))

#line 1417 "View.MemoryView"
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

#line 1417 "View.MemoryView"
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */

#line 1414 "View.MemoryView"
    goto __pyx_L3;

#line 1414 "View.MemoryView"
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  __Pyx_TraceLine(1419,1,__PYX_ERR(1, 1419, __pyx_L1_error))

#line 1419 "View.MemoryView"
  /*else*/ {

#line 1419 "View.MemoryView"
    __pyx_t_2 = __pyx_v_extent;

#line 1419 "View.MemoryView"
    __pyx_t_3 = __pyx_t_2;

#line 1419 "View.MemoryView"
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 1419 "View.MemoryView"
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __Pyx_TraceLine(1420,1,__PYX_ERR(1, 1420, __pyx_L1_error))

#line 1420 "View.MemoryView"
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_TraceLine(1422,1,__PYX_ERR(1, 1422, __pyx_L1_error))

#line 1422 "View.MemoryView"
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);

#line 1422 "View.MemoryView"
    }

#line 1422 "View.MemoryView"
  }

#line 1422 "View.MemoryView"
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

#line 1407 "View.MemoryView"


#line 1407 "View.MemoryView"
  /* function exit code */

#line 1407 "View.MemoryView"
  goto __pyx_L0;

#line 1407 "View.MemoryView"
  __pyx_L1_error:;

#line 1407 "View.MemoryView"
  __Pyx_WriteUnraisable("View.MemoryView._slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);

#line 1407 "View.MemoryView"
  __pyx_L0:;

#line 1407 "View.MemoryView"
  __Pyx_TraceReturn(Py_None, 1);

#line 1407 "View.MemoryView"
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
/* Python wrapper */

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = 
#line 1 "(tree fragment)"
{"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};

#line 1 "(tree fragment)"
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0
#line 1 "(tree fragment)"
;
  long __pyx_v___pyx_checksum
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v___pyx_state = 0
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = 0;

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);

#line 1 "(tree fragment)"
  {

#line 1 "(tree fragment)"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};

#line 1 "(tree fragment)"
    PyObject* values[3] = {0,0,0};

#line 1 "(tree fragment)"
    if (unlikely(__pyx_kwds)) {

#line 1 "(tree fragment)"
      Py_ssize_t kw_args;

#line 1 "(tree fragment)"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1 "(tree fragment)"
      switch (pos_args) {
        case  3: 
#line 1 "(tree fragment)"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  2: 
#line 1 "(tree fragment)"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;
        case  1: 
#line 1 "(tree fragment)"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;

#line 1 "(tree fragment)"
        case  0: break;
        default: 
#line 1 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1 "(tree fragment)"
      switch (pos_args) {

#line 1 "(tree fragment)"
        case  0:

#line 1 "(tree fragment)"
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else 
#line 1 "(tree fragment)"
goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;

#line 1 "(tree fragment)"
        case  1:

#line 1 "(tree fragment)"
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;

#line 1 "(tree fragment)"
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        }

#line 1 "(tree fragment)"
        CYTHON_FALLTHROUGH;

#line 1 "(tree fragment)"
        case  2:

#line 1 "(tree fragment)"
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;

#line 1 "(tree fragment)"
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
        }

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
      if (unlikely(kw_args > 0)) {

#line 1 "(tree fragment)"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
      }

#line 1 "(tree fragment)"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1 "(tree fragment)"
      goto __pyx_L5_argtuple_error;

#line 1 "(tree fragment)"
    } else {

#line 1 "(tree fragment)"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "(tree fragment)"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1 "(tree fragment)"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1 "(tree fragment)"
    }

#line 1 "(tree fragment)"
    __pyx_v___pyx_type = values[0];

#line 1 "(tree fragment)"
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
    __pyx_v___pyx_state = values[2];

#line 1 "(tree fragment)"
  }

#line 1 "(tree fragment)"
  goto __pyx_L4_argument_unpacking_done;

#line 1 "(tree fragment)"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1 "(tree fragment)"
__PYX_ERR(1, 1, __pyx_L3_error)

#line 1 "(tree fragment)"
  __pyx_L3_error:;

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return NULL;

#line 1 "(tree fragment)"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1 "(tree fragment)"
__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0
#line 1 "(tree fragment)"
;
  PyObject *__pyx_v___pyx_result = 0
#line 1 "(tree fragment)"
;

#line 1 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 1 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 1 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 1 "(tree fragment)"
  int __pyx_t_1;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_2 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_3 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_4 = NULL;

#line 1 "(tree fragment)"
  PyObject *__pyx_t_5 = NULL;

#line 1 "(tree fragment)"
  int __pyx_t_6;

#line 1 "(tree fragment)"
  int __pyx_lineno = 0;

#line 1 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 1 "(tree fragment)"
  int __pyx_clineno = 0;

#line 1 "(tree fragment)"
  __Pyx_TraceFrameInit(__pyx_codeobj__23)

#line 1 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

#line 1 "(tree fragment)"
  __Pyx_TraceCall("__pyx_unpickle_Enum", __pyx_f[1], 1, 0, __PYX_ERR(1, 1, __pyx_L1_error));

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __Pyx_TraceLine(4,0,__PYX_ERR(1, 4, __pyx_L1_error))

#line 4 "(tree fragment)"
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);

#line 4 "(tree fragment)"
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __Pyx_TraceLine(5,0,__PYX_ERR(1, 5, __pyx_L1_error))

#line 5 "(tree fragment)"
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_2);

#line 5 "(tree fragment)"
    __Pyx_INCREF(__pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    __Pyx_GIVEREF(__pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);

#line 5 "(tree fragment)"
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 5 "(tree fragment)"
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)

#line 5 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_2);

#line 5 "(tree fragment)"
    __Pyx_INCREF(__pyx_t_2);

#line 5 "(tree fragment)"
    __pyx_v___pyx_PickleError = __pyx_t_2;

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 5 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __Pyx_TraceLine(6,0,__PYX_ERR(1, 6, __pyx_L1_error))

#line 6 "(tree fragment)"
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_2);

#line 6 "(tree fragment)"
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_4);

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 6 "(tree fragment)"
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; 
#line 6 "(tree fragment)"
__pyx_t_5 = NULL;

#line 6 "(tree fragment)"
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 6 "(tree fragment)"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);

#line 6 "(tree fragment)"
      if (likely(__pyx_t_5)) {

#line 6 "(tree fragment)"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 6 "(tree fragment)"
        __Pyx_INCREF(__pyx_t_5);

#line 6 "(tree fragment)"
        __Pyx_INCREF(function);

#line 6 "(tree fragment)"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 6 "(tree fragment)"
      }

#line 6 "(tree fragment)"
    }

#line 6 "(tree fragment)"
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);

#line 6 "(tree fragment)"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 6 "(tree fragment)"
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)

#line 6 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 6 "(tree fragment)"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 6 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 6 "(tree fragment)"
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */

#line 4 "(tree fragment)"
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __Pyx_TraceLine(7,0,__PYX_ERR(1, 7, __pyx_L1_error))

#line 7 "(tree fragment)"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "(tree fragment)"
  __pyx_t_4 = NULL;

#line 7 "(tree fragment)"
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {

#line 7 "(tree fragment)"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 7 "(tree fragment)"
    if (likely(__pyx_t_4)) {

#line 7 "(tree fragment)"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 7 "(tree fragment)"
      __Pyx_INCREF(__pyx_t_4);

#line 7 "(tree fragment)"
      __Pyx_INCREF(function);

#line 7 "(tree fragment)"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 7 "(tree fragment)"
    }

#line 7 "(tree fragment)"
  }

#line 7 "(tree fragment)"
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);

#line 7 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 7 "(tree fragment)"
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)

#line 7 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_3);

#line 7 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "(tree fragment)"
  __pyx_v___pyx_result = __pyx_t_3;

#line 7 "(tree fragment)"
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __Pyx_TraceLine(8,0,__PYX_ERR(1, 8, __pyx_L1_error))

#line 8 "(tree fragment)"
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);

#line 8 "(tree fragment)"
  __pyx_t_6 = (__pyx_t_1 != 0);

#line 8 "(tree fragment)"
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    __Pyx_TraceLine(9,0,__PYX_ERR(1, 9, __pyx_L1_error))

#line 9 "(tree fragment)"
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "(tree fragment)"
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)

#line 9 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_3);

#line 9 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */

#line 8 "(tree fragment)"
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_TraceLine(10,0,__PYX_ERR(1, 10, __pyx_L1_error))

#line 10 "(tree fragment)"
  __Pyx_XDECREF(__pyx_r);

#line 10 "(tree fragment)"
  __Pyx_INCREF(__pyx_v___pyx_result);

#line 10 "(tree fragment)"
  __pyx_r = __pyx_v___pyx_result;

#line 10 "(tree fragment)"
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"


#line 1 "(tree fragment)"
  /* function exit code */

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_3);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_5);

#line 1 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "(tree fragment)"
  __pyx_r = NULL;

#line 1 "(tree fragment)"
  __pyx_L0:;

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);

#line 1 "(tree fragment)"
  __Pyx_XDECREF(__pyx_v___pyx_result);

#line 1 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return __pyx_r;

#line 1 "(tree fragment)"
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {

#line 11 "(tree fragment)"
  PyObject *__pyx_r = NULL;

#line 11 "(tree fragment)"
  __Pyx_TraceDeclarations

#line 11 "(tree fragment)"
  __Pyx_RefNannyDeclarations

#line 11 "(tree fragment)"
  PyObject *__pyx_t_1 = NULL;

#line 11 "(tree fragment)"
  int __pyx_t_2;

#line 11 "(tree fragment)"
  Py_ssize_t __pyx_t_3;

#line 11 "(tree fragment)"
  int __pyx_t_4;

#line 11 "(tree fragment)"
  int __pyx_t_5;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_6 = NULL;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_7 = NULL;

#line 11 "(tree fragment)"
  PyObject *__pyx_t_8 = NULL;

#line 11 "(tree fragment)"
  int __pyx_lineno = 0;

#line 11 "(tree fragment)"
  const char *__pyx_filename = NULL;

#line 11 "(tree fragment)"
  int __pyx_clineno = 0;

#line 11 "(tree fragment)"
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

#line 11 "(tree fragment)"
  __Pyx_TraceCall("__pyx_unpickle_Enum__set_state", __pyx_f[1], 11, 0, __PYX_ERR(1, 11, __pyx_L1_error));

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  __Pyx_TraceLine(12,0,__PYX_ERR(1, 12, __pyx_L1_error))

#line 12 "(tree fragment)"
  if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 12 "(tree fragment)"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 12 "(tree fragment)"
    __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "(tree fragment)"
  }

#line 12 "(tree fragment)"
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)

#line 12 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 12 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_t_1);

#line 12 "(tree fragment)"
  __Pyx_GOTREF(__pyx_v___pyx_result->name);

#line 12 "(tree fragment)"
  __Pyx_DECREF(__pyx_v___pyx_result->name);

#line 12 "(tree fragment)"
  __pyx_v___pyx_result->name = __pyx_t_1;

#line 12 "(tree fragment)"
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  __Pyx_TraceLine(13,0,__PYX_ERR(1, 13, __pyx_L1_error))

#line 13 "(tree fragment)"
  if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 13 "(tree fragment)"
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");

#line 13 "(tree fragment)"
    __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  }

#line 13 "(tree fragment)"
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);

#line 13 "(tree fragment)"
  if (__pyx_t_4) {

#line 13 "(tree fragment)"
  } else {

#line 13 "(tree fragment)"
    __pyx_t_2 = __pyx_t_4;

#line 13 "(tree fragment)"
    goto __pyx_L4_bool_binop_done;

#line 13 "(tree fragment)"
  }

#line 13 "(tree fragment)"
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)

#line 13 "(tree fragment)"
  __pyx_t_5 = (__pyx_t_4 != 0);

#line 13 "(tree fragment)"
  __pyx_t_2 = __pyx_t_5;

#line 13 "(tree fragment)"
  __pyx_L4_bool_binop_done:;

#line 13 "(tree fragment)"
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __Pyx_TraceLine(14,0,__PYX_ERR(1, 14, __pyx_L1_error))

#line 14 "(tree fragment)"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_6);

#line 14 "(tree fragment)"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_7);

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 14 "(tree fragment)"
    if (unlikely(__pyx_v___pyx_state == Py_None)) {

#line 14 "(tree fragment)"
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");

#line 14 "(tree fragment)"
      __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    }

#line 14 "(tree fragment)"
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_6);

#line 14 "(tree fragment)"
    __pyx_t_8 = NULL;

#line 14 "(tree fragment)"
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {

#line 14 "(tree fragment)"
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 14 "(tree fragment)"
      if (likely(__pyx_t_8)) {

#line 14 "(tree fragment)"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 14 "(tree fragment)"
        __Pyx_INCREF(__pyx_t_8);

#line 14 "(tree fragment)"
        __Pyx_INCREF(function);

#line 14 "(tree fragment)"
        __Pyx_DECREF_SET(__pyx_t_7, function);

#line 14 "(tree fragment)"
      }

#line 14 "(tree fragment)"
    }

#line 14 "(tree fragment)"
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);

#line 14 "(tree fragment)"
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 14 "(tree fragment)"
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)

#line 14 "(tree fragment)"
    __Pyx_GOTREF(__pyx_t_1);

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 14 "(tree fragment)"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */

#line 13 "(tree fragment)"
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  /* function exit code */

#line 11 "(tree fragment)"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 11 "(tree fragment)"
  goto __pyx_L0;

#line 11 "(tree fragment)"
  __pyx_L1_error:;

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_6);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_7);

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_8);

#line 11 "(tree fragment)"
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "(tree fragment)"
  __pyx_r = 0;

#line 11 "(tree fragment)"
  __pyx_L0:;

#line 11 "(tree fragment)"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "(tree fragment)"
  __Pyx_TraceReturn(__pyx_r, 0);

#line 11 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 11 "(tree fragment)"
  return __pyx_r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_8pymaxion_11constraints_5force_Force __pyx_vtable_8pymaxion_11constraints_5force_Force;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_8pymaxion_11constraints_5force_Force(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_obj_8pymaxion_11constraints_5force_Force *p;

#line 11 "(tree fragment)"
  PyObject *o = __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_new(t, a, k);

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_obj_8pymaxion_11constraints_5force_Force *)o);

#line 11 "(tree fragment)"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint*)__pyx_vtabptr_8pymaxion_11constraints_5force_Force;

#line 11 "(tree fragment)"
  if (unlikely(__pyx_pw_8pymaxion_11constraints_5force_5Force_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
  bad:

#line 11 "(tree fragment)"
  Py_DECREF(o); o = 0;

#line 11 "(tree fragment)"
  return NULL;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_8pymaxion_11constraints_5force_Force(PyObject *o) {

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  PyObject_GC_Track(o);

#line 11 "(tree fragment)"
  if (likely(__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint)) __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_8pymaxion_11constraints_5force_Force);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse_8pymaxion_11constraints_5force_Force(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  e = ((likely(__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint)) ? ((__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_traverse) ? __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_8pymaxion_11constraints_5force_Force)); if (e) return e;

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear_8pymaxion_11constraints_5force_Force(PyObject *o) {

#line 11 "(tree fragment)"
  if (likely(__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint)) { if (__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_clear) __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_8pymaxion_11constraints_5force_Force);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_8pymaxion_11constraints_5force_Force[] = {

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pymaxion_11constraints_5force_5Force_5__reduce_cython__, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pymaxion_11constraints_5force_5Force_7__setstate_cython__, METH_O, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type_8pymaxion_11constraints_5force_Force = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "pymaxion.constraints.force.Force", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_obj_8pymaxion_11constraints_5force_Force), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_8pymaxion_11constraints_5force_Force, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse_8pymaxion_11constraints_5force_Force, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear_8pymaxion_11constraints_5force_Force, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_8pymaxion_11constraints_5force_Force, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  0, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  __pyx_pw_8pymaxion_11constraints_5force_5Force_3__init__, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_8pymaxion_11constraints_5force_Force, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_array __pyx_vtable_array;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_array_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_array_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_vtab = __pyx_vtabptr_array;

#line 11 "(tree fragment)"
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
  bad:

#line 11 "(tree fragment)"
  Py_DECREF(o); o = 0;

#line 11 "(tree fragment)"
  return NULL;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_array(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {

#line 11 "(tree fragment)"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_array___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  Py_CLEAR(p->mode);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_format);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {

#line 11 "(tree fragment)"
  PyObject *r;

#line 11 "(tree fragment)"
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

#line 11 "(tree fragment)"
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

#line 11 "(tree fragment)"
  Py_DECREF(x);

#line 11 "(tree fragment)"
  return r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {

#line 11 "(tree fragment)"
  if (v) {

#line 11 "(tree fragment)"
    return __pyx_array___setitem__(o, i, v);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  else {

#line 11 "(tree fragment)"
    PyErr_Format(PyExc_NotImplementedError,

#line 11 "(tree fragment)"
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);

#line 11 "(tree fragment)"
    return -1;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {

#line 11 "(tree fragment)"
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);

#line 11 "(tree fragment)"
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {

#line 11 "(tree fragment)"
    PyErr_Clear();

#line 11 "(tree fragment)"
    v = __pyx_array___getattr__(o, n);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return v;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_array[] = {

#line 11 "(tree fragment)"
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyGetSetDef __pyx_getsets_array[] = {

#line 11 "(tree fragment)"
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PySequenceMethods __pyx_tp_as_sequence_array = {

#line 11 "(tree fragment)"
  __pyx_array___len__, /*sq_length*/

#line 11 "(tree fragment)"
  0, /*sq_concat*/

#line 11 "(tree fragment)"
  0, /*sq_repeat*/

#line 11 "(tree fragment)"
  __pyx_sq_item_array, /*sq_item*/

#line 11 "(tree fragment)"
  0, /*sq_slice*/

#line 11 "(tree fragment)"
  0, /*sq_ass_item*/

#line 11 "(tree fragment)"
  0, /*sq_ass_slice*/

#line 11 "(tree fragment)"
  0, /*sq_contains*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_concat*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_repeat*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMappingMethods __pyx_tp_as_mapping_array = {

#line 11 "(tree fragment)"
  __pyx_array___len__, /*mp_length*/

#line 11 "(tree fragment)"
  __pyx_array___getitem__, /*mp_subscript*/

#line 11 "(tree fragment)"
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_array = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_array_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_array = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "pymaxion.constraints.force.array", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_array, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  __pyx_tp_getattro_array, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  0, /*tp_traverse*/

#line 11 "(tree fragment)"
  0, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_array, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  __pyx_getsets_array, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_array, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_MemviewEnum_obj *)o);

#line 11 "(tree fragment)"
  p->name = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_Enum(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  Py_CLEAR(p->name);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  if (p->name) {

#line 11 "(tree fragment)"
    e = (*v)(p->name, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear_Enum(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->name);

#line 11 "(tree fragment)"
  p->name = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_Enum[] = {

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_MemviewEnum = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "pymaxion.constraints.force.Enum", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_MemviewEnum___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse_Enum, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear_Enum, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_Enum, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  0, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  __pyx_MemviewEnum___init__, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_Enum, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p;

#line 11 "(tree fragment)"
  PyObject *o;

#line 11 "(tree fragment)"
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {

#line 11 "(tree fragment)"
    o = (*t->tp_alloc)(t, 0);

#line 11 "(tree fragment)"
  } else {

#line 11 "(tree fragment)"
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_memoryview_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_vtab = __pyx_vtabptr_memoryview;

#line 11 "(tree fragment)"
  p->obj = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_size = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->_array_interface = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->view.obj = NULL;

#line 11 "(tree fragment)"
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
  bad:

#line 11 "(tree fragment)"
  Py_DECREF(o); o = 0;

#line 11 "(tree fragment)"
  return NULL;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc_memoryview(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_memoryview___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  Py_CLEAR(p->obj);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_size);

#line 11 "(tree fragment)"
  Py_CLEAR(p->_array_interface);

#line 11 "(tree fragment)"
  (*Py_TYPE(o)->tp_free)(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  if (p->obj) {

#line 11 "(tree fragment)"
    e = (*v)(p->obj, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->_size) {

#line 11 "(tree fragment)"
    e = (*v)(p->_size, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->_array_interface) {

#line 11 "(tree fragment)"
    e = (*v)(p->_array_interface, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  if (p->view.obj) {

#line 11 "(tree fragment)"
    e = (*v)(p->view.obj, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear_memoryview(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->obj);

#line 11 "(tree fragment)"
  p->obj = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->_size);

#line 11 "(tree fragment)"
  p->_size = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->_array_interface);

#line 11 "(tree fragment)"
  p->_array_interface = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  Py_CLEAR(p->view.obj);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {

#line 11 "(tree fragment)"
  PyObject *r;

#line 11 "(tree fragment)"
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;

#line 11 "(tree fragment)"
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);

#line 11 "(tree fragment)"
  Py_DECREF(x);

#line 11 "(tree fragment)"
  return r;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {

#line 11 "(tree fragment)"
  if (v) {

#line 11 "(tree fragment)"
    return __pyx_memoryview___setitem__(o, i, v);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  else {

#line 11 "(tree fragment)"
    PyErr_Format(PyExc_NotImplementedError,

#line 11 "(tree fragment)"
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);

#line 11 "(tree fragment)"
    return -1;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods_memoryview[] = {

#line 11 "(tree fragment)"
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyGetSetDef __pyx_getsets_memoryview[] = {

#line 11 "(tree fragment)"
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PySequenceMethods __pyx_tp_as_sequence_memoryview = {

#line 11 "(tree fragment)"
  __pyx_memoryview___len__, /*sq_length*/

#line 11 "(tree fragment)"
  0, /*sq_concat*/

#line 11 "(tree fragment)"
  0, /*sq_repeat*/

#line 11 "(tree fragment)"
  __pyx_sq_item_memoryview, /*sq_item*/

#line 11 "(tree fragment)"
  0, /*sq_slice*/

#line 11 "(tree fragment)"
  0, /*sq_ass_item*/

#line 11 "(tree fragment)"
  0, /*sq_ass_slice*/

#line 11 "(tree fragment)"
  0, /*sq_contains*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_concat*/

#line 11 "(tree fragment)"
  0, /*sq_inplace_repeat*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMappingMethods __pyx_tp_as_mapping_memoryview = {

#line 11 "(tree fragment)"
  __pyx_memoryview___len__, /*mp_length*/

#line 11 "(tree fragment)"
  __pyx_memoryview___getitem__, /*mp_subscript*/

#line 11 "(tree fragment)"
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyBufferProcs __pyx_tp_as_buffer_memoryview = {

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getreadbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getwritebuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getsegcount*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*bf_getcharbuffer*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/

#line 11 "(tree fragment)"
  0, /*bf_releasebuffer*/

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_memoryview = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "pymaxion.constraints.force.memoryview", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  __pyx_memoryview___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  __pyx_memoryview___str__, /*tp_str*/

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  0, /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse_memoryview, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear_memoryview, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods_memoryview, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  __pyx_getsets_memoryview, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new_memoryview, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p;

#line 11 "(tree fragment)"
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);

#line 11 "(tree fragment)"
  if (unlikely(!o)) return 0;

#line 11 "(tree fragment)"
  p = ((struct __pyx_memoryviewslice_obj *)o);

#line 11 "(tree fragment)"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;

#line 11 "(tree fragment)"
  p->from_object = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  p->from_slice.memview = NULL;

#line 11 "(tree fragment)"
  return o;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  #if CYTHON_USE_TP_FINALIZE

#line 11 "(tree fragment)"
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {

#line 11 "(tree fragment)"
    if (PyObject_CallFinalizerFromDealloc(o)) return;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  PyObject_GC_UnTrack(o);

#line 11 "(tree fragment)"
  {

#line 11 "(tree fragment)"
    PyObject *etype, *eval, *etb;

#line 11 "(tree fragment)"
    PyErr_Fetch(&etype, &eval, &etb);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);

#line 11 "(tree fragment)"
    __pyx_memoryviewslice___dealloc__(o);

#line 11 "(tree fragment)"
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);

#line 11 "(tree fragment)"
    PyErr_Restore(etype, eval, etb);

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  Py_CLEAR(p->from_object);

#line 11 "(tree fragment)"
  PyObject_GC_Track(o);

#line 11 "(tree fragment)"
  __pyx_tp_dealloc_memoryview(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {

#line 11 "(tree fragment)"
  int e;

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;

#line 11 "(tree fragment)"
  if (p->from_object) {

#line 11 "(tree fragment)"
    e = (*v)(p->from_object, a); if (e) return e;

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static int __pyx_tp_clear__memoryviewslice(PyObject *o) {

#line 11 "(tree fragment)"
  PyObject* tmp;

#line 11 "(tree fragment)"
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;

#line 11 "(tree fragment)"
  __pyx_tp_clear_memoryview(o);

#line 11 "(tree fragment)"
  tmp = ((PyObject*)p->from_object);

#line 11 "(tree fragment)"
  p->from_object = Py_None; Py_INCREF(Py_None);

#line 11 "(tree fragment)"
  Py_XDECREF(tmp);

#line 11 "(tree fragment)"
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);

#line 11 "(tree fragment)"
  return 0;

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {

#line 11 "(tree fragment)"
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);

#line 11 "(tree fragment)"
}

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods__memoryviewslice[] = {

#line 11 "(tree fragment)"
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},

#line 11 "(tree fragment)"
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {

#line 11 "(tree fragment)"
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},

#line 11 "(tree fragment)"
  {0, 0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyTypeObject __pyx_type___pyx_memoryviewslice = {

#line 11 "(tree fragment)"
  PyVarObject_HEAD_INIT(0, 0)

#line 11 "(tree fragment)"
  "pymaxion.constraints.force._memoryviewslice", /*tp_name*/

#line 11 "(tree fragment)"
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/

#line 11 "(tree fragment)"
  0, /*tp_itemsize*/

#line 11 "(tree fragment)"
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX < 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4

#line 11 "(tree fragment)"
  0, /*tp_vectorcall_offset*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattr*/

#line 11 "(tree fragment)"
  0, /*tp_setattr*/

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION < 3

#line 11 "(tree fragment)"
  0, /*tp_compare*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  0, /*tp_as_async*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY

#line 11 "(tree fragment)"
  __pyx_memoryview___repr__, /*tp_repr*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  0, /*tp_repr*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_as_number*/

#line 11 "(tree fragment)"
  0, /*tp_as_sequence*/

#line 11 "(tree fragment)"
  0, /*tp_as_mapping*/

#line 11 "(tree fragment)"
  0, /*tp_hash*/

#line 11 "(tree fragment)"
  0, /*tp_call*/

#line 11 "(tree fragment)"
  #if CYTHON_COMPILING_IN_PYPY

#line 11 "(tree fragment)"
  __pyx_memoryview___str__, /*tp_str*/

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  0, /*tp_str*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  0, /*tp_getattro*/

#line 11 "(tree fragment)"
  0, /*tp_setattro*/

#line 11 "(tree fragment)"
  0, /*tp_as_buffer*/

#line 11 "(tree fragment)"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/

#line 11 "(tree fragment)"
  "Internal class for passing memoryview slices to Python", /*tp_doc*/

#line 11 "(tree fragment)"
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/

#line 11 "(tree fragment)"
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/

#line 11 "(tree fragment)"
  0, /*tp_richcompare*/

#line 11 "(tree fragment)"
  0, /*tp_weaklistoffset*/

#line 11 "(tree fragment)"
  0, /*tp_iter*/

#line 11 "(tree fragment)"
  0, /*tp_iternext*/

#line 11 "(tree fragment)"
  __pyx_methods__memoryviewslice, /*tp_methods*/

#line 11 "(tree fragment)"
  0, /*tp_members*/

#line 11 "(tree fragment)"
  __pyx_getsets__memoryviewslice, /*tp_getset*/

#line 11 "(tree fragment)"
  0, /*tp_base*/

#line 11 "(tree fragment)"
  0, /*tp_dict*/

#line 11 "(tree fragment)"
  0, /*tp_descr_get*/

#line 11 "(tree fragment)"
  0, /*tp_descr_set*/

#line 11 "(tree fragment)"
  0, /*tp_dictoffset*/

#line 11 "(tree fragment)"
  0, /*tp_init*/

#line 11 "(tree fragment)"
  0, /*tp_alloc*/

#line 11 "(tree fragment)"
  __pyx_tp_new__memoryviewslice, /*tp_new*/

#line 11 "(tree fragment)"
  0, /*tp_free*/

#line 11 "(tree fragment)"
  0, /*tp_is_gc*/

#line 11 "(tree fragment)"
  0, /*tp_bases*/

#line 11 "(tree fragment)"
  0, /*tp_mro*/

#line 11 "(tree fragment)"
  0, /*tp_cache*/

#line 11 "(tree fragment)"
  0, /*tp_subclasses*/

#line 11 "(tree fragment)"
  0, /*tp_weaklist*/

#line 11 "(tree fragment)"
  0, /*tp_del*/

#line 11 "(tree fragment)"
  0, /*tp_version_tag*/

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030400a1

#line 11 "(tree fragment)"
  0, /*tp_finalize*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b1

#line 11 "(tree fragment)"
  0, /*tp_vectorcall*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000

#line 11 "(tree fragment)"
  0, /*tp_print*/

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static PyMethodDef __pyx_methods[] = {

#line 11 "(tree fragment)"
  {0, 0, 0, 0}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
#if PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
#if CYTHON_PEP489_MULTI_PHASE_INIT

#line 11 "(tree fragment)"
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/

#line 11 "(tree fragment)"
static int __pyx_pymod_exec_force(PyObject* module); /*proto*/

#line 11 "(tree fragment)"
static PyModuleDef_Slot __pyx_moduledef_slots[] = {

#line 11 "(tree fragment)"
  {Py_mod_create, (void*)__pyx_pymod_create},

#line 11 "(tree fragment)"
  {Py_mod_exec, (void*)__pyx_pymod_exec_force},

#line 11 "(tree fragment)"
  {0, NULL}

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
static struct PyModuleDef __pyx_moduledef = {

#line 11 "(tree fragment)"
    PyModuleDef_HEAD_INIT,

#line 11 "(tree fragment)"
    "force",

#line 11 "(tree fragment)"
    0, /* m_doc */

#line 11 "(tree fragment)"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 11 "(tree fragment)"
    0, /* m_size */

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
    -1, /* m_size */

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
    __pyx_methods /* m_methods */,

#line 11 "(tree fragment)"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 11 "(tree fragment)"
    __pyx_moduledef_slots, /* m_slots */

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
    NULL, /* m_reload */

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
    NULL, /* m_traverse */

#line 11 "(tree fragment)"
    NULL, /* m_clear */

#line 11 "(tree fragment)"
    NULL /* m_free */

#line 11 "(tree fragment)"
};

#line 11 "(tree fragment)"
#endif

#line 11 "(tree fragment)"
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Force, __pyx_k_Force, sizeof(__pyx_k_Force), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_kp_u_Incorrect_number_of_particles_fo, __pyx_k_Incorrect_number_of_particles_fo, sizeof(__pyx_k_Incorrect_number_of_particles_fo), 0, 1, 0, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_force_vector, __pyx_k_force_vector, sizeof(__pyx_k_force_vector), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_p_index, __pyx_k_p_index, sizeof(__pyx_k_p_index), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_particles, __pyx_k_particles, sizeof(__pyx_k_particles), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 21, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 180, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pymaxion/constraints/force.pyx":20
 * 
 *         if len(particles) != self.constraint_n_particles:
 *             raise ValueError("Incorrect number of particles for Force")             # <<<<<<<<<<<<<<
 *         super().__init__(particles)
 * 
 */

#line 20 "pymaxion/constraints/force.pyx"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Incorrect_number_of_particles_fo); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 20, __pyx_L1_error)

#line 20 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 20 "pymaxion/constraints/force.pyx"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */

#line 133 "View.MemoryView"
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 133, __pyx_L1_error)

#line 133 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__5);

#line 133 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */

#line 136 "View.MemoryView"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 136, __pyx_L1_error)

#line 136 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 136 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 148 "View.MemoryView"
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 148, __pyx_L1_error)

#line 148 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 148 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */

#line 176 "View.MemoryView"
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 176, __pyx_L1_error)

#line 176 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 176 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */

#line 192 "View.MemoryView"
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 192, __pyx_L1_error)

#line 192 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 192 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */

#line 418 "View.MemoryView"
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 418, __pyx_L1_error)

#line 418 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__12);

#line 418 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */

#line 495 "View.MemoryView"
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 495, __pyx_L1_error)

#line 495 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 495 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */

#line 520 "View.MemoryView"
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 520, __pyx_L1_error)

#line 520 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 520 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */

#line 570 "View.MemoryView"
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 570, __pyx_L1_error)

#line 570 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 570 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */

#line 577 "View.MemoryView"
  __pyx_tuple__16 = PyTuple_New(1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 577, __pyx_L1_error)

#line 577 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 577 "View.MemoryView"
  __Pyx_INCREF(__pyx_int_neg_1);

#line 577 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_int_neg_1);

#line 577 "View.MemoryView"
  PyTuple_SET_ITEM(__pyx_tuple__16, 0, __pyx_int_neg_1);

#line 577 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */

#line 682 "View.MemoryView"
  __pyx_slice__19 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__19)) __PYX_ERR(1, 682, __pyx_L1_error)

#line 682 "View.MemoryView"
  __Pyx_GOTREF(__pyx_slice__19);

#line 682 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_slice__19);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 703 "View.MemoryView"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 703, __pyx_L1_error)

#line 703 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 703 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

#line 2 "(tree fragment)"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 2, __pyx_L1_error)

#line 2 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 2 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */

#line 4 "(tree fragment)"
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 4, __pyx_L1_error)

#line 4 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 4 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */

#line 286 "View.MemoryView"
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 286, __pyx_L1_error)

#line 286 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 286 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */

#line 287 "View.MemoryView"
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 287, __pyx_L1_error)

#line 287 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__25);

#line 287 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 288 "View.MemoryView"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 288, __pyx_L1_error)

#line 288 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 288 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */

#line 291 "View.MemoryView"
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 291, __pyx_L1_error)

#line 291 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__27);

#line 291 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 292 "View.MemoryView"
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 292, __pyx_L1_error)

#line 292 "View.MemoryView"
  __Pyx_GOTREF(__pyx_tuple__28);

#line 292 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

#line 1 "(tree fragment)"
  __pyx_tuple__29 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_tuple__29);

#line 1 "(tree fragment)"
  __Pyx_GIVEREF(__pyx_tuple__29);

#line 1 "(tree fragment)"
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return 0;

#line 1 "(tree fragment)"
  __pyx_L1_error:;

#line 1 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 1 "(tree fragment)"
  return -1;

#line 1 "(tree fragment)"
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("pymaxion.constraints.constraint"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint = __Pyx_ImportType(__pyx_t_1, "pymaxion.constraints.constraint", "Constraint", sizeof(struct __pyx_obj_8pymaxion_11constraints_10constraint_Constraint), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_8pymaxion_11constraints_10constraint_Constraint = (struct __pyx_vtabstruct_8pymaxion_11constraints_10constraint_Constraint*)__Pyx_GetVtable(__pyx_ptype_8pymaxion_11constraints_10constraint_Constraint->tp_dict); if (unlikely(!__pyx_vtabptr_8pymaxion_11constraints_10constraint_Constraint)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_8pymaxion_11constraints_5force_Force = &__pyx_vtable_8pymaxion_11constraints_5force_Force;
  __pyx_vtable_8pymaxion_11constraints_5force_Force.__pyx_base = *__pyx_vtabptr_8pymaxion_11constraints_10constraint_Constraint;
  __pyx_type_8pymaxion_11constraints_5force_Force.tp_base = __pyx_ptype_8pymaxion_11constraints_10constraint_Constraint;
  if (PyType_Ready(&__pyx_type_8pymaxion_11constraints_5force_Force) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pymaxion_11constraints_5force_Force.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pymaxion_11constraints_5force_Force.tp_dictoffset && __pyx_type_8pymaxion_11constraints_5force_Force.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pymaxion_11constraints_5force_Force.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_8pymaxion_11constraints_5force_Force.tp_dict, __pyx_vtabptr_8pymaxion_11constraints_5force_Force) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Force, (PyObject *)&__pyx_type_8pymaxion_11constraints_5force_Force) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pymaxion_11constraints_5force_Force) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_ptype_8pymaxion_11constraints_5force_Force = &__pyx_type_8pymaxion_11constraints_5force_Force;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initforce(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initforce(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_force(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_force(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_force(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  static PyThread_type_lock __pyx_t_2[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'force' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_force(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("force", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pymaxion__constraints__force) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pymaxion.constraints.force")) {
      if (unlikely(PyDict_SetItemString(modules, "pymaxion.constraints.force", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_force(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "pymaxion/constraints/force.pyx":17
 * 
 *     def __init__(Force self, list particles,
 *                  list force_vector, list p_index=[]):             # <<<<<<<<<<<<<<
 * 
 *         if len(particles) != self.constraint_n_particles:
 */
  __Pyx_TraceLine(17,0,__PYX_ERR(0, 17, __pyx_L1_error))

#line 17 "pymaxion/constraints/force.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)

#line 17 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "pymaxion/constraints/force.pyx"
  __pyx_k_ = ((PyObject*)__pyx_t_1);

#line 17 "pymaxion/constraints/force.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 17 "pymaxion/constraints/force.pyx"
  __pyx_t_1 = 0;

  /* "pymaxion/constraints/force.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # cython: cdivision = True
 * # cython: boundscheck = False
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(0, 1, __pyx_L1_error))

#line 1 "pymaxion/constraints/force.pyx"
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "pymaxion/constraints/force.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "pymaxion/constraints/force.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)

#line 1 "pymaxion/constraints/force.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __Pyx_TraceLine(209,0,__PYX_ERR(1, 209, __pyx_L1_error))

#line 209 "View.MemoryView"
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)

#line 209 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 209 "View.MemoryView"
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 209, __pyx_L1_error)

#line 209 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 209 "View.MemoryView"
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */
  __Pyx_TraceLine(226,0,__PYX_ERR(1, 226, __pyx_L1_error))

#line 226 "View.MemoryView"


  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */
  __Pyx_TraceLine(244,0,__PYX_ERR(1, 244, __pyx_L1_error))

#line 244 "View.MemoryView"


  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __Pyx_TraceLine(286,0,__PYX_ERR(1, 286, __pyx_L1_error))

#line 286 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)

#line 286 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 286 "View.MemoryView"
  __Pyx_XGOTREF(generic);

#line 286 "View.MemoryView"
  __Pyx_DECREF_SET(generic, __pyx_t_1);

#line 286 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 286 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __Pyx_TraceLine(287,0,__PYX_ERR(1, 287, __pyx_L1_error))

#line 287 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)

#line 287 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 287 "View.MemoryView"
  __Pyx_XGOTREF(strided);

#line 287 "View.MemoryView"
  __Pyx_DECREF_SET(strided, __pyx_t_1);

#line 287 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 287 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(288,0,__PYX_ERR(1, 288, __pyx_L1_error))

#line 288 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)

#line 288 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 288 "View.MemoryView"
  __Pyx_XGOTREF(indirect);

#line 288 "View.MemoryView"
  __Pyx_DECREF_SET(indirect, __pyx_t_1);

#line 288 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 288 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __Pyx_TraceLine(291,0,__PYX_ERR(1, 291, __pyx_L1_error))

#line 291 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)

#line 291 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 291 "View.MemoryView"
  __Pyx_XGOTREF(contiguous);

#line 291 "View.MemoryView"
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);

#line 291 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 291 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(292,0,__PYX_ERR(1, 292, __pyx_L1_error))

#line 292 "View.MemoryView"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)

#line 292 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 292 "View.MemoryView"
  __Pyx_XGOTREF(indirect_contiguous);

#line 292 "View.MemoryView"
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);

#line 292 "View.MemoryView"
  __Pyx_GIVEREF(__pyx_t_1);

#line 292 "View.MemoryView"
  __pyx_t_1 = 0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */
  __Pyx_TraceLine(298,0,__PYX_ERR(1, 298, __pyx_L1_error))

#line 298 "View.MemoryView"


  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __Pyx_TraceLine(316,0,__PYX_ERR(1, 316, __pyx_L1_error))

#line 316 "View.MemoryView"
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __Pyx_TraceLine(317,0,__PYX_ERR(1, 317, __pyx_L1_error))

#line 317 "View.MemoryView"
  __pyx_t_2[0] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[1] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[2] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[3] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[4] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[5] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[6] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  __pyx_t_2[7] = PyThread_allocate_lock();

#line 317 "View.MemoryView"
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_2, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */
  __Pyx_TraceLine(393,0,__PYX_ERR(1, 393, __pyx_L1_error))

#line 393 "View.MemoryView"


  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */
  __Pyx_TraceLine(431,0,__PYX_ERR(1, 431, __pyx_L1_error))

#line 431 "View.MemoryView"


  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */
  __Pyx_TraceLine(441,0,__PYX_ERR(1, 441, __pyx_L1_error))

#line 441 "View.MemoryView"


  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */
  __Pyx_TraceLine(449,0,__PYX_ERR(1, 449, __pyx_L1_error))

#line 449 "View.MemoryView"


  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */
  __Pyx_TraceLine(481,0,__PYX_ERR(1, 481, __pyx_L1_error))

#line 481 "View.MemoryView"


  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */
  __Pyx_TraceLine(485,0,__PYX_ERR(1, 485, __pyx_L1_error))

#line 485 "View.MemoryView"


  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */
  __Pyx_TraceLine(501,0,__PYX_ERR(1, 501, __pyx_L1_error))

#line 501 "View.MemoryView"


  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(549,0,__PYX_ERR(1, 549, __pyx_L1_error))

#line 549 "View.MemoryView"
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 549, __pyx_L1_error)

#line 549 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 549 "View.MemoryView"
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 549, __pyx_L1_error)

#line 549 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 549 "View.MemoryView"
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */
  __Pyx_TraceLine(657,0,__PYX_ERR(1, 657, __pyx_L1_error))

#line 657 "View.MemoryView"


  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */
  __Pyx_TraceLine(663,0,__PYX_ERR(1, 663, __pyx_L1_error))

#line 663 "View.MemoryView"


  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */
  __Pyx_TraceLine(666,0,__PYX_ERR(1, 666, __pyx_L1_error))

#line 666 "View.MemoryView"


  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __Pyx_TraceLine(700,0,__PYX_ERR(1, 700, __pyx_L1_error))

#line 700 "View.MemoryView"


  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */
  __Pyx_TraceLine(710,0,__PYX_ERR(1, 710, __pyx_L1_error))

#line 710 "View.MemoryView"


  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */
  __Pyx_TraceLine(807,0,__PYX_ERR(1, 807, __pyx_L1_error))

#line 807 "View.MemoryView"


  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */
  __Pyx_TraceLine(910,0,__PYX_ERR(1, 910, __pyx_L1_error))

#line 910 "View.MemoryView"


  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */
  __Pyx_TraceLine(943,0,__PYX_ERR(1, 943, __pyx_L1_error))

#line 943 "View.MemoryView"


  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */
  __Pyx_TraceLine(979,0,__PYX_ERR(1, 979, __pyx_L1_error))

#line 979 "View.MemoryView"


  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */
  __Pyx_TraceLine(985,0,__PYX_ERR(1, 985, __pyx_L1_error))

#line 985 "View.MemoryView"


  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(995,0,__PYX_ERR(1, 995, __pyx_L1_error))

#line 995 "View.MemoryView"
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 995, __pyx_L1_error)

#line 995 "View.MemoryView"
  __Pyx_GOTREF(__pyx_t_1);

#line 995 "View.MemoryView"
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 995, __pyx_L1_error)

#line 995 "View.MemoryView"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 995 "View.MemoryView"
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */
  __Pyx_TraceLine(999,0,__PYX_ERR(1, 999, __pyx_L1_error))

#line 999 "View.MemoryView"


  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */
  __Pyx_TraceLine(1052,0,__PYX_ERR(1, 1052, __pyx_L1_error))

#line 1052 "View.MemoryView"


  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */
  __Pyx_TraceLine(1063,0,__PYX_ERR(1, 1063, __pyx_L1_error))

#line 1063 "View.MemoryView"


  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */
  __Pyx_TraceLine(1080,0,__PYX_ERR(1, 1080, __pyx_L1_error))

#line 1080 "View.MemoryView"


  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */
  __Pyx_TraceLine(1087,0,__PYX_ERR(1, 1087, __pyx_L1_error))

#line 1087 "View.MemoryView"


  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */
  __Pyx_TraceLine(1109,0,__PYX_ERR(1, 1109, __pyx_L1_error))

#line 1109 "View.MemoryView"


  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */
  __Pyx_TraceLine(1116,0,__PYX_ERR(1, 1116, __pyx_L1_error))

#line 1116 "View.MemoryView"


  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */
  __Pyx_TraceLine(1170,0,__PYX_ERR(1, 1170, __pyx_L1_error))

#line 1170 "View.MemoryView"


  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */
  __Pyx_TraceLine(1177,0,__PYX_ERR(1, 1177, __pyx_L1_error))

#line 1177 "View.MemoryView"


  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */
  __Pyx_TraceLine(1187,0,__PYX_ERR(1, 1187, __pyx_L1_error))

#line 1187 "View.MemoryView"


  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */
  __Pyx_TraceLine(1208,0,__PYX_ERR(1, 1208, __pyx_L1_error))

#line 1208 "View.MemoryView"


  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */
  __Pyx_TraceLine(1251,0,__PYX_ERR(1, 1251, __pyx_L1_error))

#line 1251 "View.MemoryView"


  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */
  __Pyx_TraceLine(1257,0,__PYX_ERR(1, 1257, __pyx_L1_error))

#line 1257 "View.MemoryView"


  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */
  __Pyx_TraceLine(1261,0,__PYX_ERR(1, 1261, __pyx_L1_error))

#line 1261 "View.MemoryView"


  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */
  __Pyx_TraceLine(1268,0,__PYX_ERR(1, 1268, __pyx_L1_error))

#line 1268 "View.MemoryView"


  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */
  __Pyx_TraceLine(1340,0,__PYX_ERR(1, 1340, __pyx_L1_error))

#line 1340 "View.MemoryView"


  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */
  __Pyx_TraceLine(1362,0,__PYX_ERR(1, 1362, __pyx_L1_error))

#line 1362 "View.MemoryView"


  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */
  __Pyx_TraceLine(1371,0,__PYX_ERR(1, 1371, __pyx_L1_error))

#line 1371 "View.MemoryView"


  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */
  __Pyx_TraceLine(1377,0,__PYX_ERR(1, 1377, __pyx_L1_error))

#line 1377 "View.MemoryView"


  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */
  __Pyx_TraceLine(1397,0,__PYX_ERR(1, 1397, __pyx_L1_error))

#line 1397 "View.MemoryView"


  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */
  __Pyx_TraceLine(1407,0,__PYX_ERR(1, 1407, __pyx_L1_error))

#line 1407 "View.MemoryView"


  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __Pyx_TraceLine(1,0,__PYX_ERR(1, 1, __pyx_L1_error))

#line 1 "(tree fragment)"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "(tree fragment)"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)

#line 1 "(tree fragment)"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_TraceLine(11,0,__PYX_ERR(1, 11, __pyx_L1_error))

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  __Pyx_TraceReturn(Py_None, 0);

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  /*--- Wrapped vars code ---*/

#line 11 "(tree fragment)"


#line 11 "(tree fragment)"
  goto __pyx_L0;

#line 11 "(tree fragment)"
  __pyx_L1_error:;

#line 11 "(tree fragment)"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "(tree fragment)"
  if (__pyx_m) {

#line 11 "(tree fragment)"
    if (__pyx_d) {

#line 11 "(tree fragment)"
      __Pyx_AddTraceback("init pymaxion.constraints.force", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "(tree fragment)"
    }

#line 11 "(tree fragment)"
    Py_CLEAR(__pyx_m);

#line 11 "(tree fragment)"
  } else if (!PyErr_Occurred()) {

#line 11 "(tree fragment)"
    PyErr_SetString(PyExc_ImportError, "init pymaxion.constraints.force");

#line 11 "(tree fragment)"
  }

#line 11 "(tree fragment)"
  __pyx_L0:;

#line 11 "(tree fragment)"
  __Pyx_RefNannyFinishContext();

#line 11 "(tree fragment)"
  #if CYTHON_PEP489_MULTI_PHASE_INIT

#line 11 "(tree fragment)"
  return (__pyx_m != NULL) ? 0 : -1;

#line 11 "(tree fragment)"
  #elif PY_MAJOR_VERSION >= 3

#line 11 "(tree fragment)"
  return __pyx_m;

#line 11 "(tree fragment)"
  #else

#line 11 "(tree fragment)"
  return;

#line 11 "(tree fragment)"
  #endif

#line 11 "(tree fragment)"
}

#line 1 "cython_utility"

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
      __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* MemviewSliceCopyTemplate */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
